--- MinecraftServer.java
+++ MinecraftServer.java
@@ -1,43 +1,39 @@
 package net.minecraft.server;
 
-import net.minecraft.src.ThreadServerApplication;
-import net.minecraft.src.ServerGUI;
-import java.awt.GraphicsEnvironment;
-import net.minecraft.src.Packet3Chat;
-import net.minecraft.src.ItemStack;
-import net.minecraft.src.Item;
-import net.minecraft.src.EntityPlayerMP;
-import net.minecraft.src.ServerCommand;
-import java.util.Iterator;
-import net.minecraft.src.IUpdatePlayerListBox;
-import net.minecraft.src.Packet;
-import net.minecraft.src.Packet4UpdateTime;
-import net.minecraft.src.Vec3D;
-import net.minecraft.src.AxisAlignedBB;
-import net.minecraft.src.IProgressUpdate;
-import net.minecraft.src.IWorldAccess;
-import net.minecraft.src.WorldManager;
+import com.avaje.ebean.config.ServerConfig;
+import net.minecraft.src.*;
+import org.bukkit.World;
+import org.bukkit.*;
+import org.bukkit.command.*;
+import org.bukkit.entity.Player;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.help.HelpMap;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.InventoryHolder;
+import org.bukkit.inventory.ItemFactory;
+import org.bukkit.inventory.Recipe;
+import org.bukkit.map.MapView;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.PluginManager;
+import org.bukkit.plugin.ServicesManager;
+import org.bukkit.plugin.messaging.Messenger;
+import org.bukkit.scheduler.BukkitScheduler;
+import org.bukkit.scoreboard.ScoreboardManager;
+import org.bukkit.util.CachedServerIcon;
+import ru.vtm.lilybukkit.LilyBukkit;
+
+import java.awt.*;
+import java.awt.image.BufferedImage;
+import java.io.File;
 import java.io.IOException;
-import java.util.logging.Level;
 import java.net.InetAddress;
-import java.io.File;
-import net.minecraft.src.ConsoleLogManager;
-import net.minecraft.src.ThreadCommandReader;
-import net.minecraft.src.ThreadSleepForeverServer;
-import java.util.Collections;
-import java.util.ArrayList;
-import net.minecraft.src.EntityTracker;
 import java.util.List;
-import net.minecraft.src.ServerConfigurationManager;
-import net.minecraft.src.WorldServer;
-import net.minecraft.src.PropertyManager;
-import net.minecraft.src.NetworkListenThread;
-import java.util.HashMap;
+import java.util.*;
+import java.util.logging.Level;
 import java.util.logging.Logger;
-import net.minecraft.src.ICommandListener;
 
-public class MinecraftServer implements ICommandListener, Runnable {
+public class MinecraftServer implements ICommandListener, Runnable, Server, CommandExecutor {
     public static Logger logger;
-    public static HashMap playerList;
+    public static HashMap<String, Object> playerList;
     public NetworkListenThread networkServer;
     public PropertyManager propertyManagerObj;
@@ -53,19 +49,21 @@
     public EntityTracker entityTracker;
     public boolean onlineMode;
-    
+
     static {
         MinecraftServer.logger = Logger.getLogger("Minecraft");
         MinecraftServer.playerList = new HashMap();
     }
-    
+
     public MinecraftServer() {
         this.serverRunning = true;
         this.serverStopped = false;
         this.deathTime = 0;
-        this.playersOnline = (List)new ArrayList();
-        this.commands = Collections.synchronizedList((List)new ArrayList());
+        this.playersOnline = (List) new ArrayList();
+        this.commands = Collections.synchronizedList((List) new ArrayList());
         new ThreadSleepForeverServer(this);
+        //
+        initLilyBukkit();
     }
-    
+
     private boolean startServer() throws IOException {
         final ThreadCommandReader threadCommandReader1 = new ThreadCommandReader(this);
@@ -73,5 +71,5 @@
         threadCommandReader1.start();
         ConsoleLogManager.init();
-        MinecraftServer.logger.info("Starting minecraft server version 0.2.1");
+        MinecraftServer.logger.info("Starting minecraft server" + this.getServerName() + "with core " + this.getServerId());
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
             MinecraftServer.logger.warning("**** NOT ENOUGH RAM!");
@@ -81,5 +79,5 @@
         this.propertyManagerObj = new PropertyManager(new File("server.properties"));
         final String string2 = this.propertyManagerObj.getStringProperty("server-ip", "");
-        this.onlineMode = this.propertyManagerObj.getBooleanProperty("online-mode", true);
+        this.onlineMode = false;
         InetAddress inetAddress3 = null;
         if (string2.length() > 0) {
@@ -90,6 +88,5 @@
         try {
             this.networkServer = new NetworkListenThread(this, inetAddress3, i4);
-        }
-        catch (IOException iOException6) {
+        } catch (IOException iOException6) {
             MinecraftServer.logger.warning("**** FAILED TO BIND TO PORT!");
             MinecraftServer.logger.log(Level.WARNING, new StringBuilder("The exception was: ").append(iOException6.toString()).toString());
@@ -97,10 +94,4 @@
             return false;
         }
-        if (!this.onlineMode) {
-            MinecraftServer.logger.warning("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
-            MinecraftServer.logger.warning("The server will make no attempt to authenticate usernames. Beware.");
-            MinecraftServer.logger.warning("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
-            MinecraftServer.logger.warning("To change this, set \"online-mode\" to \"true\" in the server.settings file.");
-        }
         this.configManager = new ServerConfigurationManager(this);
         this.entityTracker = new EntityTracker(this);
@@ -111,5 +102,5 @@
         return true;
     }
-    
+
     private void initWorld(final String worldName) {
         MinecraftServer.logger.info("Preparing start region");
@@ -129,5 +120,5 @@
         this.clearCurrentTask();
     }
-    
+
     private void outputPercentRemaining(final String currentTask, final int percent) {
         this.currentTask = currentTask;
@@ -135,15 +126,15 @@
         System.out.println(String.valueOf(currentTask) + ": " + percent + "%");
     }
-    
+
     private void clearCurrentTask() {
         this.currentTask = null;
         this.percentDone = 0;
     }
-    
+
     private void save() {
         MinecraftServer.logger.info("Saving chunks");
         this.worldMngr.saveWorld(true, null);
     }
-    
+
     private void stop() {
         MinecraftServer.logger.info("Stopping server");
@@ -155,9 +146,9 @@
         }
     }
-    
+
     public void stopRunning() {
         this.serverRunning = false;
     }
-    
+
     public void run() {
         try {
@@ -184,32 +175,27 @@
                     Thread.sleep(1L);
                 }
-            }
-            else {
+            } else {
                 while (this.serverRunning) {
                     this.commandLineParser();
                     try {
                         Thread.sleep(10L);
-                    }
-                    catch (InterruptedException interruptedException15) {
+                    } catch (InterruptedException interruptedException15) {
                         interruptedException15.printStackTrace();
                     }
                 }
             }
-        }
-        catch (Exception exception16) {
+        } catch (Exception exception16) {
             exception16.printStackTrace();
-            MinecraftServer.logger.log(Level.SEVERE, "Unexpected exception", (Throwable)exception16);
+            MinecraftServer.logger.log(Level.SEVERE, "Unexpected exception", (Throwable) exception16);
             while (this.serverRunning) {
                 this.commandLineParser();
                 try {
                     Thread.sleep(10L);
-                }
-                catch (InterruptedException interruptedException16) {
+                } catch (InterruptedException interruptedException16) {
                     interruptedException16.printStackTrace();
                 }
             }
             return;
-        }
-        finally {
+        } finally {
             this.stop();
             this.serverStopped = true;
@@ -220,13 +206,12 @@
         System.exit(0);
     }
-    
+
     private void doTick() throws IOException {
         final ArrayList arrayList1 = new ArrayList();
         for (final String string3 : MinecraftServer.playerList.keySet()) {
-            final int i4 = (int)MinecraftServer.playerList.get(string3);
+            final int i4 = (int) MinecraftServer.playerList.get(string3);
             if (i4 > 0) {
                 MinecraftServer.playerList.put(string3, (i4 - 1));
-            }
-            else {
+            } else {
                 arrayList1.add(string3);
             }
@@ -242,5 +227,6 @@
         }
         this.worldMngr.tick();
-        while (this.worldMngr.updatingLighting()) {}
+        while (this.worldMngr.updatingLighting()) {
+        }
         this.worldMngr.updateEntities();
         this.networkServer.handleNetworkListenThread();
@@ -248,21 +234,39 @@
         this.entityTracker.updateTrackedEntities();
         for (int i5 = 0; i5 < this.playersOnline.size(); ++i5) {
-            ((IUpdatePlayerListBox)this.playersOnline.get(i5)).addAllPlayers();
+            ((IUpdatePlayerListBox) this.playersOnline.get(i5)).addAllPlayers();
         }
         try {
             this.commandLineParser();
+        } catch (Exception exception5) {
+            MinecraftServer.logger.log(Level.WARNING, "Unexpected exception while parsing console command", (Throwable) exception5);
         }
-        catch (Exception exception5) {
-            MinecraftServer.logger.log(Level.WARNING, "Unexpected exception while parsing console command", (Throwable)exception5);
-        }
     }
-    
+
     public void addCommand(final String command, final ICommandListener commandListener) {
-        this.commands.add(new ServerCommand(command, commandListener));
+        //TODO
+        //this.commands.add(new ServerCommand(command, commandListener));
     }
-    
+
     public void commandLineParser() {
-        while (this.commands.size() > 0) {
-            final ServerCommand serverCommand1 = (ServerCommand)this.commands.remove(0);
+        //TODO: rewrite the whole method to use custom command handling
+        /* Also:
+        ———————————No switches?———————————
+        ⠀⣞⢽⢪⢣⢣⢣⢫⡺⡵⣝⡮⣗⢷⢽⢽⢽⣮⡷⡽⣜⣜⢮⢺⣜⢷⢽⢝⡽⣝
+        ⠸⡸⠜⠕⠕⠁⢁⢇⢏⢽⢺⣪⡳⡝⣎⣏⢯⢞⡿⣟⣷⣳⢯⡷⣽⢽⢯⣳⣫⠇
+        ⠀⠀⢀⢀⢄⢬⢪⡪⡎⣆⡈⠚⠜⠕⠇⠗⠝⢕⢯⢫⣞⣯⣿⣻⡽⣏⢗⣗⠏⠀
+        ⠀⠪⡪⡪⣪⢪⢺⢸⢢⢓⢆⢤⢀⠀⠀⠀⠀⠈⢊⢞⡾⣿⡯⣏⢮⠷⠁⠀⠀
+        ⠀⠀⠀⠈⠊⠆⡃⠕⢕⢇⢇⢇⢇⢇⢏⢎⢎⢆⢄⠀⢑⣽⣿⢝⠲⠉⠀⠀⠀⠀
+        ⠀⠀⠀⠀⠀⡿⠂⠠⠀⡇⢇⠕⢈⣀⠀⠁⠡⠣⡣⡫⣂⣿⠯⢪⠰⠂⠀⠀⠀⠀
+        ⠀⠀⠀⠀⡦⡙⡂⢀⢤⢣⠣⡈⣾⡃⠠⠄⠀⡄⢱⣌⣶⢏⢊⠂⠀⠀⠀⠀⠀⠀
+        ⠀⠀⠀⠀⢝⡲⣜⡮⡏⢎⢌⢂⠙⠢⠐⢀⢘⢵⣽⣿⡿⠁⠁⠀⠀⠀⠀⠀⠀⠀
+        ⠀⠀⠀⠀⠨⣺⡺⡕⡕⡱⡑⡆⡕⡅⡕⡜⡼⢽⡻⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
+        ⠀⠀⠀⠀⣼⣳⣫⣾⣵⣗⡵⡱⡡⢣⢑⢕⢜⢕⡝⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
+        ⠀⠀⠀⣴⣿⣾⣿⣿⣿⡿⡽⡑⢌⠪⡢⡣⣣⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
+        ⠀⠀⠀⡟⡾⣿⢿⢿⢵⣽⣾⣼⣘⢸⢸⣞⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
+        ⠀⠀⠀⠀⠁⠇⠡⠩⡫⢿⣝⡻⡮⣒⢽⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
+        —————————————————————————————
+         */
+        /*while (this.commands.size() > 0) {
+            final ServerCommand serverCommand1 = (ServerCommand) this.commands.remove(0);
             String string2 = serverCommand1.command;
             final ICommandListener iCommandListener3 = serverCommand1.commandListener;
@@ -271,45 +275,36 @@
                 if (string2.toLowerCase().startsWith("list")) {
                     iCommandListener3.addHelpCommandMessage(new StringBuilder("Connected players: ").append(this.configManager.getPlayerList()).toString());
-                }
-                else if (string2.toLowerCase().startsWith("stop")) {
+                } else if (string2.toLowerCase().startsWith("stop")) {
                     this.print(string3, "Stopping the server..");
                     this.serverRunning = false;
-                }
-                else if (string2.toLowerCase().startsWith("save-all")) {
+                } else if (string2.toLowerCase().startsWith("save-all")) {
                     this.print(string3, "Forcing save..");
                     this.worldMngr.saveWorld(true, null);
                     this.print(string3, "Save complete.");
-                }
-                else if (string2.toLowerCase().startsWith("save-off")) {
+                } else if (string2.toLowerCase().startsWith("save-off")) {
                     this.print(string3, "Disabling level saving..");
                     this.worldMngr.levelSaving = true;
-                }
-                else if (string2.toLowerCase().startsWith("save-on")) {
+                } else if (string2.toLowerCase().startsWith("save-on")) {
                     this.print(string3, "Enabling level saving..");
                     this.worldMngr.levelSaving = false;
-                }
-                else if (string2.toLowerCase().startsWith("op ")) {
+                } else if (string2.toLowerCase().startsWith("op ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.opPlayer(string4);
                     this.print(string3, new StringBuilder("Opping ").append(string4).toString());
                     this.configManager.sendChatMessageToPlayer(string4, "§eYou are now op!");
-                }
-                else if (string2.toLowerCase().startsWith("deop ")) {
+                } else if (string2.toLowerCase().startsWith("deop ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.deopPlayer(string4);
                     this.configManager.sendChatMessageToPlayer(string4, "§eYou are no longer op!");
                     this.print(string3, new StringBuilder("De-opping ").append(string4).toString());
-                }
-                else if (string2.toLowerCase().startsWith("ban-ip ")) {
+                } else if (string2.toLowerCase().startsWith("ban-ip ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.banIP(string4);
                     this.print(string3, new StringBuilder("Banning ip ").append(string4).toString());
-                }
-                else if (string2.toLowerCase().startsWith("pardon-ip ")) {
+                } else if (string2.toLowerCase().startsWith("pardon-ip ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.pardonIP(string4);
                     this.print(string3, new StringBuilder("Pardoning ip ").append(string4).toString());
-                }
-                else if (string2.toLowerCase().startsWith("ban ")) {
+                } else if (string2.toLowerCase().startsWith("ban ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.banPlayer(string4);
@@ -320,15 +315,13 @@
                     }
                     entityPlayerMP12.playerNetServerHandler.kickPlayer("Banned by admin");
-                }
-                else if (string2.toLowerCase().startsWith("pardon ")) {
+                } else if (string2.toLowerCase().startsWith("pardon ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.pardonPlayer(string4);
                     this.print(string3, new StringBuilder("Pardoning ").append(string4).toString());
-                }
-                else if (string2.toLowerCase().startsWith("kick ")) {
+                } else if (string2.toLowerCase().startsWith("kick ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     EntityPlayerMP entityPlayerMP12 = null;
                     for (int i13 = 0; i13 < this.configManager.playerEntities.size(); ++i13) {
-                        final EntityPlayerMP entityPlayerMP13 = (EntityPlayerMP)this.configManager.playerEntities.get(i13);
+                        final EntityPlayerMP entityPlayerMP13 = (EntityPlayerMP) this.configManager.playerEntities.get(i13);
                         if (entityPlayerMP13.username.equalsIgnoreCase(string4)) {
                             entityPlayerMP12 = entityPlayerMP13;
@@ -338,10 +331,8 @@
                         entityPlayerMP12.playerNetServerHandler.kickPlayer("Kicked by admin");
                         this.print(string3, new StringBuilder("Kicking ").append(entityPlayerMP12.username).toString());
-                    }
-                    else {
+                    } else {
                         iCommandListener3.addHelpCommandMessage(new StringBuilder("Can't find user ").append(string4).append(". No kick.").toString());
                     }
-                }
-                else if (string2.toLowerCase().startsWith("tp ")) {
+                } else if (string2.toLowerCase().startsWith("tp ")) {
                     final String[] string5 = string2.split(" ");
                     if (string5.length == 3) {
@@ -350,18 +341,14 @@
                         if (entityPlayerMP12 == null) {
                             iCommandListener3.addHelpCommandMessage(new StringBuilder("Can't find user ").append(string5[1]).append(". No tp.").toString());
-                        }
-                        else if (entityPlayerMP14 == null) {
+                        } else if (entityPlayerMP14 == null) {
                             iCommandListener3.addHelpCommandMessage(new StringBuilder("Can't find user ").append(string5[2]).append(". No tp.").toString());
-                        }
-                        else {
+                        } else {
                             entityPlayerMP12.playerNetServerHandler.teleportTo(entityPlayerMP14.posX, entityPlayerMP14.posY, entityPlayerMP14.posZ, entityPlayerMP14.rotationYaw, entityPlayerMP14.rotationPitch);
                             this.print(string3, new StringBuilder("Teleporting ").append(string5[1]).append(" to ").append(string5[2]).append(".").toString());
                         }
+                    } else {
+                        iCommandListener3.addHelpCommandMessage("Syntax error, please provide a source and a target.");
                     }
-                    else {
-                        iCommandListener3.addHelpCommandMessage("Syntax error, please provice a source and a target.");
-                    }
-                }
-                else if (string2.toLowerCase().startsWith("give ")) {
+                } else if (string2.toLowerCase().startsWith("give ")) {
                     final String[] string5 = string2.split(" ");
                     if (string5.length != 3 && string5.length != 4) {
@@ -386,23 +373,18 @@
                                 }
                                 entityPlayerMP14.dropPlayerItem(new ItemStack(i14, i15));
-                            }
-                            else {
+                            } else {
                                 iCommandListener3.addHelpCommandMessage(new StringBuilder("There's no item with id ").append(i14).toString());
                             }
-                        }
-                        catch (NumberFormatException numberFormatException10) {
+                        } catch (NumberFormatException numberFormatException10) {
                             iCommandListener3.addHelpCommandMessage(new StringBuilder("There's no item with id ").append(string5[2]).toString());
                         }
-                    }
-                    else {
+                    } else {
                         iCommandListener3.addHelpCommandMessage(new StringBuilder("Can't find user ").append(string6).toString());
                     }
-                }
-                else if (string2.toLowerCase().startsWith("say ")) {
+                } else if (string2.toLowerCase().startsWith("say ")) {
                     string2 = string2.substring(string2.indexOf(" ")).trim();
                     MinecraftServer.logger.info(new StringBuilder("[").append(string3).append("] ").append(string2).toString());
                     this.configManager.sendPacketToAllPlayers(new Packet3Chat(new StringBuilder("§d[Server] ").append(string2).toString()));
-                }
-                else if (string2.toLowerCase().startsWith("tell ")) {
+                } else if (string2.toLowerCase().startsWith("tell ")) {
                     final String[] string5 = string2.split(" ");
                     if (string5.length < 3) {
@@ -419,10 +401,73 @@
                     }
                     iCommandListener3.addHelpCommandMessage("There's no player by that name online.");
-                }
-                else {
+                } else if (string2.toLowerCase().startsWith("whitelist")) {
+                    final String[] args = string2.substring(Math.min("whitelist".length() + 1, string2.length() - 1)).split(" ");
+                    if (args.length == 0) {
+                        iCommandListener3.addHelpCommandMessage("Whitelist subcommands:");
+                        iCommandListener3.addHelpCommandMessage("   enable              enable whitelist");
+                        iCommandListener3.addHelpCommandMessage("   disable             disable whitelist");
+                        iCommandListener3.addHelpCommandMessage("   add <player>        add player to whitelist");
+                        iCommandListener3.addHelpCommandMessage("   remove <player>     remove player from whitelist");
+                        iCommandListener3.addHelpCommandMessage("   add-ip <ip>         add IP to whitelist");
+                        iCommandListener3.addHelpCommandMessage("   remove-ip <ip>      remove IP from whitelist");
+                    } else if (args[0].equalsIgnoreCase("enable")) {
+                        this.configManager.enableWhitelist();
+                        this.print(string3, "Whitelist enabled");
+                    } else if (args[0].equalsIgnoreCase("disable")) {
+                        this.configManager.disableWhitelist();
+                        this.print(string3, "Whitelist disabled");
+                    } else if (args[0].equalsIgnoreCase("add") && args.length > 1) {
+                        StringBuilder username = new StringBuilder();
+                        for (int i = 1; i < args.length; i++) {
+                            if (i != 1) username.append(" ");
+                            username.append(args[i]);
+                        }
+                        this.print(string3, "Added player \"" + username.toString()
+                                .replaceAll("\\\\", "\\\\")
+                                .replaceAll("\\\\\"", "\\\"") + "\" to whitelist");
+                        this.configManager.whitelistPlayer(username.toString().toLowerCase());
+                    } else if (args[0].equalsIgnoreCase("remove") && args.length > 1) {
+                        StringBuilder username = new StringBuilder();
+                        for (int i = 1; i < args.length; i++) {
+                            if (i != 1) username.append(" ");
+                            username.append(args[i]);
+                        }
+                        this.print(string3, "Remove player \"" + username.toString()
+                                .replaceAll("\\\\", "\\\\")
+                                .replaceAll("\\\\\"", "\\\"") + "\" from whitelist");
+                        this.configManager.unwhitelistPlayer(username.toString().toLowerCase());
+                    } else if (args[0].equalsIgnoreCase("add-ip") && args.length > 1) {
+                        StringBuilder username = new StringBuilder();
+                        for (int i = 1; i < args.length; i++) {
+                            if (i != 1) username.append(" ");
+                            username.append(args[i]);
+                        }
+                        this.print(string3, "Added IP \"" + username.toString()
+                                .replaceAll("\\\\", "\\\\")
+                                .replaceAll("\\\\\"", "\\\"") + "\" to whitelist");
+                        this.configManager.whitelistIP(username.toString().toLowerCase());
+                    } else if (args[0].equalsIgnoreCase("remove-ip") && args.length > 1) {
+                        StringBuilder username = new StringBuilder();
+                        for (int i = 1; i < args.length; i++) {
+                            if (i != 1) username.append(" ");
+                            username.append(args[i]);
+                        }
+                        this.print(string3, "Remove IP \"" + username.toString()
+                                .replaceAll("\\\\", "\\\\")
+                                .replaceAll("\\\\\"", "\\\"") + "\" from whitelist");
+                        this.configManager.unwhitelistIP(username.toString().toLowerCase());
+                    } else {
+                        iCommandListener3.addHelpCommandMessage("Whitelist subcommands:");
+                        iCommandListener3.addHelpCommandMessage("   enable              enable whitelist");
+                        iCommandListener3.addHelpCommandMessage("   disable             disable whitelist");
+                        iCommandListener3.addHelpCommandMessage("   add <player>        add player to whitelist");
+                        iCommandListener3.addHelpCommandMessage("   remove <player>     remove player from whitelist");
+                        iCommandListener3.addHelpCommandMessage("   add-ip <player>     add IP to whitelist");
+                        iCommandListener3.addHelpCommandMessage("   remove-ip <player>  remove IP from whitelist");
+                    }
+                } else {
                     MinecraftServer.logger.info("Unknown console command. Type \"help\" for help.");
                 }
-            }
-            else {
+            } else {
                 iCommandListener3.addHelpCommandMessage("To run the server without a gui, start it like this:");
                 iCommandListener3.addHelpCommandMessage("   java -Xmx1024M -Xms1024M -jar minecraft_server.jar nogui");
@@ -445,8 +490,9 @@
                 iCommandListener3.addHelpCommandMessage("   list                      lists all currently connected players");
                 iCommandListener3.addHelpCommandMessage("   say <message>             broadcasts a message to all players");
+                iCommandListener3.addHelpCommandMessage("   whitelist                 manage server whitelist");
             }
-        }
+        }*/
     }
-    
+
     private void print(final String string1, final String string2) {
         final String string3 = String.valueOf(string1) + ": " + string2;
@@ -454,18 +500,17 @@
         MinecraftServer.logger.info(string3);
     }
-    
+
     private int parseInt(final String string, final int defaultValue) {
         try {
             return Integer.parseInt(string);
-        }
-        catch (NumberFormatException numberFormatException4) {
+        } catch (NumberFormatException numberFormatException4) {
             return defaultValue;
         }
     }
-    
+
     public void addToOnlinePlayerList(final IUpdatePlayerListBox playerListBox) {
         this.playersOnline.add(playerListBox);
     }
-    
+
     public static void main(final String[] args) {
         try {
@@ -475,24 +520,564 @@
             }
             new ThreadServerApplication("Server thread", minecraftServer1).start();
+        } catch (Exception exception2) {
+            MinecraftServer.logger.log(Level.SEVERE, "Failed to start the minecraft server", (Throwable) exception2);
         }
-        catch (Exception exception2) {
-            MinecraftServer.logger.log(Level.SEVERE, "Failed to start the minecraft server", (Throwable)exception2);
-        }
     }
-    
+
     public File getFile(final String fileName) {
         return new File(fileName);
     }
-    
+
     public void addHelpCommandMessage(final String helpCommandMessage) {
         MinecraftServer.logger.info(helpCommandMessage);
     }
-    
+
     public String getUsername() {
         return "CONSOLE";
     }
-    
+
     public static boolean isServerRunning(final MinecraftServer mcServer) {
         return mcServer.serverRunning;
     }
+
+    // ####################### \\
+    // # L I L Y B U K K I T # \\
+    // ####################### \\
+
+    private List<Player> BUKKIT_onlinePlayerList;
+
+    private void initLilyBukkit() {
+        this.BUKKIT_onlinePlayerList = new ArrayList<>(this.playersOnline.size());
+        for (int i = 0; i < this.playersOnline.size(); i++) {
+            this.BUKKIT_onlinePlayerList.add(this.getPlayer(this.playersOnline.get(i).toString()));
+        }
+    }
+
+    @Override
+    public String getName() {
+        return "LilyBukkit";
+    }
+
+    @Override
+    public String getVersion() {
+        return "1.0.0 build 5";
+    }
+
+    @Override
+    public String getBukkitVersion() {
+        return "1.7.10-R0.1-SNAPSHOT";
+    }
+
+    /**
+     * @deprecated
+     */
+    @Override
+    public Player[] _INVALID_getOnlinePlayers() {
+        return (Player[]) this.configManager.playerEntities.toArray();
+    }
+
+    @Override
+    public Collection<? extends Player> getOnlinePlayers() {
+        return this.configManager.playerEntities;
+    }
+
+    @Override
+    public int getMaxPlayers() {
+        return this.propertyManagerObj.getIntProperty(LilyBukkit.ServerProperties.MAX_PLAYERS, 20);
+    }
+
+    @Override
+    public int getPort() {
+        return this.propertyManagerObj.getIntProperty(LilyBukkit.ServerProperties.SERVER_PORT, 25565);
+    }
+
+    @Override
+    public int getViewDistance() {
+        return this.propertyManagerObj.getIntProperty(LilyBukkit.ServerProperties.VIEW_DISTANCE, 3);
+    }
+
+    @Override
+    public String getIp() {
+        return this.propertyManagerObj.getStringProperty(LilyBukkit.ServerProperties.SERVER_IP, "");
+    }
+
+    @Override
+    public String getServerName() {
+        return this.getName() + " " + this.getVersion();
+    }
+
+    @Override
+    public String getServerId() {
+        return this.getName() + " " + this.getVersion() + " (Running Bukkit " + this.getBukkitVersion();
+    }
+
+    @Override
+    public String getWorldType() {
+        return "default";
+    }
+
+    @Override
+    public boolean getGenerateStructures() {
+        return true;
+    }
+
+    @Override
+    public boolean getAllowEnd() {
+        return false;
+    }
+
+    @Override
+    public boolean getAllowNether() {
+        return false;
+    }
+
+    @Override
+    public boolean hasWhitelist() {
+        return this.propertyManagerObj.getBooleanProperty(LilyBukkit.ServerProperties.WHITELIST_ENABLED, false);
+    }
+
+    @Override
+    public void setWhitelist(boolean b) {
+        if (this.propertyManagerObj.getBooleanProperty(LilyBukkit.ServerProperties.WHITELIST_ENABLED, b) != b) {
+            this.propertyManagerObj.generateAndSaveProperties();
+        }
+    }
+
+    @Override
+    public Set<OfflinePlayer> getWhitelistedPlayers() {
+        return null;
+    }
+
+    @Override
+    public void reloadWhitelist() {
+
+    }
+
+    @Override
+    public int broadcastMessage(String s) {
+        return 0;
+    }
+
+    @Override
+    public String getUpdateFolder() {
+        return null;
+    }
+
+    @Override
+    public File getUpdateFolderFile() {
+        return null;
+    }
+
+    @Override
+    public long getConnectionThrottle() {
+        return 0;
+    }
+
+    @Override
+    public int getTicksPerAnimalSpawns() {
+        return 0;
+    }
+
+    @Override
+    public int getTicksPerMonsterSpawns() {
+        return 0;
+    }
+
+    /**
+     * @param s
+     * @deprecated
+     */
+    @Override
+    public Player getPlayer(String s) {
+        return this.configManager.getPlayerEntity(s);
+    }
+
+    /**
+     * @param s
+     * @deprecated
+     */
+    @Override
+    public Player getPlayerExact(String s) {
+        return null;
+    }
+
+    /**
+     * @param s
+     * @deprecated
+     */
+    @Override
+    public List<Player> matchPlayer(String s) {
+        return null;
+    }
+
+    @Override
+    public Player getPlayer(UUID uuid) {
+        return null;
+    }
+
+    @Override
+    public PluginManager getPluginManager() {
+        return null;
+    }
+
+    @Override
+    public BukkitScheduler getScheduler() {
+        return null;
+    }
+
+    @Override
+    public ServicesManager getServicesManager() {
+        return null;
+    }
+
+    @Override
+    public List<World> getWorlds() {
+        return null;
+    }
+
+    @Override
+    public World createWorld(WorldCreator worldCreator) {
+        return null;
+    }
+
+    @Override
+    public boolean unloadWorld(String s, boolean b) {
+        return false;
+    }
+
+    @Override
+    public boolean unloadWorld(World world, boolean b) {
+        return false;
+    }
+
+    @Override
+    public World getWorld(String s) {
+        return null;
+    }
+
+    @Override
+    public World getWorld(UUID uuid) {
+        return null;
+    }
+
+    /**
+     * @param i
+     * @deprecated
+     */
+    @Override
+    public MapView getMap(short i) {
+        return null;
+    }
+
+    @Override
+    public MapView createMap(World world) {
+        return null;
+    }
+
+    @Override
+    public void reload() {
+
+    }
+
+    @Override
+    public Logger getLogger() {
+        return null;
+    }
+
+    @Override
+    public PluginCommand getPluginCommand(String s) {
+        return null;
+    }
+
+    @Override
+    public void savePlayers() {
+
+    }
+
+    @Override
+    public boolean dispatchCommand(CommandSender commandSender, String s) throws CommandException {
+        return false;
+    }
+
+    @Override
+    public void configureDbConfig(ServerConfig serverConfig) {
+
+    }
+
+    @Override
+    public boolean addRecipe(Recipe recipe) {
+        return false;
+    }
+
+    @Override
+    public List<Recipe> getRecipesFor(org.bukkit.inventory.ItemStack itemStack) {
+        return null;
+    }
+
+    @Override
+    public Iterator<Recipe> recipeIterator() {
+        return null;
+    }
+
+    @Override
+    public void clearRecipes() {
+
+    }
+
+    @Override
+    public void resetRecipes() {
+
+    }
+
+    @Override
+    public Map<String, String[]> getCommandAliases() {
+        return null;
+    }
+
+    @Override
+    public int getSpawnRadius() {
+        return 0;
+    }
+
+    @Override
+    public void setSpawnRadius(int i) {
+
+    }
+
+    @Override
+    public boolean getOnlineMode() {
+        return false;
+    }
+
+    @Override
+    public boolean getAllowFlight() {
+        return false;
+    }
+
+    @Override
+    public boolean isHardcore() {
+        return this.worldMngr.exclFrailMode;
+    }
+
+    @Override
+    public boolean useExactLoginLocation() {
+        return false;
+    }
+
+    @Override
+    public void shutdown() {
+
+    }
+
+    @Override
+    public int broadcast(String s, String s1) {
+        return 0;
+    }
+
+    /**
+     * @param s
+     * @deprecated
+     */
+    @Override
+    public OfflinePlayer getOfflinePlayer(String s) {
+        return null;
+    }
+
+    @Override
+    public OfflinePlayer getOfflinePlayer(UUID uuid) {
+        return null;
+    }
+
+    @Override
+    public Set<String> getIPBans() {
+        return null;
+    }
+
+    @Override
+    public void banIP(String s) {
+
+    }
+
+    @Override
+    public void unbanIP(String s) {
+
+    }
+
+    @Override
+    public Set<OfflinePlayer> getBannedPlayers() {
+        return null;
+    }
+
+    @Override
+    public BanList getBanList(BanList.Type type) {
+        return null;
+    }
+
+    @Override
+    public Set<OfflinePlayer> getOperators() {
+        return null;
+    }
+
+    @Override
+    public GameMode getDefaultGameMode() {
+        return GameMode.SURVIVAL;
+    }
+
+    @Override
+    public void setDefaultGameMode(GameMode gameMode) {
+
+    }
+
+    @Override
+    public ConsoleCommandSender getConsoleSender() {
+        return null;
+    }
+
+    @Override
+    public File getWorldContainer() {
+        return null;
+    }
+
+    @Override
+    public OfflinePlayer[] getOfflinePlayers() {
+        return new OfflinePlayer[0];
+    }
+
+    @Override
+    public Messenger getMessenger() {
+        return null;
+    }
+
+    @Override
+    public HelpMap getHelpMap() {
+        return null;
+    }
+
+    @Override
+    public Inventory createInventory(InventoryHolder inventoryHolder, InventoryType inventoryType) {
+        return null;
+    }
+
+    @Override
+    public Inventory createInventory(InventoryHolder inventoryHolder, InventoryType inventoryType, String s) {
+        return null;
+    }
+
+    @Override
+    public Inventory createInventory(InventoryHolder inventoryHolder, int i) throws IllegalArgumentException {
+        return null;
+    }
+
+    @Override
+    public Inventory createInventory(InventoryHolder inventoryHolder, int i, String s) throws IllegalArgumentException {
+        return null;
+    }
+
+    @Override
+    public int getMonsterSpawnLimit() {
+        return 0;
+    }
+
+    @Override
+    public int getAnimalSpawnLimit() {
+        return 0;
+    }
+
+    @Override
+    public int getWaterAnimalSpawnLimit() {
+        return 0;
+    }
+
+    @Override
+    public int getAmbientSpawnLimit() {
+        return 0;
+    }
+
+    @Override
+    public boolean isPrimaryThread() {
+        //TODO: Understand wtf is this
+        return false;
+    }
+
+    @Override
+    public String getMotd() {
+        return this.propertyManagerObj.getStringProperty(LilyBukkit.ServerProperties.MOTD, "A LilyBukkit server");
+    }
+
+    @Override
+    public String getShutdownMessage() {
+        return null;
+    }
+
+    @Override
+    public Warning.WarningState getWarningState() {
+        return null;
+    }
+
+    @Override
+    public ItemFactory getItemFactory() {
+        return null;
+    }
+
+    @Override
+    public ScoreboardManager getScoreboardManager() {
+        return null;
+    }
+
+    @Override
+    public CachedServerIcon getServerIcon() {
+        return null;
+    }
+
+    @Override
+    public CachedServerIcon loadServerIcon(File file) throws IllegalArgumentException, Exception {
+        return null;
+    }
+
+    @Override
+    public CachedServerIcon loadServerIcon(BufferedImage bufferedImage) throws IllegalArgumentException, Exception {
+        return null;
+    }
+
+    @Override
+    public void setIdleTimeout(int i) {
+
+    }
+
+    @Override
+    public int getIdleTimeout() {
+        return 0;
+    }
+
+    /**
+     * @deprecated
+     */
+    @Override
+    public UnsafeValues getUnsafe() {
+        return null;
+    }
+
+    @Override
+    public void sendPluginMessage(Plugin plugin, String s, byte[] bytes) {
+
+    }
+
+    @Override
+    public Set<String> getListeningPluginChannels() {
+        return null;
+    }
+
+    /**
+     * Executes the given command, returning its success
+     *
+     * @param sender  Source of the command
+     * @param command Command which was executed
+     * @param label   Alias of the command which was used
+     * @param args    Passed command arguments
+     * @return true if a valid command, otherwise false
+     */
+    @Override
+    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+        return false;
+    }
 }
