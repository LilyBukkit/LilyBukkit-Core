--- MinecraftServer.java
+++ MinecraftServer.java
@@ -1,44 +1,29 @@
 package net.minecraft.server;
 
-import net.minecraft.src.ThreadServerApplication;
-import net.minecraft.src.ServerGUI;
-import java.awt.GraphicsEnvironment;
-import net.minecraft.src.Packet3Chat;
-import net.minecraft.src.ItemStack;
-import net.minecraft.src.Item;
-import net.minecraft.src.EntityPlayerMP;
-import net.minecraft.src.ServerCommand;
-import java.util.Iterator;
-import net.minecraft.src.IUpdatePlayerListBox;
-import net.minecraft.src.Packet;
-import net.minecraft.src.Packet4UpdateTime;
-import net.minecraft.src.Vec3D;
-import net.minecraft.src.AxisAlignedBB;
-import net.minecraft.src.IProgressUpdate;
-import net.minecraft.src.IWorldAccess;
-import net.minecraft.src.WorldManager;
+import jline.ConsoleReader;
+import joptsimple.OptionParser;
+import joptsimple.OptionSet;
+import net.minecraft.src.*;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.LoggerOutputStream;
+import org.bukkit.craftbukkit.command.ColouredConsoleSender;
+import org.bukkit.craftbukkit.util.ServerShutdownThread;
+import org.bukkit.event.server.ServerCommandEvent;
+import ru.vladthemountain.lilybukkit.LilyBukkit;
+
+import java.awt.*;
+import java.io.File;
 import java.io.IOException;
-import java.util.logging.Level;
+import java.io.PrintStream;
 import java.net.InetAddress;
-import java.io.File;
-import net.minecraft.src.ConsoleLogManager;
-import net.minecraft.src.ThreadCommandReader;
-import net.minecraft.src.ThreadSleepForeverServer;
-import java.util.Collections;
-import java.util.ArrayList;
-import java.util.Random;
-import net.minecraft.src.EntityTracker;
+import java.text.SimpleDateFormat;
 import java.util.List;
-import net.minecraft.src.ServerConfigurationManager;
-import net.minecraft.src.WorldServer;
-import net.minecraft.src.PropertyManager;
-import net.minecraft.src.NetworkListenThread;
-import java.util.HashMap;
+import java.util.*;
+import java.util.logging.Level;
 import java.util.logging.Logger;
-import net.minecraft.src.ICommandListener;
 
 public class MinecraftServer implements ICommandListener, Runnable {
     public static Logger logger;
-    public static HashMap playerList;
+    public static HashMap<String, Integer> playerList;
     public NetworkListenThread networkServer;
     public PropertyManager propertyManagerObj;
@@ -50,6 +35,6 @@
     public String currentTask;
     public int percentDone;
-    private List playersOnline;
-    private List commands;
+    private List<IUpdatePlayerListBox> playersOnline;
+    private List<ServerCommand> commands;
     public EntityTracker entityTracker;
     public boolean onlineMode;
@@ -57,20 +42,50 @@
     public String serverId;
     private static Random rand;
-    
+
+    public static int[] getVersion() {
+        return new int[]{1, 1, 0, 5};
+    }
+
+    public static String getVersionTag() {
+        return "dev";
+    }
+
+    public static String getVersionString() {
+        int[] version = getVersion();
+        StringBuilder str = new StringBuilder();
+        for (int i = 0; i < version.length; i++) {
+            if (i != 0) str.append(".");
+            str.append(version[i]);
+        }
+        String tag = getVersionTag();
+        if (tag.length() > 0) str.append("-").append(tag);
+        return str.toString();
+    }
+
     static {
         MinecraftServer.logger = Logger.getLogger("Minecraft");
-        MinecraftServer.playerList = new HashMap();
+        MinecraftServer.playerList = new HashMap<>();
         MinecraftServer.rand = new Random(System.currentTimeMillis());
     }
-    
-    public MinecraftServer() {
+
+    public MinecraftServer(OptionSet options) {
         this.serverRunning = true;
         this.serverStopped = false;
         this.deathTime = 0;
-        this.playersOnline = (List)new ArrayList();
-        this.commands = Collections.synchronizedList((List)new ArrayList());
+        this.playersOnline = new ArrayList<>();
+        this.commands = Collections.synchronizedList(new ArrayList<>());
         new ThreadSleepForeverServer(this);
+
+        // CraftBukkit start
+        this.options = options;
+        try {
+            this.reader = new ConsoleReader();
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+        Runtime.getRuntime().addShutdownHook(new ServerShutdownThread(this));
+        // CraftBukkit end
     }
-    
+
     private boolean startServer() throws IOException {
         final ThreadCommandReader threadCommandReader1 = new ThreadCommandReader(this);
@@ -78,5 +93,11 @@
         threadCommandReader1.start();
         ConsoleLogManager.init();
-        MinecraftServer.logger.info("Starting minecraft server version 0.2.1");
+
+        // CraftBukkit start
+        System.setOut(new PrintStream(new LoggerOutputStream(logger, Level.INFO), true));
+        System.setErr(new PrintStream(new LoggerOutputStream(logger, Level.SEVERE), true));
+        // CraftBukkit end
+
+        MinecraftServer.logger.info("Starting minecraft server version " + getVersionString());
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
             MinecraftServer.logger.warning("**** NOT ENOUGH RAM!");
@@ -84,5 +105,5 @@
         }
         MinecraftServer.logger.info("Loading properties");
-        this.propertyManagerObj = new PropertyManager(new File("server.properties"));
+        this.propertyManagerObj = new PropertyManager(this.options); // CraftBukkit - CLI argument support
         final String string2 = this.propertyManagerObj.getStringProperty("server-ip", "");
         this.onlineMode = false;
@@ -93,12 +114,11 @@
         }
         final int i4 = this.propertyManagerObj.getIntProperty("server-port", 25565);
-        MinecraftServer.logger.info(new StringBuilder("Starting Minecraft server on ").append((string2.length() == 0) ? "*" : string2).append(":").append(i4).toString());
+        MinecraftServer.logger.info("Starting Minecraft server on " + ((string2.length() == 0) ? "*" : string2) + ":" + i4);
         this.serverId = Long.toHexString(MinecraftServer.rand.nextLong());
         try {
             this.networkServer = new NetworkListenThread(this, inetAddress3, i4);
-        }
-        catch (IOException iOException6) {
+        } catch (IOException iOException6) {
             MinecraftServer.logger.warning("**** FAILED TO BIND TO PORT!");
-            MinecraftServer.logger.log(Level.WARNING, new StringBuilder("The exception was: ").append(iOException6.toString()).toString());
+            MinecraftServer.logger.log(Level.WARNING, "The exception was: " + iOException6);
             MinecraftServer.logger.warning("Perhaps a server is already running on that port?");
             return false;
@@ -108,6 +128,5 @@
             MinecraftServer.logger.info("The server will authenticate usernames.");
             MinecraftServer.logger.info("Unauthenticated players may still join by default, and their abilities can be configured in the unauth.config file.");
-        }
-        else {
+        } else {
             MinecraftServer.logger.warning("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
             MinecraftServer.logger.warning("The server will make no attempt to authenticate usernames. Beware.");
@@ -118,10 +137,10 @@
         this.entityTracker = new EntityTracker(this);
         final String string3 = this.propertyManagerObj.getStringProperty("level-name", "world");
-        MinecraftServer.logger.info(new StringBuilder("Preparing level \"").append(string3).append("\"").toString());
+        MinecraftServer.logger.info("Preparing level \"" + string3 + "\"");
         this.initWorld(string3);
         MinecraftServer.logger.info("Done! For help, type \"help\" or \"?\"");
         return true;
     }
-    
+
     private void initWorld(final String worldName) {
         MinecraftServer.logger.info("Preparing start region");
@@ -141,21 +160,21 @@
         this.clearCurrentTask();
     }
-    
+
     private void outputPercentRemaining(final String currentTask, final int percent) {
         this.currentTask = currentTask;
         this.percentDone = percent;
-        System.out.println(String.valueOf(currentTask) + ": " + percent + "%");
+        System.out.println(currentTask + ": " + percent + "%");
     }
-    
+
     private void clearCurrentTask() {
         this.currentTask = null;
         this.percentDone = 0;
     }
-    
+
     private void save() {
         MinecraftServer.logger.info("Saving chunks");
         this.worldMngr.saveWorld(true, null);
     }
-    
+
     private void stop() {
         MinecraftServer.logger.info("Stopping server");
@@ -167,9 +186,9 @@
         }
     }
-    
+
     public void stopRunning() {
         this.serverRunning = false;
     }
-    
+
     public void run() {
         try {
@@ -196,32 +215,27 @@
                     Thread.sleep(1L);
                 }
-            }
-            else {
+            } else {
                 while (this.serverRunning) {
                     this.commandLineParser();
                     try {
                         Thread.sleep(10L);
-                    }
-                    catch (InterruptedException interruptedException15) {
+                    } catch (InterruptedException interruptedException15) {
                         interruptedException15.printStackTrace();
                     }
                 }
             }
-        }
-        catch (Exception exception16) {
+        } catch (Exception exception16) {
             exception16.printStackTrace();
-            MinecraftServer.logger.log(Level.SEVERE, "Unexpected exception", (Throwable)exception16);
+            MinecraftServer.logger.log(Level.SEVERE, "Unexpected exception", exception16);
             while (this.serverRunning) {
                 this.commandLineParser();
                 try {
                     Thread.sleep(10L);
-                }
-                catch (InterruptedException interruptedException16) {
+                } catch (InterruptedException interruptedException16) {
                     interruptedException16.printStackTrace();
                 }
             }
             return;
-        }
-        finally {
+        } finally {
             this.stop();
             this.serverStopped = true;
@@ -232,18 +246,17 @@
         System.exit(0);
     }
-    
+
     private void doTick() throws IOException {
-        final ArrayList arrayList1 = new ArrayList();
+        final ArrayList<String> arrayList1 = new ArrayList<>();
         for (final String string3 : MinecraftServer.playerList.keySet()) {
-            final int i4 = (int)MinecraftServer.playerList.get(string3);
+            final int i4 = MinecraftServer.playerList.get(string3);
             if (i4 > 0) {
                 MinecraftServer.playerList.put(string3, (i4 - 1));
-            }
-            else {
+            } else {
                 arrayList1.add(string3);
             }
         }
-        for (int i5 = 0; i5 < arrayList1.size(); ++i5) {
-            MinecraftServer.playerList.remove(arrayList1.get(i5));
+        for (Object o : arrayList1) {
+            MinecraftServer.playerList.remove(o);
         }
         AxisAlignedBB.clearBoundingBoxPool();
@@ -254,77 +267,77 @@
         }
         this.worldMngr.tick();
-        while (this.worldMngr.updatingLighting()) {}
+        while (this.worldMngr.updatingLighting()) {
+        }
         this.worldMngr.updateEntities();
         this.networkServer.handleNetworkListenThread();
         this.configManager.onTick();
         this.entityTracker.updateTrackedEntities();
-        for (int i5 = 0; i5 < this.playersOnline.size(); ++i5) {
-            ((IUpdatePlayerListBox)this.playersOnline.get(i5)).addAllPlayers();
+        for (IUpdatePlayerListBox iUpdatePlayerListBox : this.playersOnline) {
+            iUpdatePlayerListBox.addAllPlayers();
         }
         try {
             this.commandLineParser();
+        } catch (Exception exception5) {
+            MinecraftServer.logger.log(Level.WARNING, "Unexpected exception while parsing console command", exception5);
         }
-        catch (Exception exception5) {
-            MinecraftServer.logger.log(Level.WARNING, "Unexpected exception while parsing console command", (Throwable)exception5);
-        }
     }
-    
+
     public void addCommand(final String command, final ICommandListener commandListener) {
         this.commands.add(new ServerCommand(command, commandListener));
     }
-    
+
     public void commandLineParser() {
         while (this.commands.size() > 0) {
-            final ServerCommand serverCommand1 = (ServerCommand)this.commands.remove(0);
-            String string2 = serverCommand1.command;
+            ServerCommand serverCommand1 = this.commands.remove(0);
+
+            // CraftBukkit start - ServerCommand for preprocessing
+            ServerCommandEvent event = new ServerCommandEvent(this.console, serverCommand1.command);
+            Bukkit.getServer().getPluginManager().callEvent(event);
+            serverCommand1 = new ServerCommand(event.getCommand(), serverCommand1.commandListener);
+            // CraftBukkit end
+
+            // this.consoleCommandHandler.handle(servercommand); // CraftBukkit - Removed its now called in server.dispatchCommand
+            Bukkit.getServer().dispatchCommand(this.console, serverCommand1.command); // CraftBukkit
+            /*String string2 = serverCommand1.command;
             final ICommandListener iCommandListener3 = serverCommand1.commandListener;
             final String string3 = iCommandListener3.getUsername();
             if (!string2.toLowerCase().startsWith("help") && !string2.toLowerCase().startsWith("?")) {
                 if (string2.toLowerCase().startsWith("list")) {
-                    iCommandListener3.addHelpCommandMessage(new StringBuilder("Connected players: ").append(this.configManager.getPlayerList()).toString());
-                }
-                else if (string2.toLowerCase().startsWith("stop")) {
+                    iCommandListener3.addHelpCommandMessage("Connected players: " + this.configManager.getPlayerList());
+                } else if (string2.toLowerCase().startsWith("stop")) {
                     this.print(string3, "Stopping the server..");
                     this.serverRunning = false;
-                }
-                else if (string2.toLowerCase().startsWith("save-all")) {
+                } else if (string2.toLowerCase().startsWith("save-all")) {
                     this.print(string3, "Forcing save..");
                     this.worldMngr.saveWorld(true, null);
                     this.print(string3, "Save complete.");
-                }
-                else if (string2.toLowerCase().startsWith("save-off")) {
+                } else if (string2.toLowerCase().startsWith("save-off")) {
                     this.print(string3, "Disabling level saving..");
                     this.worldMngr.levelSaving = true;
-                }
-                else if (string2.toLowerCase().startsWith("save-on")) {
+                } else if (string2.toLowerCase().startsWith("save-on")) {
                     this.print(string3, "Enabling level saving..");
                     this.worldMngr.levelSaving = false;
-                }
-                else if (string2.toLowerCase().startsWith("op ")) {
+                } else if (string2.toLowerCase().startsWith("op ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.opPlayer(string4);
-                    this.print(string3, new StringBuilder("Opping ").append(string4).toString());
+                    this.print(string3, "Opping " + string4);
                     this.configManager.sendChatMessageToPlayer(string4, "§eYou are now op!");
-                }
-                else if (string2.toLowerCase().startsWith("deop ")) {
+                } else if (string2.toLowerCase().startsWith("deop ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.deopPlayer(string4);
                     this.configManager.sendChatMessageToPlayer(string4, "§eYou are no longer op!");
-                    this.print(string3, new StringBuilder("De-opping ").append(string4).toString());
-                }
-                else if (string2.toLowerCase().startsWith("ban-ip ")) {
+                    this.print(string3, "De-opping " + string4);
+                } else if (string2.toLowerCase().startsWith("ban-ip ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.banIP(string4);
-                    this.print(string3, new StringBuilder("Banning ip ").append(string4).toString());
-                }
-                else if (string2.toLowerCase().startsWith("pardon-ip ")) {
+                    this.print(string3, "Banning ip " + string4);
+                } else if (string2.toLowerCase().startsWith("pardon-ip ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.pardonIP(string4);
-                    this.print(string3, new StringBuilder("Pardoning ip ").append(string4).toString());
-                }
-                else if (string2.toLowerCase().startsWith("ban ")) {
+                    this.print(string3, "Pardoning ip " + string4);
+                } else if (string2.toLowerCase().startsWith("ban ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.banPlayer(string4);
-                    this.print(string3, new StringBuilder("Banning ").append(string4).toString());
+                    this.print(string3, "Banning " + string4);
                     final EntityPlayerMP entityPlayerMP12 = this.configManager.getPlayerEntity(string4);
                     if (entityPlayerMP12 == null) {
@@ -332,15 +345,13 @@
                     }
                     entityPlayerMP12.playerNetServerHandler.kickPlayer("Banned by admin");
-                }
-                else if (string2.toLowerCase().startsWith("pardon ")) {
+                } else if (string2.toLowerCase().startsWith("pardon ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.pardonPlayer(string4);
-                    this.print(string3, new StringBuilder("Pardoning ").append(string4).toString());
-                }
-                else if (string2.toLowerCase().startsWith("kick ")) {
+                    this.print(string3, "Pardoning " + string4);
+                } else if (string2.toLowerCase().startsWith("kick ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     EntityPlayerMP entityPlayerMP12 = null;
                     for (int i13 = 0; i13 < this.configManager.playerEntities.size(); ++i13) {
-                        final EntityPlayerMP entityPlayerMP13 = (EntityPlayerMP)this.configManager.playerEntities.get(i13);
+                        final EntityPlayerMP entityPlayerMP13 = this.configManager.playerEntities.get(i13);
                         if (entityPlayerMP13.username.equalsIgnoreCase(string4)) {
                             entityPlayerMP12 = entityPlayerMP13;
@@ -349,11 +360,9 @@
                     if (entityPlayerMP12 != null) {
                         entityPlayerMP12.playerNetServerHandler.kickPlayer("Kicked by admin");
-                        this.print(string3, new StringBuilder("Kicking ").append(entityPlayerMP12.username).toString());
+                        this.print(string3, "Kicking " + entityPlayerMP12.username);
+                    } else {
+                        iCommandListener3.addHelpCommandMessage("Can't find user " + string4 + ". No kick.");
                     }
-                    else {
-                        iCommandListener3.addHelpCommandMessage(new StringBuilder("Can't find user ").append(string4).append(". No kick.").toString());
-                    }
-                }
-                else if (string2.toLowerCase().startsWith("tp ")) {
+                } else if (string2.toLowerCase().startsWith("tp ")) {
                     final String[] string5 = string2.split(" ");
                     if (string5.length == 3) {
@@ -361,19 +370,15 @@
                         final EntityPlayerMP entityPlayerMP14 = this.configManager.getPlayerEntity(string5[2]);
                         if (entityPlayerMP12 == null) {
-                            iCommandListener3.addHelpCommandMessage(new StringBuilder("Can't find user ").append(string5[1]).append(". No tp.").toString());
-                        }
-                        else if (entityPlayerMP14 == null) {
-                            iCommandListener3.addHelpCommandMessage(new StringBuilder("Can't find user ").append(string5[2]).append(". No tp.").toString());
-                        }
-                        else {
+                            iCommandListener3.addHelpCommandMessage("Can't find user " + string5[1] + ". No tp.");
+                        } else if (entityPlayerMP14 == null) {
+                            iCommandListener3.addHelpCommandMessage("Can't find user " + string5[2] + ". No tp.");
+                        } else {
                             entityPlayerMP12.playerNetServerHandler.teleportTo(entityPlayerMP14.posX, entityPlayerMP14.posY, entityPlayerMP14.posZ, entityPlayerMP14.rotationYaw, entityPlayerMP14.rotationPitch);
-                            this.print(string3, new StringBuilder("Teleporting ").append(string5[1]).append(" to ").append(string5[2]).append(".").toString());
+                            this.print(string3, "Teleporting " + string5[1] + " to " + string5[2] + ".");
                         }
-                    }
-                    else {
+                    } else {
                         iCommandListener3.addHelpCommandMessage("Syntax error, please provice a source and a target.");
                     }
-                }
-                else if (string2.toLowerCase().startsWith("give ")) {
+                } else if (string2.toLowerCase().startsWith("give ")) {
                     final String[] string5 = string2.split(" ");
                     if (string5.length != 3 && string5.length != 4) {
@@ -386,5 +391,5 @@
                             final int i14 = Integer.parseInt(string5[2]);
                             if (Item.itemsList[i14] != null) {
-                                this.print(string3, new StringBuilder("Giving ").append(entityPlayerMP14.username).append(" some ").append(i14).toString());
+                                this.print(string3, "Giving " + entityPlayerMP14.username + " some " + i14);
                                 int i15 = 1;
                                 if (string5.length > 3) {
@@ -398,23 +403,18 @@
                                 }
                                 entityPlayerMP14.dropPlayerItem(new ItemStack(i14, i15));
+                            } else {
+                                iCommandListener3.addHelpCommandMessage("There's no item with id " + i14);
                             }
-                            else {
-                                iCommandListener3.addHelpCommandMessage(new StringBuilder("There's no item with id ").append(i14).toString());
-                            }
+                        } catch (NumberFormatException numberFormatException10) {
+                            iCommandListener3.addHelpCommandMessage("There's no item with id " + string5[2]);
                         }
-                        catch (NumberFormatException numberFormatException10) {
-                            iCommandListener3.addHelpCommandMessage(new StringBuilder("There's no item with id ").append(string5[2]).toString());
-                        }
+                    } else {
+                        iCommandListener3.addHelpCommandMessage("Can't find user " + string6);
                     }
-                    else {
-                        iCommandListener3.addHelpCommandMessage(new StringBuilder("Can't find user ").append(string6).toString());
-                    }
-                }
-                else if (string2.toLowerCase().startsWith("say ")) {
+                } else if (string2.toLowerCase().startsWith("say ")) {
                     string2 = string2.substring(string2.indexOf(" ")).trim();
-                    MinecraftServer.logger.info(new StringBuilder("[").append(string3).append("] ").append(string2).toString());
-                    this.configManager.sendPacketToAllPlayers(new Packet3Chat(new StringBuilder("§d[Server] ").append(string2).toString()));
-                }
-                else if (string2.toLowerCase().startsWith("tell ")) {
+                    MinecraftServer.logger.info("[" + string3 + "] " + string2);
+                    this.configManager.sendPacketToAllPlayers(new Packet3Chat("§d[Server] " + string2));
+                } else if (string2.toLowerCase().startsWith("tell ")) {
                     final String[] string5 = string2.split(" ");
                     if (string5.length < 3) {
@@ -423,7 +423,7 @@
                     string2 = string2.substring(string2.indexOf(" ")).trim();
                     string2 = string2.substring(string2.indexOf(" ")).trim();
-                    MinecraftServer.logger.info(new StringBuilder("[").append(string3).append("->").append(string5[1]).append("] ").append(string2).toString());
-                    this.configManager.sendPacketToAllPlayers(new Packet3Chat(new StringBuilder("§d[Server] ").append(string2).toString()));
-                    string2 = new StringBuilder("§7").append(string3).append(" whispers ").append(string2).toString();
+                    MinecraftServer.logger.info("[" + string3 + "->" + string5[1] + "] " + string2);
+                    this.configManager.sendPacketToAllPlayers(new Packet3Chat("§d[Server] " + string2));
+                    string2 = "§7" + string3 + " whispers " + string2;
                     MinecraftServer.logger.info(string2);
                     if (this.configManager.sendPacketToPlayer(string5[1], new Packet3Chat(string2))) {
@@ -431,10 +431,82 @@
                     }
                     iCommandListener3.addHelpCommandMessage("There's no player by that name online.");
+                } else if (string2.toLowerCase().startsWith("whitelist")) {
+                    final String[] args = string2.substring(Math.min("whitelist".length() + 1, string2.length() - 1)).split(" ");
+                    if (args.length == 0) {
+                        iCommandListener3.addHelpCommandMessage("Whitelist subcommands:");
+                        iCommandListener3.addHelpCommandMessage("   enable              enable whitelist");
+                        iCommandListener3.addHelpCommandMessage("   disable             disable whitelist");
+                        iCommandListener3.addHelpCommandMessage("   add <player>        add player to whitelist");
+                        iCommandListener3.addHelpCommandMessage("   remove <player>     remove player from whitelist");
+                        iCommandListener3.addHelpCommandMessage("   add-ip <ip>         add IP to whitelist");
+                        iCommandListener3.addHelpCommandMessage("   remove-ip <ip>      remove IP from whitelist");
+                    } else if (args[0].equalsIgnoreCase("enable")) {
+                        this.configManager.enableWhitelist();
+                        this.print(string3, "Whitelist enabled");
+                    } else if (args[0].equalsIgnoreCase("disable")) {
+                        this.configManager.disableWhitelist();
+                        this.print(string3, "Whitelist disabled");
+                    } else if (args[0].equalsIgnoreCase("add") && args.length > 1) {
+                        StringBuilder username = new StringBuilder();
+                        for (int i = 1; i < args.length; i++) {
+                            if (i != 1) username.append(" ");
+                            username.append(args[i]);
+                        }
+                        this.print(string3, "Added player \"" + username.toString()
+                                .replaceAll("\\\\", "\\\\")
+                                .replaceAll("\\\\\"", "\\\"") + "\" to whitelist");
+                        this.configManager.whitelistPlayer(username.toString().toLowerCase());
+                    } else if (args[0].equalsIgnoreCase("remove") && args.length > 1) {
+                        StringBuilder username = new StringBuilder();
+                        for (int i = 1; i < args.length; i++) {
+                            if (i != 1) username.append(" ");
+                            username.append(args[i]);
+                        }
+                        this.print(string3, "Remove player \"" + username.toString()
+                                .replaceAll("\\\\", "\\\\")
+                                .replaceAll("\\\\\"", "\\\"") + "\" from whitelist");
+                        this.configManager.unwhitelistPlayer(username.toString().toLowerCase());
+                    } else if (args[0].equalsIgnoreCase("add-ip") && args.length > 1) {
+                        StringBuilder username = new StringBuilder();
+                        for (int i = 1; i < args.length; i++) {
+                            if (i != 1) username.append(" ");
+                            username.append(args[i]);
+                        }
+                        this.print(string3, "Added IP \"" + username.toString()
+                                .replaceAll("\\\\", "\\\\")
+                                .replaceAll("\\\\\"", "\\\"") + "\" to whitelist");
+                        this.configManager.whitelistIP(username.toString().toLowerCase());
+                    } else if (args[0].equalsIgnoreCase("remove-ip") && args.length > 1) {
+                        StringBuilder username = new StringBuilder();
+                        for (int i = 1; i < args.length; i++) {
+                            if (i != 1) username.append(" ");
+                            username.append(args[i]);
+                        }
+                        this.print(string3, "Remove IP \"" + username.toString()
+                                .replaceAll("\\\\", "\\\\")
+                                .replaceAll("\\\\\"", "\\\"") + "\" from whitelist");
+                        this.configManager.unwhitelistIP(username.toString().toLowerCase());
+                    } else {
+                        iCommandListener3.addHelpCommandMessage("Whitelist subcommands:");
+                        iCommandListener3.addHelpCommandMessage("   enable              enable whitelist");
+                        iCommandListener3.addHelpCommandMessage("   disable             disable whitelist");
+                        iCommandListener3.addHelpCommandMessage("   add <player>        add player to whitelist");
+                        iCommandListener3.addHelpCommandMessage("   remove <player>     remove player from whitelist");
+                        iCommandListener3.addHelpCommandMessage("   add-ip <player>     add IP to whitelist");
+                        iCommandListener3.addHelpCommandMessage("   remove-ip <player>  remove IP from whitelist");
+                    }
+                } else {
+                    if (Bukkit.getServer().getPlayer(iCommandListener3.getUsername()) == null) {
+                        MinecraftServer.logger.info("Executing command as Server");
+                        if (!(Bukkit.getServer().dispatchCommand(new ConsoleCommandSender(Bukkit.getServer()), string2))) {
+                            MinecraftServer.logger.info("Unknown console command. Type \"help\" for help.");
+                        }
+                    } else {
+                        MinecraftServer.logger.info("Executing command as " + iCommandListener3.getUsername());
+                        if (!(Bukkit.getServer().getPlayer(iCommandListener3.getUsername()).performCommand(string2)))
+                            MinecraftServer.logger.info("Unknown console command. Type \"help\" for help.");
+                    }
                 }
-                else {
-                    MinecraftServer.logger.info("Unknown console command. Type \"help\" for help.");
-                }
-            }
-            else {
+            } else {
                 iCommandListener3.addHelpCommandMessage("To run the server without a gui, start it like this:");
                 iCommandListener3.addHelpCommandMessage("   java -Xmx1024M -Xms1024M -jar minecraft_server.jar nogui");
@@ -457,54 +529,171 @@
                 iCommandListener3.addHelpCommandMessage("   list                      lists all currently connected players");
                 iCommandListener3.addHelpCommandMessage("   say <message>             broadcasts a message to all players");
-            }
+                iCommandListener3.addHelpCommandMessage("   whitelist                 manage server whitelist");
+            }*/
         }
     }
-    
+
     private void print(final String string1, final String string2) {
-        final String string3 = String.valueOf(string1) + ": " + string2;
-        this.configManager.sendChatMessageToAllOps(new StringBuilder("§7(").append(string3).append(")").toString());
+        final String string3 = string1 + ": " + string2;
+        this.configManager.sendChatMessageToAllOps("§7(" + string3 + ")");
         MinecraftServer.logger.info(string3);
     }
-    
+
     private int parseInt(final String string, final int defaultValue) {
         try {
             return Integer.parseInt(string);
-        }
-        catch (NumberFormatException numberFormatException4) {
+        } catch (NumberFormatException numberFormatException4) {
             return defaultValue;
         }
     }
-    
+
     public void addToOnlinePlayerList(final IUpdatePlayerListBox playerListBox) {
         this.playersOnline.add(playerListBox);
     }
-    
+
     public static void main(final String[] args) {
+        // CraftBukkit stuff for CLI parameters
+        OptionParser parser = new OptionParser() {
+            {
+                acceptsAll(asList("?", "help"), "Show the help");
+
+                acceptsAll(asList("c", "config"), "Properties file to use")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("server.properties"))
+                        .describedAs("Properties file");
+
+                acceptsAll(asList("P", "plugins"), "Plugin directory to use")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("plugins"))
+                        .describedAs("Plugin directory");
+
+                acceptsAll(asList("h", "host", "server-ip"), "Host to listen on")
+                        .withRequiredArg()
+                        .ofType(String.class)
+                        .describedAs("Hostname or IP");
+
+                acceptsAll(asList("w", "world", "level-name"), "World directory")
+                        .withRequiredArg()
+                        .ofType(String.class)
+                        .describedAs("World dir");
+
+                acceptsAll(asList("p", "port", "server-port"), "Port to listen on")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .describedAs("Port");
+
+                acceptsAll(asList("o", "online-mode"), "Whether to use online authentication")
+                        .withRequiredArg()
+                        .ofType(Boolean.class)
+                        .describedAs("Authentication");
+
+                acceptsAll(asList("s", "size", "max-players"), "Maximum amount of players")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .describedAs("Server size");
+
+                acceptsAll(asList("d", "date-format"), "Format of the date to display in the console (for log entries)")
+                        .withRequiredArg()
+                        .ofType(SimpleDateFormat.class)
+                        .describedAs("Log date format");
+
+                acceptsAll(asList("log-pattern"), "Specfies the log filename pattern")
+                        .withRequiredArg()
+                        .ofType(String.class)
+                        .defaultsTo("server.log")
+                        .describedAs("Log filename");
+
+                acceptsAll(asList("log-limit"), "Limits the maximum size of the log file (0 = unlimited)")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .defaultsTo(0)
+                        .describedAs("Max log size");
+
+                acceptsAll(asList("log-count"), "Specified how many log files to cycle through")
+                        .withRequiredArg()
+                        .ofType(Integer.class)
+                        .defaultsTo(1)
+                        .describedAs("Log count");
+
+                acceptsAll(asList("log-append"), "Whether to append to the log file")
+                        .withRequiredArg()
+                        .ofType(Boolean.class)
+                        .defaultsTo(true)
+                        .describedAs("Log append");
+
+                acceptsAll(asList("b", "bukkit-settings"), "File for bukkit settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("bukkit.yml"))
+                        .describedAs("Yml file");
+
+                acceptsAll(asList("nojline"), "Disables jline and emulates the vanilla console");
+
+                acceptsAll(asList("v", "version"), "Show the CraftBukkit Version");
+            }
+        };
+        OptionSet options = null;
         try {
-            final MinecraftServer minecraftServer1 = new MinecraftServer();
-            if (!GraphicsEnvironment.isHeadless() && (args.length <= 0 || !args[0].equals("nogui"))) {
-                ServerGUI.initGui(minecraftServer1);
+            options = parser.parse(args);
+        } catch (joptsimple.OptionException ex) {
+            Logger.getLogger(MinecraftServer.class.getName()).log(Level.SEVERE, ex.getLocalizedMessage());
+        }
+        if ((options == null) || (options.has("?"))) {
+            try {
+                parser.printHelpOn(System.out);
+            } catch (IOException ex) {
+                Logger.getLogger(MinecraftServer.class.getName()).log(Level.SEVERE, null, ex);
             }
-            new ThreadServerApplication("Server thread", minecraftServer1).start();
+        } else if (options.has("v")) {
+            System.out.println(LilyBukkit.class.getPackage().getImplementationVersion());
+        } else {
+            useJline = !"jline.UnsupportedTerminal".equals(System.getProperty("jline.terminal"));
+
+            if (options.has("nojline")) {
+                System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+                System.setProperty("user.language", "en");
+                useJline = false;
+            }
+            // End of CraftBukkit stuff
+            try {
+                final MinecraftServer minecraftServer1 = new MinecraftServer(options);
+                if (!GraphicsEnvironment.isHeadless() && (args.length <= 0 || !args[0].equals("nogui"))) {
+                    ServerGUI.initGui(minecraftServer1);
+                }
+                new LilyBukkit(minecraftServer1);
+                new ThreadServerApplication("Server thread", minecraftServer1).start();
+            } catch (Exception exception2) {
+                MinecraftServer.logger.log(Level.SEVERE, "Failed to start the minecraft server", exception2);
+            }
         }
-        catch (Exception exception2) {
-            MinecraftServer.logger.log(Level.SEVERE, "Failed to start the minecraft server", (Throwable)exception2);
-        }
     }
-    
+
     public File getFile(final String fileName) {
         return new File(fileName);
     }
-    
+
     public void addHelpCommandMessage(final String helpCommandMessage) {
         MinecraftServer.logger.info(helpCommandMessage);
     }
-    
+
     public String getUsername() {
         return "CONSOLE";
     }
-    
+
     public static boolean isServerRunning(final MinecraftServer mcServer) {
         return mcServer.serverRunning;
     }
+
+    //CraftBukkit
+    public static boolean useJline = true;
+    public OptionSet options;
+    public ColouredConsoleSender console;
+    public ConsoleReader reader;
+    public static int currentTick;
+
+    private static List<String> asList(String... params) {
+        return Arrays.asList(params);
+    }
 }
