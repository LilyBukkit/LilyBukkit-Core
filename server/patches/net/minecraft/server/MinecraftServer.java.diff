--- MinecraftServer.java
+++ MinecraftServer.java
@@ -1,43 +1,28 @@
 package net.minecraft.server;
 
-import net.minecraft.src.ThreadServerApplication;
-import net.minecraft.src.ServerGUI;
-import java.awt.GraphicsEnvironment;
-import net.minecraft.src.Packet3Chat;
-import net.minecraft.src.ItemStack;
-import net.minecraft.src.Item;
-import net.minecraft.src.EntityPlayerMP;
-import net.minecraft.src.ServerCommand;
-import java.util.Iterator;
-import net.minecraft.src.IUpdatePlayerListBox;
-import net.minecraft.src.Packet;
-import net.minecraft.src.Packet4UpdateTime;
-import net.minecraft.src.Vec3D;
-import net.minecraft.src.AxisAlignedBB;
-import net.minecraft.src.IProgressUpdate;
-import net.minecraft.src.IWorldAccess;
-import net.minecraft.src.WorldManager;
+import com.avaje.ebean.config.ServerConfig;
+import net.minecraft.src.*;
+import org.bukkit.Server;
+import org.bukkit.World;
+import org.bukkit.command.CommandSender;
+import org.bukkit.command.PluginCommand;
+import org.bukkit.entity.Player;
+import org.bukkit.plugin.PluginManager;
+import org.bukkit.scheduler.BukkitScheduler;
+
+import java.awt.*;
+import java.io.File;
 import java.io.IOException;
-import java.util.logging.Level;
 import java.net.InetAddress;
-import java.io.File;
-import net.minecraft.src.ConsoleLogManager;
-import net.minecraft.src.ThreadCommandReader;
-import net.minecraft.src.ThreadSleepForeverServer;
-import java.util.Collections;
 import java.util.ArrayList;
-import net.minecraft.src.EntityTracker;
-import java.util.List;
-import net.minecraft.src.ServerConfigurationManager;
-import net.minecraft.src.WorldServer;
-import net.minecraft.src.PropertyManager;
-import net.minecraft.src.NetworkListenThread;
+import java.util.Collections;
 import java.util.HashMap;
+import java.util.List;
+import java.util.logging.Level;
 import java.util.logging.Logger;
-import net.minecraft.src.ICommandListener;
 
-public class MinecraftServer implements ICommandListener, Runnable {
+public class MinecraftServer implements ICommandListener, Runnable, Server {
     public static Logger logger;
-    public static HashMap playerList;
+    public static HashMap<String, Object> playerList;
     public NetworkListenThread networkServer;
     public PropertyManager propertyManagerObj;
@@ -53,19 +38,19 @@
     public EntityTracker entityTracker;
     public boolean onlineMode;
-    
+
     static {
         MinecraftServer.logger = Logger.getLogger("Minecraft");
         MinecraftServer.playerList = new HashMap();
     }
-    
+
     public MinecraftServer() {
         this.serverRunning = true;
         this.serverStopped = false;
         this.deathTime = 0;
-        this.playersOnline = (List)new ArrayList();
-        this.commands = Collections.synchronizedList((List)new ArrayList());
+        this.playersOnline = (List) new ArrayList();
+        this.commands = Collections.synchronizedList((List) new ArrayList());
         new ThreadSleepForeverServer(this);
     }
-    
+
     private boolean startServer() throws IOException {
         final ThreadCommandReader threadCommandReader1 = new ThreadCommandReader(this);
@@ -73,5 +58,5 @@
         threadCommandReader1.start();
         ConsoleLogManager.init();
-        MinecraftServer.logger.info("Starting minecraft server version 0.2.1");
+        MinecraftServer.logger.info("Starting minecraft server version Rosepad 1.1");
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
             MinecraftServer.logger.warning("**** NOT ENOUGH RAM!");
@@ -81,5 +66,5 @@
         this.propertyManagerObj = new PropertyManager(new File("server.properties"));
         final String string2 = this.propertyManagerObj.getStringProperty("server-ip", "");
-        this.onlineMode = this.propertyManagerObj.getBooleanProperty("online-mode", true);
+        this.onlineMode = false;
         InetAddress inetAddress3 = null;
         if (string2.length() > 0) {
@@ -90,6 +75,5 @@
         try {
             this.networkServer = new NetworkListenThread(this, inetAddress3, i4);
-        }
-        catch (IOException iOException6) {
+        } catch (IOException iOException6) {
             MinecraftServer.logger.warning("**** FAILED TO BIND TO PORT!");
             MinecraftServer.logger.log(Level.WARNING, new StringBuilder("The exception was: ").append(iOException6.toString()).toString());
@@ -97,10 +81,4 @@
             return false;
         }
-        if (!this.onlineMode) {
-            MinecraftServer.logger.warning("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
-            MinecraftServer.logger.warning("The server will make no attempt to authenticate usernames. Beware.");
-            MinecraftServer.logger.warning("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
-            MinecraftServer.logger.warning("To change this, set \"online-mode\" to \"true\" in the server.settings file.");
-        }
         this.configManager = new ServerConfigurationManager(this);
         this.entityTracker = new EntityTracker(this);
@@ -111,5 +89,5 @@
         return true;
     }
-    
+
     private void initWorld(final String worldName) {
         MinecraftServer.logger.info("Preparing start region");
@@ -129,5 +107,5 @@
         this.clearCurrentTask();
     }
-    
+
     private void outputPercentRemaining(final String currentTask, final int percent) {
         this.currentTask = currentTask;
@@ -135,15 +113,15 @@
         System.out.println(String.valueOf(currentTask) + ": " + percent + "%");
     }
-    
+
     private void clearCurrentTask() {
         this.currentTask = null;
         this.percentDone = 0;
     }
-    
+
     private void save() {
         MinecraftServer.logger.info("Saving chunks");
         this.worldMngr.saveWorld(true, null);
     }
-    
+
     private void stop() {
         MinecraftServer.logger.info("Stopping server");
@@ -155,9 +133,9 @@
         }
     }
-    
+
     public void stopRunning() {
         this.serverRunning = false;
     }
-    
+
     public void run() {
         try {
@@ -184,32 +162,27 @@
                     Thread.sleep(1L);
                 }
-            }
-            else {
+            } else {
                 while (this.serverRunning) {
                     this.commandLineParser();
                     try {
                         Thread.sleep(10L);
-                    }
-                    catch (InterruptedException interruptedException15) {
+                    } catch (InterruptedException interruptedException15) {
                         interruptedException15.printStackTrace();
                     }
                 }
             }
-        }
-        catch (Exception exception16) {
+        } catch (Exception exception16) {
             exception16.printStackTrace();
-            MinecraftServer.logger.log(Level.SEVERE, "Unexpected exception", (Throwable)exception16);
+            MinecraftServer.logger.log(Level.SEVERE, "Unexpected exception", (Throwable) exception16);
             while (this.serverRunning) {
                 this.commandLineParser();
                 try {
                     Thread.sleep(10L);
-                }
-                catch (InterruptedException interruptedException16) {
+                } catch (InterruptedException interruptedException16) {
                     interruptedException16.printStackTrace();
                 }
             }
             return;
-        }
-        finally {
+        } finally {
             this.stop();
             this.serverStopped = true;
@@ -220,13 +193,12 @@
         System.exit(0);
     }
-    
+
     private void doTick() throws IOException {
         final ArrayList arrayList1 = new ArrayList();
         for (final String string3 : MinecraftServer.playerList.keySet()) {
-            final int i4 = (int)MinecraftServer.playerList.get(string3);
+            final int i4 = (int) MinecraftServer.playerList.get(string3);
             if (i4 > 0) {
                 MinecraftServer.playerList.put(string3, (i4 - 1));
-            }
-            else {
+            } else {
                 arrayList1.add(string3);
             }
@@ -242,5 +214,6 @@
         }
         this.worldMngr.tick();
-        while (this.worldMngr.updatingLighting()) {}
+        while (this.worldMngr.updatingLighting()) {
+        }
         this.worldMngr.updateEntities();
         this.networkServer.handleNetworkListenThread();
@@ -248,21 +221,20 @@
         this.entityTracker.updateTrackedEntities();
         for (int i5 = 0; i5 < this.playersOnline.size(); ++i5) {
-            ((IUpdatePlayerListBox)this.playersOnline.get(i5)).addAllPlayers();
+            ((IUpdatePlayerListBox) this.playersOnline.get(i5)).addAllPlayers();
         }
         try {
             this.commandLineParser();
+        } catch (Exception exception5) {
+            MinecraftServer.logger.log(Level.WARNING, "Unexpected exception while parsing console command", (Throwable) exception5);
         }
-        catch (Exception exception5) {
-            MinecraftServer.logger.log(Level.WARNING, "Unexpected exception while parsing console command", (Throwable)exception5);
-        }
     }
-    
+
     public void addCommand(final String command, final ICommandListener commandListener) {
         this.commands.add(new ServerCommand(command, commandListener));
     }
-    
+
     public void commandLineParser() {
         while (this.commands.size() > 0) {
-            final ServerCommand serverCommand1 = (ServerCommand)this.commands.remove(0);
+            final ServerCommand serverCommand1 = (ServerCommand) this.commands.remove(0);
             String string2 = serverCommand1.command;
             final ICommandListener iCommandListener3 = serverCommand1.commandListener;
@@ -271,45 +243,36 @@
                 if (string2.toLowerCase().startsWith("list")) {
                     iCommandListener3.addHelpCommandMessage(new StringBuilder("Connected players: ").append(this.configManager.getPlayerList()).toString());
-                }
-                else if (string2.toLowerCase().startsWith("stop")) {
+                } else if (string2.toLowerCase().startsWith("stop")) {
                     this.print(string3, "Stopping the server..");
                     this.serverRunning = false;
-                }
-                else if (string2.toLowerCase().startsWith("save-all")) {
+                } else if (string2.toLowerCase().startsWith("save-all")) {
                     this.print(string3, "Forcing save..");
                     this.worldMngr.saveWorld(true, null);
                     this.print(string3, "Save complete.");
-                }
-                else if (string2.toLowerCase().startsWith("save-off")) {
+                } else if (string2.toLowerCase().startsWith("save-off")) {
                     this.print(string3, "Disabling level saving..");
                     this.worldMngr.levelSaving = true;
-                }
-                else if (string2.toLowerCase().startsWith("save-on")) {
+                } else if (string2.toLowerCase().startsWith("save-on")) {
                     this.print(string3, "Enabling level saving..");
                     this.worldMngr.levelSaving = false;
-                }
-                else if (string2.toLowerCase().startsWith("op ")) {
+                } else if (string2.toLowerCase().startsWith("op ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.opPlayer(string4);
                     this.print(string3, new StringBuilder("Opping ").append(string4).toString());
                     this.configManager.sendChatMessageToPlayer(string4, "§eYou are now op!");
-                }
-                else if (string2.toLowerCase().startsWith("deop ")) {
+                } else if (string2.toLowerCase().startsWith("deop ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.deopPlayer(string4);
                     this.configManager.sendChatMessageToPlayer(string4, "§eYou are no longer op!");
                     this.print(string3, new StringBuilder("De-opping ").append(string4).toString());
-                }
-                else if (string2.toLowerCase().startsWith("ban-ip ")) {
+                } else if (string2.toLowerCase().startsWith("ban-ip ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.banIP(string4);
                     this.print(string3, new StringBuilder("Banning ip ").append(string4).toString());
-                }
-                else if (string2.toLowerCase().startsWith("pardon-ip ")) {
+                } else if (string2.toLowerCase().startsWith("pardon-ip ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.pardonIP(string4);
                     this.print(string3, new StringBuilder("Pardoning ip ").append(string4).toString());
-                }
-                else if (string2.toLowerCase().startsWith("ban ")) {
+                } else if (string2.toLowerCase().startsWith("ban ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.banPlayer(string4);
@@ -320,15 +283,13 @@
                     }
                     entityPlayerMP12.playerNetServerHandler.kickPlayer("Banned by admin");
-                }
-                else if (string2.toLowerCase().startsWith("pardon ")) {
+                } else if (string2.toLowerCase().startsWith("pardon ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     this.configManager.pardonPlayer(string4);
                     this.print(string3, new StringBuilder("Pardoning ").append(string4).toString());
-                }
-                else if (string2.toLowerCase().startsWith("kick ")) {
+                } else if (string2.toLowerCase().startsWith("kick ")) {
                     final String string4 = string2.substring(string2.indexOf(" ")).trim();
                     EntityPlayerMP entityPlayerMP12 = null;
                     for (int i13 = 0; i13 < this.configManager.playerEntities.size(); ++i13) {
-                        final EntityPlayerMP entityPlayerMP13 = (EntityPlayerMP)this.configManager.playerEntities.get(i13);
+                        final EntityPlayerMP entityPlayerMP13 = (EntityPlayerMP) this.configManager.playerEntities.get(i13);
                         if (entityPlayerMP13.username.equalsIgnoreCase(string4)) {
                             entityPlayerMP12 = entityPlayerMP13;
@@ -338,10 +299,8 @@
                         entityPlayerMP12.playerNetServerHandler.kickPlayer("Kicked by admin");
                         this.print(string3, new StringBuilder("Kicking ").append(entityPlayerMP12.username).toString());
-                    }
-                    else {
+                    } else {
                         iCommandListener3.addHelpCommandMessage(new StringBuilder("Can't find user ").append(string4).append(". No kick.").toString());
                     }
-                }
-                else if (string2.toLowerCase().startsWith("tp ")) {
+                } else if (string2.toLowerCase().startsWith("tp ")) {
                     final String[] string5 = string2.split(" ");
                     if (string5.length == 3) {
@@ -350,18 +309,14 @@
                         if (entityPlayerMP12 == null) {
                             iCommandListener3.addHelpCommandMessage(new StringBuilder("Can't find user ").append(string5[1]).append(". No tp.").toString());
-                        }
-                        else if (entityPlayerMP14 == null) {
+                        } else if (entityPlayerMP14 == null) {
                             iCommandListener3.addHelpCommandMessage(new StringBuilder("Can't find user ").append(string5[2]).append(". No tp.").toString());
-                        }
-                        else {
+                        } else {
                             entityPlayerMP12.playerNetServerHandler.teleportTo(entityPlayerMP14.posX, entityPlayerMP14.posY, entityPlayerMP14.posZ, entityPlayerMP14.rotationYaw, entityPlayerMP14.rotationPitch);
                             this.print(string3, new StringBuilder("Teleporting ").append(string5[1]).append(" to ").append(string5[2]).append(".").toString());
                         }
-                    }
-                    else {
+                    } else {
                         iCommandListener3.addHelpCommandMessage("Syntax error, please provice a source and a target.");
                     }
-                }
-                else if (string2.toLowerCase().startsWith("give ")) {
+                } else if (string2.toLowerCase().startsWith("give ")) {
                     final String[] string5 = string2.split(" ");
                     if (string5.length != 3 && string5.length != 4) {
@@ -386,23 +341,18 @@
                                 }
                                 entityPlayerMP14.dropPlayerItem(new ItemStack(i14, i15));
-                            }
-                            else {
+                            } else {
                                 iCommandListener3.addHelpCommandMessage(new StringBuilder("There's no item with id ").append(i14).toString());
                             }
-                        }
-                        catch (NumberFormatException numberFormatException10) {
+                        } catch (NumberFormatException numberFormatException10) {
                             iCommandListener3.addHelpCommandMessage(new StringBuilder("There's no item with id ").append(string5[2]).toString());
                         }
-                    }
-                    else {
+                    } else {
                         iCommandListener3.addHelpCommandMessage(new StringBuilder("Can't find user ").append(string6).toString());
                     }
-                }
-                else if (string2.toLowerCase().startsWith("say ")) {
+                } else if (string2.toLowerCase().startsWith("say ")) {
                     string2 = string2.substring(string2.indexOf(" ")).trim();
                     MinecraftServer.logger.info(new StringBuilder("[").append(string3).append("] ").append(string2).toString());
                     this.configManager.sendPacketToAllPlayers(new Packet3Chat(new StringBuilder("§d[Server] ").append(string2).toString()));
-                }
-                else if (string2.toLowerCase().startsWith("tell ")) {
+                } else if (string2.toLowerCase().startsWith("tell ")) {
                     final String[] string5 = string2.split(" ");
                     if (string5.length < 3) {
@@ -419,10 +369,73 @@
                     }
                     iCommandListener3.addHelpCommandMessage("There's no player by that name online.");
-                }
-                else {
+                } else if (string2.toLowerCase().startsWith("whitelist")) {
+                    final String[] args = string2.substring(Math.min("whitelist".length() + 1, string2.length() - 1)).split(" ");
+                    if (args.length == 0) {
+                        iCommandListener3.addHelpCommandMessage("Whitelist subcommands:");
+                        iCommandListener3.addHelpCommandMessage("   enable              enable whitelist");
+                        iCommandListener3.addHelpCommandMessage("   disable             disable whitelist");
+                        iCommandListener3.addHelpCommandMessage("   add <player>        add player to whitelist");
+                        iCommandListener3.addHelpCommandMessage("   remove <player>     remove player from whitelist");
+                        iCommandListener3.addHelpCommandMessage("   add-ip <ip>         add IP to whitelist");
+                        iCommandListener3.addHelpCommandMessage("   remove-ip <ip>      remove IP from whitelist");
+                    } else if (args[0].equalsIgnoreCase("enable")) {
+                        this.configManager.enableWhitelist();
+                        this.print(string3, "Whitelist enabled");
+                    } else if (args[0].equalsIgnoreCase("disable")) {
+                        this.configManager.disableWhitelist();
+                        this.print(string3, "Whitelist disabled");
+                    } else if (args[0].equalsIgnoreCase("add") && args.length > 1) {
+                        StringBuilder username = new StringBuilder();
+                        for (int i = 1; i < args.length; i++) {
+                            if (i != 1) username.append(" ");
+                            username.append(args[i]);
+                        }
+                        this.print(string3, "Added player \"" + username.toString()
+                                .replaceAll("\\\\", "\\\\")
+                                .replaceAll("\\\\\"", "\\\"") + "\" to whitelist");
+                        this.configManager.whitelistPlayer(username.toString().toLowerCase());
+                    } else if (args[0].equalsIgnoreCase("remove") && args.length > 1) {
+                        StringBuilder username = new StringBuilder();
+                        for (int i = 1; i < args.length; i++) {
+                            if (i != 1) username.append(" ");
+                            username.append(args[i]);
+                        }
+                        this.print(string3, "Remove player \"" + username.toString()
+                                .replaceAll("\\\\", "\\\\")
+                                .replaceAll("\\\\\"", "\\\"") + "\" from whitelist");
+                        this.configManager.unwhitelistPlayer(username.toString().toLowerCase());
+                    } else if (args[0].equalsIgnoreCase("add-ip") && args.length > 1) {
+                        StringBuilder username = new StringBuilder();
+                        for (int i = 1; i < args.length; i++) {
+                            if (i != 1) username.append(" ");
+                            username.append(args[i]);
+                        }
+                        this.print(string3, "Added IP \"" + username.toString()
+                                .replaceAll("\\\\", "\\\\")
+                                .replaceAll("\\\\\"", "\\\"") + "\" to whitelist");
+                        this.configManager.whitelistIP(username.toString().toLowerCase());
+                    } else if (args[0].equalsIgnoreCase("remove-ip") && args.length > 1) {
+                        StringBuilder username = new StringBuilder();
+                        for (int i = 1; i < args.length; i++) {
+                            if (i != 1) username.append(" ");
+                            username.append(args[i]);
+                        }
+                        this.print(string3, "Remove IP \"" + username.toString()
+                                .replaceAll("\\\\", "\\\\")
+                                .replaceAll("\\\\\"", "\\\"") + "\" from whitelist");
+                        this.configManager.unwhitelistIP(username.toString().toLowerCase());
+                    } else {
+                        iCommandListener3.addHelpCommandMessage("Whitelist subcommands:");
+                        iCommandListener3.addHelpCommandMessage("   enable              enable whitelist");
+                        iCommandListener3.addHelpCommandMessage("   disable             disable whitelist");
+                        iCommandListener3.addHelpCommandMessage("   add <player>        add player to whitelist");
+                        iCommandListener3.addHelpCommandMessage("   remove <player>     remove player from whitelist");
+                        iCommandListener3.addHelpCommandMessage("   add-ip <player>     add IP to whitelist");
+                        iCommandListener3.addHelpCommandMessage("   remove-ip <player>  remove IP from whitelist");
+                    }
+                } else {
                     MinecraftServer.logger.info("Unknown console command. Type \"help\" for help.");
                 }
-            }
-            else {
+            } else {
                 iCommandListener3.addHelpCommandMessage("To run the server without a gui, start it like this:");
                 iCommandListener3.addHelpCommandMessage("   java -Xmx1024M -Xms1024M -jar minecraft_server.jar nogui");
@@ -445,8 +458,9 @@
                 iCommandListener3.addHelpCommandMessage("   list                      lists all currently connected players");
                 iCommandListener3.addHelpCommandMessage("   say <message>             broadcasts a message to all players");
+                iCommandListener3.addHelpCommandMessage("   whitelist                 manage server whitelist");
             }
         }
     }
-    
+
     private void print(final String string1, final String string2) {
         final String string3 = String.valueOf(string1) + ": " + string2;
@@ -454,18 +468,17 @@
         MinecraftServer.logger.info(string3);
     }
-    
+
     private int parseInt(final String string, final int defaultValue) {
         try {
             return Integer.parseInt(string);
-        }
-        catch (NumberFormatException numberFormatException4) {
+        } catch (NumberFormatException numberFormatException4) {
             return defaultValue;
         }
     }
-    
+
     public void addToOnlinePlayerList(final IUpdatePlayerListBox playerListBox) {
         this.playersOnline.add(playerListBox);
     }
-    
+
     public static void main(final String[] args) {
         try {
@@ -475,24 +488,280 @@
             }
             new ThreadServerApplication("Server thread", minecraftServer1).start();
+        } catch (Exception exception2) {
+            MinecraftServer.logger.log(Level.SEVERE, "Failed to start the minecraft server", (Throwable) exception2);
         }
-        catch (Exception exception2) {
-            MinecraftServer.logger.log(Level.SEVERE, "Failed to start the minecraft server", (Throwable)exception2);
-        }
     }
-    
+
     public File getFile(final String fileName) {
         return new File(fileName);
     }
-    
+
     public void addHelpCommandMessage(final String helpCommandMessage) {
         MinecraftServer.logger.info(helpCommandMessage);
     }
-    
+
     public String getUsername() {
         return "CONSOLE";
     }
-    
+
     public static boolean isServerRunning(final MinecraftServer mcServer) {
         return mcServer.serverRunning;
     }
+
+    // ####################### \\
+    // # L I L Y B U K K I T # \\
+    // ####################### \\
+
+    private String BUKKIT_serverName = "LilyBukkit";
+    private String BUKKIT_serverVersion = "1.0.0 build 5";
+
+    /**
+     * Gets the name of this server implementation
+     *
+     * @return name of this server implementation
+     */
+    @Override
+    public String getName() {
+        return this.BUKKIT_serverName;
+    }
+
+    /**
+     * Gets the version string of this server implementation.
+     *
+     * @return version of this server implementation
+     */
+    @Override
+    public String getVersion() {
+        return this.BUKKIT_serverVersion;
+    }
+
+    /**
+     * Gets a list of all currently logged in players
+     *
+     * @return An array of Players that are currently online
+     */
+    @Override
+    public Player[] getOnlinePlayers() {
+        return new Player[0];
+    }
+
+    /**
+     * Get the maximum amount of players which can login to this server
+     *
+     * @return The amount of players this server allows
+     */
+    @Override
+    public int getMaxPlayers() {
+        return 0;
+    }
+
+    /**
+     * Get the game port that the server runs on
+     *
+     * @return The port number of this servers
+     */
+    @Override
+    public int getPort() {
+        return 0;
+    }
+
+    /**
+     * Get the IP that this server is bound to or empty string if not specified
+     *
+     * @return The IP string that this server is bound to, otherwise empty string
+     */
+    @Override
+    public String getIp() {
+        return null;
+    }
+
+    /**
+     * Get the name of this server
+     *
+     * @return The name of this server
+     */
+    @Override
+    public String getServerName() {
+        return null;
+    }
+
+    /**
+     * Get an ID of this server. The ID is a simple generally alphanumeric
+     * ID that can be used for uniquely identifying this server.
+     *
+     * @return The ID of this server
+     */
+    @Override
+    public String getServerId() {
+        return null;
+    }
+
+    /**
+     * Broadcast a message to all players.
+     *
+     * @param message the message
+     * @return the number of players
+     */
+    @Override
+    public int broadcastMessage(String message) {
+        return 0;
+    }
+
+    /**
+     * Gets a player object by the given username
+     * <p>
+     * This method may not return objects for offline players
+     *
+     * @param name Name to look up
+     * @return Player if it was found, otherwise null
+     */
+    @Override
+    public Player getPlayer(String name) {
+        return null;
+    }
+
+    /**
+     * Attempts to match any players with the given name, and returns a list
+     * of all possibly matches
+     * <p>
+     * This list is not sorted in any particular order. If an exact match is found,
+     * the returned list will only contain a single result.
+     *
+     * @param name Name to match
+     * @return List of all possible players
+     */
+    @Override
+    public List<Player> matchPlayer(String name) {
+        return null;
+    }
+
+    /**
+     * Gets the PluginManager for interfacing with plugins
+     *
+     * @return PluginManager for this Server instance
+     */
+    @Override
+    public PluginManager getPluginManager() {
+        return null;
+    }
+
+    /**
+     * Gets the Scheduler for managing scheduled events
+     *
+     * @return Scheduler for this Server instance
+     */
+    @Override
+    public BukkitScheduler getScheduler() {
+        return null;
+    }
+
+    /**
+     * Gets a list of all worlds on this server
+     *
+     * @return A list of worlds
+     */
+    @Override
+    public List<World> getWorlds() {
+        return null;
+    }
+
+    /**
+     * Creates or loads a world with the given name.
+     * If the world is already loaded, it will just return the equivalent of
+     * getWorld(name)
+     *
+     * @param name        Name of the world to load
+     * @param environment Environment type of the world
+     * @return Newly created or loaded World
+     */
+    @Override
+    public World createWorld(String name, World.Environment environment) {
+        return null;
+    }
+
+    /**
+     * Creates or loads a world with the given name.
+     * If the world is already loaded, it will just return the equivalent of
+     * getWorld(name)
+     *
+     * @param name        Name of the world to load
+     * @param environment Environment type of the world
+     * @param seed        Seed value to create the world with
+     * @return Newly created or loaded World
+     */
+    @Override
+    public World createWorld(String name, World.Environment environment, long seed) {
+        return null;
+    }
+
+    /**
+     * Gets the world with the given name
+     *
+     * @param name Name of the world to retrieve
+     * @return World with the given name, or null if none exists
+     */
+    @Override
+    public World getWorld(String name) {
+        return null;
+    }
+
+    /**
+     * Reloads the server, refreshing settings and plugin information
+     */
+    @Override
+    public void reload() {
+
+    }
+
+    /**
+     * Returns the primary logger associated with this server instance
+     *
+     * @return Logger associated with this server
+     */
+    @Override
+    public Logger getLogger() {
+        return null;
+    }
+
+    /**
+     * Gets a {@link PluginCommand} with the given name or alias
+     *
+     * @param name Name of the command to retrieve
+     * @return PluginCommand if found, otherwise null
+     */
+    @Override
+    public PluginCommand getPluginCommand(String name) {
+        return null;
+    }
+
+    /**
+     * Writes loaded players to disk
+     */
+    @Override
+    public void savePlayers() {
+
+    }
+
+    /**
+     * Dispatches a command on the server, and executes it if found.
+     *
+     * @param sender
+     * @param commandLine command + arguments. Example: "test abc 123"
+     * @return targetFound returns false if no target is found.
+     * @throws CommandException Thrown when the executor for the given command fails with an unhandled exception
+     */
+    @Override
+    public boolean dispatchCommand(CommandSender sender, String commandLine) {
+        return false;
+    }
+
+    /**
+     * Populates a given {@link ServerConfig} with values attributes to this server
+     *
+     * @param config ServerConfig to populate
+     */
+    @Override
+    public void configureDbConfig(ServerConfig config) {
+
+    }
 }
