--- MinecraftServer.java
+++ MinecraftServer.java
@@ -40,5 +40,5 @@
 public class MinecraftServer implements ICommandListener, Runnable {
     public static Logger logger;
-    public static HashMap playerList;
+    public static HashMap<String, Integer> playerList;
     public NetworkListenThread networkServer;
     public PropertyManager propertyManagerObj;
@@ -51,5 +51,5 @@
     public int percentDone;
     private List playersOnline;
-    private List commands;
+    private List<ServerCommand> commands;
     public EntityTracker entityTracker;
     public boolean onlineMode;
@@ -58,7 +58,27 @@
     private static Random rand;
     
+    public int[] getVersion() {
+    	return new int[] { 1, 1, 0, 5 };
+    }
+    
+    public String getVersionTag() {
+    	return "dev";
+    }
+    
+    public String getVersionString() {
+    	int[] version = getVersion();
+    	StringBuilder str = new StringBuilder();
+    	for (int i = 0; i < version.length; i++) {
+    		if (i != 0) str.append(".");
+    		str.append(version[i]);
+    	}
+    	String tag = getVersionTag();
+    	if (tag != null) str.append("-").append(tag);
+    	return str.toString();
+    }
+    
     static {
         MinecraftServer.logger = Logger.getLogger("Minecraft");
-        MinecraftServer.playerList = new HashMap();
+        MinecraftServer.playerList = new HashMap<>();
         MinecraftServer.rand = new Random(System.currentTimeMillis());
     }
@@ -68,6 +88,6 @@
         this.serverStopped = false;
         this.deathTime = 0;
-        this.playersOnline = (List)new ArrayList();
-        this.commands = Collections.synchronizedList((List)new ArrayList());
+        this.playersOnline = new ArrayList<>();
+        this.commands = Collections.synchronizedList(new ArrayList<>());
         new ThreadSleepForeverServer(this);
     }
@@ -78,5 +98,5 @@
         threadCommandReader1.start();
         ConsoleLogManager.init();
-        MinecraftServer.logger.info("Starting minecraft server version 0.2.1");
+        MinecraftServer.logger.info("Starting minecraft server version " + getVersionString());
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
             MinecraftServer.logger.warning("**** NOT ENOUGH RAM!");
@@ -432,4 +452,77 @@
                     iCommandListener3.addHelpCommandMessage("There's no player by that name online.");
                 }
+                else if (string2.toLowerCase().startsWith("whitelist")) {
+                	final String[] args = string2.substring(Math.min("whitelist".length() + 1, string2.length() - 1)).split(" ");
+                	if (args.length == 0) {
+                		iCommandListener3.addHelpCommandMessage("Whitelist subcommands:");
+                		iCommandListener3.addHelpCommandMessage("   enable              enable whitelist");
+                		iCommandListener3.addHelpCommandMessage("   disable             disable whitelist");
+                		iCommandListener3.addHelpCommandMessage("   add <player>        add player to whitelist");
+                		iCommandListener3.addHelpCommandMessage("   remove <player>     remove player from whitelist");
+                		iCommandListener3.addHelpCommandMessage("   add-ip <ip>         add IP to whitelist");
+                		iCommandListener3.addHelpCommandMessage("   remove-ip <ip>      remove IP from whitelist");
+                	}
+                	else if (args[0].equalsIgnoreCase("enable")) {
+                		this.configManager.enableWhitelist();
+                		this.print(string3, "Whitelist enabled");
+                	}
+                	else if (args[0].equalsIgnoreCase("disable")) {
+                		this.configManager.disableWhitelist();
+                		this.print(string3, "Whitelist disabled");
+                	}
+                	else if (args[0].equalsIgnoreCase("add") && args.length > 1) {
+                		StringBuilder username = new StringBuilder();
+                		for (int i = 1; i < args.length; i++) {
+                			if (i != 1) username.append(" ");
+                			username.append(args[i]);
+                		}
+                		this.print(string3, "Added player \"" + username.toString()
+                			.replaceAll("\\\\", "\\\\")
+                			.replaceAll("\\\\\"", "\\\"") + "\" to whitelist");
+                		this.configManager.whitelistPlayer(username.toString().toLowerCase());
+                	}
+                	else if (args[0].equalsIgnoreCase("remove") && args.length > 1) {
+                		StringBuilder username = new StringBuilder();
+                		for (int i = 1; i < args.length; i++) {
+                			if (i != 1) username.append(" ");
+                			username.append(args[i]);
+                		}
+                		this.print(string3, "Remove player \"" + username.toString()
+                			.replaceAll("\\\\", "\\\\")
+                			.replaceAll("\\\\\"", "\\\"") + "\" from whitelist");
+                		this.configManager.unwhitelistPlayer(username.toString().toLowerCase());
+                	}
+                	else if (args[0].equalsIgnoreCase("add-ip") && args.length > 1) {
+                		StringBuilder username = new StringBuilder();
+                		for (int i = 1; i < args.length; i++) {
+                			if (i != 1) username.append(" ");
+                			username.append(args[i]);
+                		}
+                		this.print(string3, "Added IP \"" + username.toString()
+                			.replaceAll("\\\\", "\\\\")
+                			.replaceAll("\\\\\"", "\\\"") + "\" to whitelist");
+                		this.configManager.whitelistIP(username.toString().toLowerCase());
+                	}
+                	else if (args[0].equalsIgnoreCase("remove-ip") && args.length > 1) {
+                		StringBuilder username = new StringBuilder();
+                		for (int i = 1; i < args.length; i++) {
+                			if (i != 1) username.append(" ");
+                			username.append(args[i]);
+                		}
+                		this.print(string3, "Remove IP \"" + username.toString()
+                			.replaceAll("\\\\", "\\\\")
+                			.replaceAll("\\\\\"", "\\\"") + "\" from whitelist");
+                		this.configManager.unwhitelistIP(username.toString().toLowerCase());
+                	}
+                	else {
+                		iCommandListener3.addHelpCommandMessage("Whitelist subcommands:");
+                		iCommandListener3.addHelpCommandMessage("   enable              enable whitelist");
+                		iCommandListener3.addHelpCommandMessage("   disable             disable whitelist");
+                		iCommandListener3.addHelpCommandMessage("   add <player>        add player to whitelist");
+                		iCommandListener3.addHelpCommandMessage("   remove <player>     remove player from whitelist");
+                		iCommandListener3.addHelpCommandMessage("   add-ip <player>     add IP to whitelist");
+                		iCommandListener3.addHelpCommandMessage("   remove-ip <player>  remove IP from whitelist");
+                	}
+                }
                 else {
                     MinecraftServer.logger.info("Unknown console command. Type \"help\" for help.");
@@ -457,4 +550,5 @@
                 iCommandListener3.addHelpCommandMessage("   list                      lists all currently connected players");
                 iCommandListener3.addHelpCommandMessage("   say <message>             broadcasts a message to all players");
+                iCommandListener3.addHelpCommandMessage("   whitelist                 manage server whitelist");
             }
         }
