--- BlockFire.java
+++ BlockFire.java
@@ -6,5 +6,5 @@
     private int[] chanceToEncourageFire;
     private int[] abilityToCatchFire;
-    
+
     protected BlockFire(final int id, final int blockIndex) {
         super(id, blockIndex, Material.fire);
@@ -19,35 +19,35 @@
         this.setTickOnLoad(true);
     }
-    
+
     private void initializeBlock(final int blockID, final int chance, final int ability) {
         this.chanceToEncourageFire[blockID] = chance;
         this.abilityToCatchFire[blockID] = ability;
     }
-    
+
     @Override
     public AxisAlignedBB getCollisionBoundingBoxFromPool(final World world, final int x, final int y, final int z) {
         return null;
     }
-    
+
     @Override
     public boolean isOpaqueCube() {
         return false;
     }
-    
+
     @Override
     public int getRenderType() {
         return 3;
     }
-    
+
     @Override
     public int quantityDropped(final Random random) {
         return 0;
     }
-    
+
     @Override
     public int tickRate() {
         return 10;
     }
-    
+
     @Override
     public void updateTick(final World world, final int x, final int y, final int z, final Random random) {
@@ -61,9 +61,7 @@
                 world.setBlockWithNotify(x, y, z, 0);
             }
-        }
-        else if (!this.canBlockCatchFire(world, x, y - 1, z) && i6 == 15 && random.nextInt(4) == 0) {
+        } else if (!this.canBlockCatchFire(world, x, y - 1, z) && i6 == 15 && random.nextInt(4) == 0) {
             world.setBlockWithNotify(x, y, z, 0);
-        }
-        else if (i6 % 2 == 0 && i6 > 2) {
+        } else if (i6 % 2 == 0 && i6 > 2) {
             this.tryToCatchBlockOnFire(world, x + 1, y, z, 300, random);
             this.tryToCatchBlockOnFire(world, x - 1, y, z, 300, random);
@@ -90,5 +88,5 @@
         }
     }
-    
+
     private void tryToCatchBlockOnFire(final World world, final int x, final int y, final int z, final int chance, final Random random) {
         final int i7 = this.abilityToCatchFire[world.getBlockId(x, y, z)];
@@ -97,6 +95,5 @@
             if (random.nextInt(2) == 0) {
                 world.setBlockWithNotify(x, y, z, this.blockID);
-            }
-            else {
+            } else {
                 world.setBlockWithNotify(x, y, z, 0);
             }
@@ -106,9 +103,9 @@
         }
     }
-    
+
     private boolean canNeighborBurn(final World world, final int x, final int y, final int z) {
         return this.canBlockCatchFire(world, x + 1, y, z) || this.canBlockCatchFire(world, x - 1, y, z) || this.canBlockCatchFire(world, x, y - 1, z) || this.canBlockCatchFire(world, x, y + 1, z) || this.canBlockCatchFire(world, x, y, z - 1) || this.canBlockCatchFire(world, x, y, z + 1);
     }
-    
+
     private int getChanceOfNeighborsEncouragingFire(final World world, final int x, final int y, final int z) {
         final byte b5 = 0;
@@ -124,24 +121,24 @@
         return i6;
     }
-    
+
     @Override
     public boolean isCollidable() {
         return false;
     }
-    
+
     public boolean canBlockCatchFire(final IBlockAccess blockAccess, final int x, final int y, final int z) {
         return this.chanceToEncourageFire[blockAccess.getBlockId(x, y, z)] > 0;
     }
-    
+
     public int getChanceToEncourageFire(final World world, final int x, final int y, final int z, final int flag) {
         final int i6 = this.chanceToEncourageFire[world.getBlockId(x, y, z)];
         return (i6 > flag) ? i6 : flag;
     }
-    
+
     @Override
     public boolean canPlaceBlockAt(final World world, final int x, final int y, final int z) {
         return world.isBlockNormalCube(x, y - 1, z) || this.canNeighborBurn(world, x, y, z);
     }
-    
+
     @Override
     public void onNeighborBlockChange(final World world, final int x, final int y, final int z, final int flag) {
@@ -150,11 +147,10 @@
         }
     }
-    
+
     @Override
     public void onBlockAdded(final World world, final int x, final int y, final int z) {
         if (!world.isBlockNormalCube(x, y - 1, z) && !this.canNeighborBurn(world, x, y, z)) {
             world.setBlockWithNotify(x, y, z, 0);
-        }
-        else {
+        } else {
             world.scheduleBlockUpdate(x, y, z, this.blockID);
         }
