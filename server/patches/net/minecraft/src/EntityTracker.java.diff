--- EntityTracker.java
+++ EntityTracker.java
@@ -1,27 +1,27 @@
 package net.minecraft.src;
 
+import net.minecraft.server.MinecraftServer;
+
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.HashSet;
-import net.minecraft.server.MinecraftServer;
 import java.util.Set;
 
 public class EntityTracker {
-    private Set trackedEntitySet;
+    private Set<EntityTrackerEntry> trackedEntitySet;
     private MCHashTable trackedEntityHashTable;
     private MinecraftServer mcServer;
     private int maxTrackingDistanceThreshold;
-    
+
     public EntityTracker(final MinecraftServer minecraftServer) {
-        this.trackedEntitySet = (Set)new HashSet();
+        this.trackedEntitySet = (Set) new HashSet();
         this.trackedEntityHashTable = new MCHashTable();
         this.mcServer = minecraftServer;
         this.maxTrackingDistanceThreshold = minecraftServer.configManager.getMaxTrackingDistance();
     }
-    
-    public void trackEntity(final Entity entity1) {
+
+    public synchronized void trackEntity(final Entity entity1) {
         if (entity1 instanceof EntityPlayerMP) {
             this.trackEntity(entity1, 512, 2);
-            final EntityPlayerMP entityPlayerMP2 = (EntityPlayerMP)entity1;
+            final EntityPlayerMP entityPlayerMP2 = (EntityPlayerMP) entity1;
             for (final EntityTrackerEntry entityTrackerEntry4 : this.trackedEntitySet) {
                 if (entityTrackerEntry4.trackedEntity != entityPlayerMP2) {
@@ -29,17 +29,14 @@
                 }
             }
-        }
-        else if (entity1 instanceof EntityItem) {
+        } else if (entity1 instanceof EntityItem) {
             this.trackEntity(entity1, 64, 20);
-        }
-        else if (entity1 instanceof EntityMinecart) {
+        } else if (entity1 instanceof EntityMinecart) {
             this.trackEntity(entity1, 160, 4);
-        }
-        else if (entity1 instanceof IAnimals) {
+        } else if (entity1 instanceof IAnimals) {
             this.trackEntity(entity1, 160, 2);
         }
     }
-    
-    public void trackEntity(final Entity entity1, int i2, final int i3) {
+
+    public synchronized void trackEntity(final Entity entity1, int i2, final int i3) {
         if (i2 > this.maxTrackingDistanceThreshold) {
             i2 = this.maxTrackingDistanceThreshold;
@@ -47,13 +44,14 @@
         if (this.trackedEntityHashTable.containsItem(entity1.entityID)) {
             throw new IllegalStateException("Entity is already tracked!");
+        } else {
+            final EntityTrackerEntry entityTrackerEntry4 = new EntityTrackerEntry(entity1, i2, i3);
+            this.trackedEntitySet.add(entityTrackerEntry4);
+            this.trackedEntityHashTable.addKey(entity1.entityID, entityTrackerEntry4);
+            entityTrackerEntry4.updatePlayerEntities(this.mcServer.getWorldServer(entity1.worldObj.levelName).playerEntities);
         }
-        final EntityTrackerEntry entityTrackerEntry4 = new EntityTrackerEntry(entity1, i2, i3);
-        this.trackedEntitySet.add(entityTrackerEntry4);
-        this.trackedEntityHashTable.addKey(entity1.entityID, entityTrackerEntry4);
-        entityTrackerEntry4.updatePlayerEntities(this.mcServer.worldMngr.playerEntities);
     }
-    
-    public void untrackEntity(final Entity entity1) {
-        final EntityTrackerEntry entityTrackerEntry2 = (EntityTrackerEntry)this.trackedEntityHashTable.removeObject(entity1.entityID);
+
+    public synchronized void untrackEntity(final Entity entity1) {
+        final EntityTrackerEntry entityTrackerEntry2 = (EntityTrackerEntry) this.trackedEntityHashTable.removeObject(entity1.entityID);
         if (entityTrackerEntry2 != null) {
             this.trackedEntitySet.remove(entityTrackerEntry2);
@@ -61,9 +59,9 @@
         }
     }
-    
-    public void updateTrackedEntities() {
+
+    public synchronized void updateTrackedEntities() {
         final ArrayList arrayList1 = new ArrayList();
         for (final EntityTrackerEntry entityTrackerEntry3 : this.trackedEntitySet) {
-            entityTrackerEntry3.updatePlayerList(this.mcServer.worldMngr.playerEntities);
+            entityTrackerEntry3.updatePlayerList(this.mcServer.getWorldServer(entityTrackerEntry3.trackedEntity.worldObj.levelName).playerEntities);
             if (entityTrackerEntry3.playerEntitiesUpdated && entityTrackerEntry3.trackedEntity instanceof EntityPlayerMP) {
                 arrayList1.add(entityTrackerEntry3.trackedEntity);
@@ -71,5 +69,5 @@
         }
         for (int i6 = 0; i6 < arrayList1.size(); ++i6) {
-            final EntityPlayerMP entityPlayerMP7 = (EntityPlayerMP)arrayList1.get(i6);
+            final EntityPlayerMP entityPlayerMP7 = (EntityPlayerMP) arrayList1.get(i6);
             for (final EntityTrackerEntry entityTrackerEntry4 : this.trackedEntitySet) {
                 if (entityTrackerEntry4.trackedEntity != entityPlayerMP7) {
@@ -79,7 +77,7 @@
         }
     }
-    
-    public void sendPacketToTrackedPlayers(final Entity entity1, final Packet packet2) {
-        final EntityTrackerEntry entityTrackerEntry3 = (EntityTrackerEntry)this.trackedEntityHashTable.lookup(entity1.entityID);
+
+    public synchronized void sendPacketToTrackedPlayers(final Entity entity1, final Packet packet2) {
+        final EntityTrackerEntry entityTrackerEntry3 = (EntityTrackerEntry) this.trackedEntityHashTable.lookup(entity1.entityID);
         if (entityTrackerEntry3 != null) {
             entityTrackerEntry3.sendPacketToTrackedPlayers(packet2);
