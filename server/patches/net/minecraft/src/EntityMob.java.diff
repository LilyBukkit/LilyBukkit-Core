--- EntityMob.java
+++ EntityMob.java
@@ -1,13 +1,24 @@
 package net.minecraft.src;
 
+import org.bukkit.Bukkit;
+import org.bukkit.event.entity.EntityDamageByEntityEvent;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+import ru.vladthemountain.lilybukkit.entity.LBEntity;
+import ru.vladthemountain.lilybukkit.entity.LBMonster;
+
 public class EntityMob extends EntityCreature implements IMobs {
     protected int attackStrength;
-    
+
+    private final LBMonster lbMonster; //LilyBukkit
+
     public EntityMob(final World world) {
         super(world);
         this.attackStrength = 2;
         this.health = 20;
+
+        this.lbMonster = new LBMonster(Bukkit.getWorld(world.levelName), this); //LilyBukkit
     }
-    
+
     @Override
     public void onLivingUpdate() {
@@ -18,5 +29,5 @@
         super.onLivingUpdate();
     }
-    
+
     @Override
     public void onUpdate() {
@@ -26,5 +37,5 @@
         }
     }
-    
+
     @Override
     protected Entity findPlayerToAttack() {
@@ -32,7 +43,26 @@
         return (entityPlayer1 != null && this.canEntityBeSeen(entityPlayer1)) ? entityPlayer1 : null;
     }
-    
+
     @Override
-    public boolean attackEntityFrom(final Entity entity, final int damage) {
+    public boolean attackEntityFrom(final Entity entity, int damage) {
+        // LilyBukkit start
+        if (entity instanceof EntityLiving) {
+            // CraftBukkit start - this is here instead of EntityMonster because EntityLiving(s) that aren't monsters
+            // also damage the player in this way. For example, EntitySlime.
+
+            org.bukkit.entity.Entity damager = entity.getBukkitEntity();
+            org.bukkit.entity.Entity damagee = this.getBukkitEntity();
+
+            EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(damager, damagee, EntityDamageEvent.DamageCause.ENTITY_ATTACK, damage);
+            Bukkit.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled() || event.getDamage() == 0) {
+                return false;
+            }
+
+            damage = event.getDamage();
+            // CraftBukkit end
+        }
+        // LilyBukkit end
         if (!super.attackEntityFrom(entity, damage)) {
             return false;
@@ -40,5 +70,19 @@
         if (this.riddenByEntity != entity && this.ridingEntity != entity) {
             if (entity != this) {
-                this.entityToAttack = entity;
+                // CraftBukkit start
+                org.bukkit.entity.Entity bukkitTarget = entity == null ? null : entity.getBukkitEntity();
+
+                EntityTargetEvent event = new EntityTargetEvent(this.getBukkitEntity(), bukkitTarget, EntityTargetEvent.TargetReason.TARGET_ATTACKED_ENTITY);
+                Bukkit.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled()) {
+                    if (event.getTarget() == null) {
+                        this.entityToAttack = null;
+                    } else {
+                        this.entityToAttack = ((LBEntity) event.getTarget()).getHandle();
+                    }
+                }
+                // CraftBukkit end
+                //this.entityToAttack = entity;
             }
             return true;
@@ -46,28 +90,43 @@
         return true;
     }
-    
+
     @Override
     protected void attackEntity(final Entity entity, final float damage) {
         if (damage < 2.5 && entity.boundingBox.maxY > this.boundingBox.minY && entity.boundingBox.minY < this.boundingBox.maxY) {
             this.attackTime = 20;
+            // CraftBukkit start - this is still duplicated here and EntityHuman because it's possible for lastDamage EntityMonster
+            // to damage another EntityMonster, and we want to catch those events.
+            // This does not fire events for slime attacks, av they're not lastDamage EntityMonster.
+            if (entity instanceof EntityLiving && !(entity instanceof EntityMob)) {
+                org.bukkit.entity.Entity damagee = (entity == null) ? null : entity.getBukkitEntity();
+
+                EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(this.getBukkitEntity(), damagee, EntityDamageEvent.DamageCause.ENTITY_ATTACK, this.attackStrength);
+                Bukkit.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled()) {
+                    entity.attackEntityFrom(this, event.getDamage());
+                }
+                return;
+            }
+            // CraftBukkit end
             entity.attackEntityFrom(this, this.attackStrength);
         }
     }
-    
+
     @Override
     protected float getBlockPathWeight(final int x, final int y, final int z) {
         return 0.5f - this.worldObj.getBrightness(x, y, z);
     }
-    
+
     @Override
     public void writeEntityToNBT(final NBTTagCompound nbttagcompound) {
         super.writeEntityToNBT(nbttagcompound);
     }
-    
+
     @Override
     public void readEntityFromNBT(final NBTTagCompound nbttagcompound) {
         super.readEntityFromNBT(nbttagcompound);
     }
-    
+
     @Override
     public boolean getCanSpawnHere() {
@@ -81,3 +140,8 @@
         return i4 <= this.rand.nextInt(8) && super.getCanSpawnHere();
     }
+
+    @Override
+    public org.bukkit.entity.Entity getBukkitEntity() {
+        return this.lbMonster;
+    }
 }
