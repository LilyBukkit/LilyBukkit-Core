--- BlockFluid.java
+++ BlockFluid.java
@@ -5,5 +5,5 @@
 public abstract class BlockFluid extends Block {
     protected int fluidType;
-    
+
     protected BlockFluid(final int id, final Material material) {
         super(id, ((material == Material.lava) ? 14 : 12) * 16 + 13, material);
@@ -17,5 +17,5 @@
         this.setTickOnLoad(true);
     }
-    
+
     public static float getFluidHeightPercent(int i0) {
         if (i0 >= 8) {
@@ -25,14 +25,14 @@
         return f1;
     }
-    
+
     @Override
     public int getBlockTextureFromSide(final int side) {
         return (side != 0 && side != 1) ? (this.blockIndexInTexture + 1) : this.blockIndexInTexture;
     }
-    
+
     protected int getFlowDecay(final World world, final int x, final int y, final int z) {
         return (world.getBlockMaterial(x, y, z) != this.material) ? -1 : world.getBlockMetadata(x, y, z);
     }
-    
+
     protected int getEffectiveFlowDecay(final IBlockAccess blockAccess, final int x, final int y, final int z) {
         if (blockAccess.getBlockMaterial(x, y, z) != this.material) {
@@ -45,15 +45,15 @@
         return i5;
     }
-    
+
     @Override
     public boolean isOpaqueCube() {
         return false;
     }
-    
+
     @Override
     public boolean canCollideCheck(final int i1, final boolean z2) {
         return z2 && i1 == 0;
     }
-    
+
     @Override
     public boolean shouldSideBeRendered(final IBlockAccess blockAccess, final int x, final int y, final int z, final int side) {
@@ -61,25 +61,25 @@
         return material6 != this.material && material6 != Material.ice && (side == 1 || super.shouldSideBeRendered(blockAccess, x, y, z, side));
     }
-    
+
     @Override
     public AxisAlignedBB getCollisionBoundingBoxFromPool(final World world, final int x, final int y, final int z) {
         return null;
     }
-    
+
     @Override
     public int getRenderType() {
         return 4;
     }
-    
+
     @Override
     public int idDropped(final int count, final Random random) {
         return 0;
     }
-    
+
     @Override
     public int quantityDropped(final Random random) {
         return 0;
     }
-    
+
     private Vec3D getFlowVector(final IBlockAccess blockAccess, final int x, final int y, final int z) {
         Vec3D vec3D5 = Vec3D.createVector(0.0, 0.0, 0.0);
@@ -109,6 +109,5 @@
                     }
                 }
-            }
-            else if (i10 >= 0) {
+            } else if (i10 >= 0) {
                 final int i11 = i10 - i6;
                 vec3D5 = vec3D5.addVector((i8 - x) * i11, (y - y) * i11, (i9 - z) * i11);
@@ -148,5 +147,5 @@
         return vec3D5;
     }
-    
+
     @Override
     public void velocityToAddToEntity(final World world, final int x, final int y, final int z, final Entity entity, final Vec3D vector) {
@@ -156,25 +155,25 @@
         vector.zCoord += vec3D7.zCoord;
     }
-    
+
     @Override
     public int tickRate() {
         return (this.material == Material.water) ? 5 : ((this.material == Material.lava) ? 30 : 0);
     }
-    
+
     @Override
     public void updateTick(final World world, final int x, final int y, final int z, final Random random) {
         super.updateTick(world, x, y, z, random);
     }
-    
+
     @Override
     public void onBlockAdded(final World world, final int x, final int y, final int z) {
         this.checkForHarden(world, x, y, z);
     }
-    
+
     @Override
     public void onNeighborBlockChange(final World world, final int x, final int y, final int z, final int flag) {
         this.checkForHarden(world, x, y, z);
     }
-    
+
     private void checkForHarden(final World world, final int x, final int y, final int z) {
         if (world.getBlockId(x, y, z) == this.blockID && this.material == Material.lava) {
@@ -199,6 +198,5 @@
                 if (i6 == 0) {
                     world.setBlockWithNotify(x, y, z, Block.obsidian.blockID);
-                }
-                else if (i6 <= 4) {
+                } else if (i6 <= 4) {
                     world.setBlockWithNotify(x, y, z, Block.cobblestone.blockID);
                 }
@@ -207,7 +205,7 @@
         }
     }
-    
+
     protected void triggerLavaMixEffects(final World world, final int x, final int y, final int z) {
-        world.playSoundEffect((double)(x + 0.5f), (double)(y + 0.5f), (double)(z + 0.5f), "random.fizz", 0.5f, 2.6f + (world.rand.nextFloat() - world.rand.nextFloat()) * 0.8f);
+        world.playSoundEffect((double) (x + 0.5f), (double) (y + 0.5f), (double) (z + 0.5f), "random.fizz", 0.5f, 2.6f + (world.rand.nextFloat() - world.rand.nextFloat()) * 0.8f);
         for (int i5 = 0; i5 < 8; ++i5) {
             world.spawnParticle("largesmoke", x + Math.random(), y + 1.2, z + Math.random(), 0.0, 0.0, 0.0);
