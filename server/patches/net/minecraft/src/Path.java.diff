--- Path.java
+++ Path.java
@@ -4,10 +4,10 @@
     private PathPoint[] pathPoints;
     private int count;
-    
+
     public Path() {
         this.pathPoints = new PathPoint[1024];
         this.count = 0;
     }
-    
+
     public PathPoint addPoint(final PathPoint pathPoint) {
         if (pathPoint.index >= 0) {
@@ -24,9 +24,9 @@
         return pathPoint;
     }
-    
+
     public void clearPath() {
         this.count = 0;
     }
-    
+
     public PathPoint dequeue() {
         final PathPoint pathPoint1 = this.pathPoints[0];
@@ -44,5 +44,5 @@
         return pathPoint1;
     }
-    
+
     public void changeDistance(final PathPoint pathPoint, final float distanceToTarget) {
         final float f3 = pathPoint.distanceToTarget;
@@ -50,10 +50,9 @@
         if (distanceToTarget < f3) {
             this.sortBack(pathPoint.index);
-        }
-        else {
+        } else {
             this.sortForward(pathPoint.index);
         }
     }
-    
+
     private void sortBack(int index) {
         final PathPoint pathPoint2 = this.pathPoints[index];
@@ -72,5 +71,5 @@
         pathPoint2.index = index;
     }
-    
+
     private void sortForward(int index) {
         final PathPoint pathPoint2 = this.pathPoints[index];
@@ -89,6 +88,5 @@
                 pathPoint4 = null;
                 f5 = Float.POSITIVE_INFINITY;
-            }
-            else {
+            } else {
                 pathPoint4 = this.pathPoints[i5];
                 f5 = pathPoint4.distanceToTarget;
@@ -101,6 +99,5 @@
                 pathPoint3.index = index;
                 index = i4;
-            }
-            else {
+            } else {
                 if (f5 >= f3) {
                     break;
@@ -114,5 +111,5 @@
         pathPoint2.index = index;
     }
-    
+
     public boolean isPathEmpty() {
         return this.count == 0;
