--- ServerConfigurationManager.java
+++ ServerConfigurationManager.java
@@ -1,46 +1,60 @@
 package net.minecraft.src;
 
-import java.util.Iterator;
-import java.io.Writer;
-import java.io.PrintWriter;
-import java.io.FileWriter;
-import java.io.Reader;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+import org.bukkit.event.player.PlayerJoinEvent;
+import org.bukkit.event.player.PlayerLoginEvent;
+import org.bukkit.event.player.PlayerLoginEvent.Result;
+import org.bukkit.event.player.PlayerQuitEvent;
+
 import java.io.BufferedReader;
+import java.io.File;
 import java.io.FileReader;
+import java.io.FileWriter;
 import java.io.IOException;
-import java.util.HashSet;
+import java.io.PrintWriter;
 import java.util.ArrayList;
-import java.io.File;
-import java.util.Set;
-import net.minecraft.server.MinecraftServer;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 import java.util.logging.Logger;
 
 public class ServerConfigurationManager {
     public static Logger logger;
-    public List playerEntities;
+    public List<EntityPlayerMP> playerEntities;
     private MinecraftServer mcServer;
     private PlayerManager playerManagerObj;
-    private int maxPlayers;
-    private Set<String> bannedPlayers;
-    private Set<String> bannedIPs;
-    private Set<String> ops;
+    public int maxPlayers;
+    public Set<String> bannedPlayers;
+    public Set<String> bannedIPs;
+    public Set<String> ops;
     private Set<String> authenticatedPlayers;
+    public Set<String> whitelistedPlayers;
+    public Set<String> whitelistedIPs;
+    public boolean whitelistEnabled;
+    public boolean enforceRosepad;
     private File bannedPlayersFile;
     private File ipBanFile;
     private File opFile;
     private File authFile;
+    private File whitelistFile;
+    private File whitelistIPsFile;
     private PlayerNBTManager playerNBTManagerObj;
-    
+
     static {
         ServerConfigurationManager.logger = Logger.getLogger("Minecraft");
     }
-    
+
     public ServerConfigurationManager(final MinecraftServer minecraftServer) {
-        this.playerEntities = (List)new ArrayList();
-        this.bannedPlayers = (Set<String>)new HashSet();
-        this.bannedIPs = (Set<String>)new HashSet();
-        this.ops = (Set<String>)new HashSet();
-        this.authenticatedPlayers = (Set<String>)new HashSet();
+        this.playerEntities = new ArrayList<>();
+        this.bannedPlayers = new HashSet<>();
+        this.bannedIPs = new HashSet<>();
+        this.ops = new HashSet<>();
+        this.authenticatedPlayers = new HashSet<>();
+        this.whitelistedPlayers = new HashSet<>();
+        this.whitelistedIPs = new HashSet<>();
+        this.whitelistEnabled = false;
         this.mcServer = minecraftServer;
         this.bannedPlayersFile = minecraftServer.getFile("banned-players.txt");
@@ -48,80 +62,132 @@
         this.opFile = minecraftServer.getFile("ops.txt");
         this.authFile = minecraftServer.getFile("authed-players.txt");
+        this.whitelistFile = minecraftServer.getFile("whitelist.txt");
+        this.whitelistIPsFile = minecraftServer.getFile("whitelist-ips.txt");
         this.playerManagerObj = new PlayerManager(minecraftServer);
         this.maxPlayers = minecraftServer.propertyManagerObj.getIntProperty("max-players", 20);
+        this.whitelistEnabled = minecraftServer.propertyManagerObj.getBooleanProperty("whitelist", false);
+        this.enforceRosepad = minecraftServer.propertyManagerObj.getBooleanProperty("enforce-rosepad", false);
         this.readBannedPlayers();
         this.loadBannedList();
         this.loadOps();
         this.loadAuthedPlayers();
+        this.loadWhitelistedPlayers();
+        this.loadWhitelistedIPs();
         this.writeBannedPlayers();
         this.saveBannedList();
         this.saveOps();
         this.saveAuthedPlayers();
+        this.saveWhitelistedPlayers();
+        this.saveWhitelistedIPs();
     }
-    
+
     public void setPlayerManager(final WorldServer worldServer1) {
         this.playerNBTManagerObj = new PlayerNBTManager(new File(worldServer1.saveDirectory, "players"));
     }
-    
+
     public int getMaxTrackingDistance() {
         return this.playerManagerObj.getMaxTrackingDistance();
     }
-    
+
     public void playerLoggedIn(final EntityPlayerMP entityPlayerMP1) {
         this.playerEntities.add(entityPlayerMP1);
         this.playerNBTManagerObj.readPlayerNBT(entityPlayerMP1);
-        this.mcServer.worldMngr.chunkProviderServer.loadChunk((int)entityPlayerMP1.posX >> 4, (int)entityPlayerMP1.posZ >> 4);
+        this.mcServer.worldMngr.chunkProviderServer.loadChunk((int) entityPlayerMP1.posX >> 4, (int) entityPlayerMP1.posZ >> 4);
         while (this.mcServer.worldMngr.getCollidingBoundingBoxes(entityPlayerMP1, entityPlayerMP1.boundingBox).size() != 0) {
             entityPlayerMP1.setPosition(entityPlayerMP1.posX, entityPlayerMP1.posY + 1.0, entityPlayerMP1.posZ);
         }
-        this.mcServer.worldMngr.spawnEntityInWorld(entityPlayerMP1);
+
+        // CraftBukkit start
+        PlayerJoinEvent playerJoinEvent = new PlayerJoinEvent((Player) entityPlayerMP1.getBukkitEntity(), "\u00A7e" + entityPlayerMP1.username + " joined the game.");
+        Bukkit.getPluginManager().callEvent(playerJoinEvent);
+
+        String joinMessage = playerJoinEvent.getJoinMessage();
+
+        if (joinMessage != null) {
+            this.mcServer.configManager.sendPacketToAllPlayers(new Packet3Chat(joinMessage));
+        }
+        // CraftBukkit end
+
+        this.mcServer.worldMngr.spawnEntityInWorld(entityPlayerMP1, SpawnReason.NATURAL);
         this.playerManagerObj.addPlayer(entityPlayerMP1);
     }
-    
+
     public void serverUpdateMountedMovingPlayer(final EntityPlayerMP entityPlayerMP1) {
         this.playerManagerObj.updateMountedMovingPlayer(entityPlayerMP1);
     }
-    
+
     public void playerLoggedOut(final EntityPlayerMP entityPlayerMP1) {
+        // CraftBukkit start
+        // Quitting must be before we do final save of data, in case plugins need to modify it
         this.playerManagerObj.removePlayer(entityPlayerMP1);
+        PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent((Player) entityPlayerMP1.getBukkitEntity(), "\u00A7e" + entityPlayerMP1.username + " left the game.");
+        Bukkit.getServer().getPluginManager().callEvent(playerQuitEvent);
+        // CraftBukkit end
+
+        this.playerManagerObj.removePlayer(entityPlayerMP1);
         this.playerNBTManagerObj.writePlayerNBT(entityPlayerMP1);
         this.mcServer.worldMngr.setEntityDead(entityPlayerMP1);
         this.playerEntities.remove(entityPlayerMP1);
     }
-    
+
     private static boolean isValidName(final String username) {
-        return username.matches("[a-zA-Z0-9_ \\u0107 \\u015b]*");
+        return username.matches("[a-zA-Z0-9_ \\u0107 \\u015b]{2,32}");
     }
-    
+
     public EntityPlayerMP login(final NetLoginHandler netLoginHandler1, final String username, final String password, final boolean authed) {
+        // LilyBukkit start
+        EntityPlayerMP entity = new EntityPlayerMP(this.mcServer, this.mcServer.worldMngr, username, new ItemInWorldManager(this.mcServer.worldMngr));
+        Player player = (Player) entity.getBukkitEntity();
+        PlayerLoginEvent event = new PlayerLoginEvent(player);
+        // LilyBukkit end
+
+        String ip = netLoginHandler1.netManager.getRemoteAddress().toString();
+        ip = ip.substring(ip.indexOf("/") + 1);
+        ip = ip.substring(0, ip.indexOf(":"));
+
+        // Rosepad start
+        List<ULPPExtension> extList = ULPPManager.getProtocolExtensions(password);
+        ULPPExtension ext = null;
+        for (ULPPExtension ext1 : extList) {
+            if (ext1.getName().equals("ROSE")) {
+                ext = ext1;
+            }
+        }
+        // Rosepad end
+
         if (this.bannedPlayers.contains(username.trim())) {
-            netLoginHandler1.kickUser("You are banned from this server!");
-            return null;
+            event.disallow(Result.KICK_BANNED, "You are banned from this server!"); // LilyBukkit
+        } else if (!this.whitelistedPlayers.contains(username.trim().toLowerCase()) && this.whitelistEnabled) {
+            event.disallow(Result.KICK_WHITELIST, "You are not whitelisted on this server!"); // LilyBukkit
+        } else if (this.bannedIPs.contains(ip)) {
+            event.disallow(Result.KICK_BANNED, "Your IP address is banned from this server!"); // LilyBukkit
+        } else if (!this.whitelistedIPs.contains(ip.trim().toLowerCase()) && this.whitelistedIPs.size() > 0 && this.whitelistEnabled) {
+            event.disallow(Result.KICK_WHITELIST, "Your IP is not whitelisted on this server!"); // LilyBukkit
+        } else if (this.playerEntities.size() >= this.maxPlayers) {
+            event.disallow(Result.KICK_FULL, "The server is full!"); // LilyBukkit
+        } else if (!isValidName(username)) {
+            event.disallow(Result.KICK_USERNAME, "Your username has invalid characters!"); // LilyBukkit
+        } else if ((ext == null || ext.getVersion() == 0) && this.enforceRosepad) {
+            event.disallow(Result.KICK_ROSEPAD, "This server requires client to support scripts"); // LilyBukkit
+        } else if (ext != null && ext.getVersion() != 1) {
+            event.disallow(Result.KICK_ROSEPAD, "This server requires Rosepad " + MinecraftServer.getVersionString() + " to join"); // LilyBukkit
+        } else if (!authed && this.isAuthed(username)) {
+            event.disallow(Result.KICK_ULPP, "This user is authenticated! Log in using Rosepad >=1.1.0.2-beta to authenticate."); // LilyBukkit
+        } else {
+            event.disallow(Result.ALLOWED, ip);
         }
-        String string4 = netLoginHandler1.netManager.getRemoteAddress().toString();
-        string4 = string4.substring(string4.indexOf("/") + 1);
-        string4 = string4.substring(0, string4.indexOf(":"));
-        if (this.bannedIPs.contains(string4)) {
-            netLoginHandler1.kickUser("Your IP address is banned from this server!");
+
+        // LilyBukkit start
+        Bukkit.getServer().getPluginManager().callEvent(event);
+        if (event.getResult() != Result.ALLOWED) {
+            netLoginHandler1.kickUser(event.getKickMessage());
             return null;
         }
-        if (this.playerEntities.size() >= this.maxPlayers) {
-            netLoginHandler1.kickUser("The server is full!");
-            return null;
-        }
-        if (!isValidName(username)) {
-            netLoginHandler1.kickUser("Your username has invalid characters!");
-            return null;
-        }
-        if (!authed && this.isAuthed(username)) {
-            netLoginHandler1.kickUser("This user is authenticated! Log in using LPUJ >=v1.0.6 to authenticate.");
-            return null;
-        }
-        for (int i5 = 0; i5 < this.playerEntities.size(); ++i5) {
-            final EntityPlayerMP entityPlayerMP6 = (EntityPlayerMP)this.playerEntities.get(i5);
+        // LilyBukkit end
+
+        for (final EntityPlayerMP entityPlayerMP6 : this.playerEntities) {
             if (entityPlayerMP6.username.equals(username)) {
                 if (!this.mcServer.ULPPOnlineMode) {
                     netLoginHandler1.kickUser("A user with this name is already logged in!");
-                    return null;
                 }
                 entityPlayerMP6.playerNetServerHandler.kickPlayer("You logged in from another location");
@@ -131,47 +197,48 @@
             this.authPlayer(username);
         }
-        return new EntityPlayerMP(this.mcServer, this.mcServer.worldMngr, username, new ItemInWorldManager(this.mcServer.worldMngr));
+        netLoginHandler1.netManager.addToSendQueue(new Packet130RosepadMeta().Default());
+        //return new EntityPlayerMP(this.mcServer, this.mcServer.worldMngr, username, new ItemInWorldManager(this.mcServer.worldMngr));
+        return entity; // LilyBukkit
     }
-    
+
     public void onTick() throws IOException {
         this.playerManagerObj.updatePlayerInstances();
     }
-    
+
     public void markBlockNeedsUpdate(final int i1, final int i2, final int i3) {
         this.playerManagerObj.markBlockNeedsUpdate(i1, i2, i3);
     }
-    
+
     public void sendPacketToAllPlayers(final Packet packet1) {
-        for (int i2 = 0; i2 < this.playerEntities.size(); ++i2) {
-            final EntityPlayerMP entityPlayerMP3 = (EntityPlayerMP)this.playerEntities.get(i2);
+        for (final EntityPlayerMP entityPlayerMP3 : this.playerEntities) {
             entityPlayerMP3.playerNetServerHandler.sendPacket(packet1);
         }
     }
-    
+
     public String getPlayerList() {
-        String string1 = "";
+        StringBuilder string1 = new StringBuilder();
         for (int i2 = 0; i2 < this.playerEntities.size(); ++i2) {
             if (i2 > 0) {
-                string1 = String.valueOf(string1) + ", ";
+                string1.append(", ");
             }
-            string1 = String.valueOf(string1) + ((EntityPlayerMP)this.playerEntities.get(i2)).username;
+            string1.append(this.playerEntities.get(i2).username);
         }
-        return string1;
+        return string1.toString();
     }
-    
+
     public void banPlayer(final String string1) {
         this.bannedPlayers.add(string1);
         this.writeBannedPlayers();
     }
-    
+
     public void pardonPlayer(final String string1) {
         this.bannedPlayers.remove(string1);
         this.writeBannedPlayers();
     }
-    
+
     private void readBannedPlayers() {
         try {
             this.bannedPlayers.clear();
-            final BufferedReader bufferedReader1 = new BufferedReader((Reader)new FileReader(this.bannedPlayersFile));
+            BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.bannedPlayersFile));
             String string2 = "";
             while ((string2 = bufferedReader1.readLine()) != null) {
@@ -179,37 +246,115 @@
             }
             bufferedReader1.close();
+        } catch (Exception exception3) {
+            ServerConfigurationManager.logger.warning("Failed to load ban list: " + exception3);
         }
-        catch (Exception exception3) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to load ban list: ").append(exception3).toString());
-        }
     }
-    
+
     private void writeBannedPlayers() {
         try {
-            final PrintWriter printWriter1 = new PrintWriter((Writer)new FileWriter(this.bannedPlayersFile, false));
+            final PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.bannedPlayersFile, false));
             for (final String string3 : this.bannedPlayers) {
                 printWriter1.println(string3);
             }
             printWriter1.close();
+        } catch (Exception exception4) {
+            ServerConfigurationManager.logger.warning("Failed to save ban list: " + exception4);
         }
-        catch (Exception exception4) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to save ban list: ").append(exception4).toString());
+    }
+
+    private void loadWhitelistedPlayers() {
+        try {
+            this.whitelistedPlayers.clear();
+            final BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.whitelistFile));
+            String string2 = "";
+            while ((string2 = bufferedReader1.readLine()) != null) {
+                this.whitelistedPlayers.add(string2.trim().toLowerCase());
+            }
+            bufferedReader1.close();
+        } catch (Exception exception3) {
+            ServerConfigurationManager.logger.warning("Failed to load player whitelist: " + exception3);
         }
     }
-    
+
+    private void saveWhitelistedPlayers() {
+        try {
+            final PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.whitelistFile, false));
+            for (final String string3 : this.whitelistedPlayers) {
+                printWriter1.println(string3);
+            }
+            printWriter1.close();
+        } catch (Exception exception4) {
+            ServerConfigurationManager.logger.warning("Failed to save player whitelist: " + exception4);
+        }
+    }
+
+    public void whitelistPlayer(final String string1) {
+        this.whitelistedPlayers.add(string1.toLowerCase());
+        this.saveWhitelistedPlayers();
+    }
+
+    public void unwhitelistPlayer(final String string1) {
+        this.whitelistedPlayers.remove(string1.toLowerCase());
+        this.saveWhitelistedPlayers();
+    }
+
+    private void loadWhitelistedIPs() {
+        try {
+            this.whitelistedIPs.clear();
+            final BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.whitelistIPsFile));
+            String string2 = "";
+            while ((string2 = bufferedReader1.readLine()) != null) {
+                this.whitelistedIPs.add(string2.trim().toLowerCase());
+            }
+            bufferedReader1.close();
+        } catch (Exception exception3) {
+            ServerConfigurationManager.logger.warning("Failed to load ip whitelist: " + exception3);
+        }
+    }
+
+    private void saveWhitelistedIPs() {
+        try {
+            final PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.whitelistIPsFile, false));
+            for (final String string3 : this.whitelistedIPs) {
+                printWriter1.println(string3);
+            }
+            printWriter1.close();
+        } catch (Exception exception4) {
+            ServerConfigurationManager.logger.warning("Failed to save ip whitelist: " + exception4);
+        }
+    }
+
+    public void whitelistIP(final String string1) {
+        this.whitelistedIPs.add(string1.toLowerCase());
+        this.saveWhitelistedIPs();
+    }
+
+    public void unwhitelistIP(final String string1) {
+        this.whitelistedIPs.remove(string1.toLowerCase());
+        this.saveWhitelistedIPs();
+    }
+
+    public void enableWhitelist() {
+        this.whitelistEnabled = true;
+    }
+
+    public void disableWhitelist() {
+        this.whitelistEnabled = false;
+    }
+
     public void banIP(final String string1) {
         this.bannedIPs.add(string1);
         this.saveBannedList();
     }
-    
+
     public void pardonIP(final String string1) {
         this.bannedIPs.remove(string1);
         this.saveBannedList();
     }
-    
+
     private void loadBannedList() {
         try {
             this.bannedIPs.clear();
-            final BufferedReader bufferedReader1 = new BufferedReader((Reader)new FileReader(this.ipBanFile));
+            final BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.ipBanFile));
             String string2 = "";
             while ((string2 = bufferedReader1.readLine()) != null) {
@@ -217,46 +362,44 @@
             }
             bufferedReader1.close();
+        } catch (Exception exception3) {
+            ServerConfigurationManager.logger.warning("Failed to load ip ban list: " + exception3);
         }
-        catch (Exception exception3) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to load ip ban list: ").append(exception3).toString());
-        }
     }
-    
+
     private void saveBannedList() {
         try {
-            final PrintWriter printWriter1 = new PrintWriter((Writer)new FileWriter(this.ipBanFile, false));
+            final PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.ipBanFile, false));
             for (final String string3 : this.bannedIPs) {
                 printWriter1.println(string3);
             }
             printWriter1.close();
+        } catch (Exception exception4) {
+            ServerConfigurationManager.logger.warning("Failed to save ip ban list: " + exception4);
         }
-        catch (Exception exception4) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to save ip ban list: ").append(exception4).toString());
-        }
     }
-    
+
     public void opPlayer(final String string1) {
         this.ops.add(string1);
         this.saveOps();
     }
-    
+
     public void deopPlayer(final String string1) {
         this.ops.remove(string1);
         this.saveOps();
     }
-    
+
     public void authPlayer(final String username) {
         this.authenticatedPlayers.add(username);
         this.saveAuthedPlayers();
     }
-    
+
     public boolean isAuthed(final String username) {
         return this.authenticatedPlayers.contains(username.trim());
     }
-    
+
     private void loadOps() {
         try {
             this.ops.clear();
-            final BufferedReader bufferedReader1 = new BufferedReader((Reader)new FileReader(this.opFile));
+            final BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.opFile));
             String string2 = "";
             while ((string2 = bufferedReader1.readLine()) != null) {
@@ -264,27 +407,25 @@
             }
             bufferedReader1.close();
+        } catch (Exception exception3) {
+            ServerConfigurationManager.logger.warning("Failed to load op list: " + exception3);
         }
-        catch (Exception exception3) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to load op list: ").append(exception3).toString());
-        }
     }
-    
+
     private void saveOps() {
         try {
-            final PrintWriter printWriter1 = new PrintWriter((Writer)new FileWriter(this.opFile, false));
+            final PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.opFile, false));
             for (final String string3 : this.ops) {
                 printWriter1.println(string3);
             }
             printWriter1.close();
+        } catch (Exception exception4) {
+            ServerConfigurationManager.logger.warning("Failed to save op list: " + exception4);
         }
-        catch (Exception exception4) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to save op list: ").append(exception4).toString());
-        }
     }
-    
+
     private void loadAuthedPlayers() {
         try {
             this.authenticatedPlayers.clear();
-            final BufferedReader bufferedReader1 = new BufferedReader((Reader)new FileReader(this.authFile));
+            final BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.authFile));
             String string2 = "";
             while ((string2 = bufferedReader1.readLine()) != null) {
@@ -292,30 +433,27 @@
             }
             bufferedReader1.close();
+        } catch (Exception exception3) {
+            ServerConfigurationManager.logger.warning("Failed to load authenticated player list: " + exception3);
         }
-        catch (Exception exception3) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to load authenticated player list: ").append(exception3).toString());
-        }
     }
-    
+
     private void saveAuthedPlayers() {
         try {
-            final PrintWriter printWriter1 = new PrintWriter((Writer)new FileWriter(this.authFile, false));
+            final PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.authFile, false));
             for (final String string3 : this.authenticatedPlayers) {
                 printWriter1.println(string3);
             }
             printWriter1.close();
+        } catch (Exception exception4) {
+            ServerConfigurationManager.logger.warning("Failed to save authenticated player list: " + exception4);
         }
-        catch (Exception exception4) {
-            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to save authenticated player list: ").append(exception4).toString());
-        }
     }
-    
+
     public boolean isOp(final String string1) {
         return this.ops.contains(string1.trim());
     }
-    
+
     public EntityPlayerMP getPlayerEntity(final String string1) {
-        for (int i2 = 0; i2 < this.playerEntities.size(); ++i2) {
-            final EntityPlayerMP entityPlayerMP3 = (EntityPlayerMP)this.playerEntities.get(i2);
+        for (final EntityPlayerMP entityPlayerMP3 : this.playerEntities) {
             if (entityPlayerMP3.username.equals(string1)) {
                 return entityPlayerMP3;
@@ -324,5 +462,5 @@
         return null;
     }
-    
+
     public void sendChatMessageToPlayer(final String string1, final String string2) {
         final EntityPlayerMP entityPlayerMP3 = this.getPlayerEntity(string1);
@@ -331,9 +469,8 @@
         }
     }
-    
+
     public void sendChatMessageToAllOps(final String string1) {
         final Packet3Chat packet3Chat2 = new Packet3Chat(string1);
-        for (int i3 = 0; i3 < this.playerEntities.size(); ++i3) {
-            final EntityPlayerMP entityPlayerMP4 = (EntityPlayerMP)this.playerEntities.get(i3);
+        for (final EntityPlayerMP entityPlayerMP4 : this.playerEntities) {
             if (this.isOp(entityPlayerMP4.username)) {
                 entityPlayerMP4.playerNetServerHandler.sendPacket(packet3Chat2);
@@ -341,5 +478,5 @@
         }
     }
-    
+
     public boolean sendPacketToPlayer(final String string1, final Packet packet2) {
         final EntityPlayerMP entityPlayerMP3 = this.getPlayerEntity(string1);
@@ -350,12 +487,12 @@
         return false;
     }
-    
+
     public void sentTileEntityToPlayer(final int i1, final int i2, final int i3, final TileEntity tileEntity4) {
         this.playerManagerObj.sendTileEntity(new Packet59ComplexEntity(i1, i2, i3, tileEntity4), i1, i2, i3);
     }
-    
+
     public void savePlayerStates() {
-        for (int i1 = 0; i1 < this.playerEntities.size(); ++i1) {
-            this.playerNBTManagerObj.writePlayerNBT((EntityPlayerMP)this.playerEntities.get(i1));
+        for (EntityPlayerMP playerEntity : this.playerEntities) {
+            this.playerNBTManagerObj.writePlayerNBT(playerEntity);
         }
     }
