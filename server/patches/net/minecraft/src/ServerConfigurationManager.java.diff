--- ServerConfigurationManager.java
+++ ServerConfigurationManager.java
@@ -1,18 +1,11 @@
 package net.minecraft.src;
 
-import java.util.Iterator;
-import java.io.Writer;
-import java.io.PrintWriter;
-import java.io.FileWriter;
-import java.io.Reader;
-import java.io.BufferedReader;
-import java.io.FileReader;
-import java.io.IOException;
-import java.util.HashSet;
-import java.util.ArrayList;
-import java.io.File;
-import java.util.Set;
 import net.minecraft.server.MinecraftServer;
+
+import java.io.*;
+import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 import java.util.logging.Logger;
 
@@ -23,47 +16,62 @@
     private PlayerManager playerManagerObj;
     private int maxPlayers;
-    private Set bannedPlayers;
-    private Set bannedIPs;
-    private Set ops;
+    private Set<String> bannedPlayers;
+    private Set<String> bannedIPs;
+    private Set<String> ops;
+    private Set<String> whitelistedPlayers;
+    private Set<String> whitelistedIPs;
+    private boolean whitelistEnabled;
     private File bannedPlayersFile;
     private File ipBanFile;
     private File opFile;
+    private File whitelistFile;
+    private File whitelistIPsFile;
     private PlayerNBTManager playerNBTManagerObj;
-    
+
     static {
         ServerConfigurationManager.logger = Logger.getLogger("Minecraft");
     }
-    
+
     public ServerConfigurationManager(final MinecraftServer minecraftServer) {
-        this.playerEntities = (List)new ArrayList();
-        this.bannedPlayers = (Set)new HashSet();
-        this.bannedIPs = (Set)new HashSet();
-        this.ops = (Set)new HashSet();
+        this.playerEntities = (List) new ArrayList();
+        this.bannedPlayers = (Set) new HashSet();
+        this.bannedIPs = (Set) new HashSet();
+        this.ops = (Set) new HashSet();
+        this.whitelistedPlayers = new HashSet<>();
+        this.whitelistedIPs = new HashSet<>();
+        this.whitelistEnabled = false;
         this.mcServer = minecraftServer;
         this.bannedPlayersFile = minecraftServer.getFile("banned-players.txt");
         this.ipBanFile = minecraftServer.getFile("banned-ips.txt");
         this.opFile = minecraftServer.getFile("ops.txt");
+        this.whitelistFile = minecraftServer.getFile("whitelist.txt");
+        this.whitelistIPsFile = minecraftServer.getFile("whitelist-ips.txt");
         this.playerManagerObj = new PlayerManager(minecraftServer);
         this.maxPlayers = minecraftServer.propertyManagerObj.getIntProperty("max-players", 20);
+        this.whitelistEnabled = minecraftServer.propertyManagerObj.getBooleanProperty("whitelist", false);
         this.readBannedPlayers();
         this.loadBannedList();
         this.loadOps();
+        this.loadWhitelistedPlayers();
+        this.loadWhitelistedIPs();
         this.writeBannedPlayers();
         this.saveBannedList();
         this.saveOps();
+        this.saveWhitelistedPlayers();
+        this.saveWhitelistedIPs();
     }
-    
+
     public void setPlayerManager(final WorldServer worldServer1) {
         this.playerNBTManagerObj = new PlayerNBTManager(new File(worldServer1.saveDirectory, "players"));
     }
-    
+
     public int getMaxTrackingDistance() {
         return this.playerManagerObj.getMaxTrackingDistance();
     }
-    
+
     public void playerLoggedIn(final EntityPlayerMP entityPlayerMP1) {
         this.playerEntities.add(entityPlayerMP1);
         this.playerNBTManagerObj.readPlayerNBT(entityPlayerMP1);
-        this.mcServer.worldMngr.chunkProviderServer.loadChunk((int)entityPlayerMP1.posX >> 4, (int)entityPlayerMP1.posZ >> 4);
+        this.mcServer.worldMngr.chunkProviderServer.loadChunk((int) entityPlayerMP1.posX >> 4, (int) entityPlayerMP1.posZ >> 4);
         while (this.mcServer.worldMngr.getCollidingBoundingBoxes(entityPlayerMP1, entityPlayerMP1.boundingBox).size() != 0) {
             entityPlayerMP1.setPosition(entityPlayerMP1.posX, entityPlayerMP1.posY + 1.0, entityPlayerMP1.posZ);
@@ -72,9 +80,9 @@
         this.playerManagerObj.addPlayer(entityPlayerMP1);
     }
-    
+
     public void serverUpdateMountedMovingPlayer(final EntityPlayerMP entityPlayerMP1) {
         this.playerManagerObj.updateMountedMovingPlayer(entityPlayerMP1);
     }
-    
+
     public void playerLoggedOut(final EntityPlayerMP entityPlayerMP1) {
         this.playerManagerObj.removePlayer(entityPlayerMP1);
@@ -83,5 +91,5 @@
         this.playerEntities.remove(entityPlayerMP1);
     }
-    
+
     public EntityPlayerMP login(final NetLoginHandler netLoginHandler1, final String string2, final String string3) {
         if (this.bannedPlayers.contains(string2.trim().toLowerCase())) {
@@ -89,4 +97,8 @@
             return null;
         }
+        if (!this.whitelistedPlayers.contains(string2.trim().toLowerCase()) && this.whitelistEnabled) {
+            netLoginHandler1.kickUser("You are not whitelisted on this server!");
+            return null;
+        }
         String string4 = netLoginHandler1.netManager.getRemoteAddress().toString();
         string4 = string4.substring(string4.indexOf("/") + 1);
@@ -96,4 +108,8 @@
             return null;
         }
+        if (!this.whitelistedIPs.contains(string4.trim().toLowerCase()) && this.whitelistedIPs.size() > 0 && this.whitelistEnabled) {
+            netLoginHandler1.kickUser("You are not whitelisted on this server!");
+            return null;
+        }
         if (this.playerEntities.size() >= this.maxPlayers) {
             netLoginHandler1.kickUser("The server is full!");
@@ -101,5 +117,5 @@
         }
         for (int i5 = 0; i5 < this.playerEntities.size(); ++i5) {
-            final EntityPlayerMP entityPlayerMP6 = (EntityPlayerMP)this.playerEntities.get(i5);
+            final EntityPlayerMP entityPlayerMP6 = (EntityPlayerMP) this.playerEntities.get(i5);
             if (entityPlayerMP6.username.equalsIgnoreCase(string2)) {
                 if (!this.mcServer.onlineMode) {
@@ -112,20 +128,20 @@
         return new EntityPlayerMP(this.mcServer, this.mcServer.worldMngr, string2, new ItemInWorldManager(this.mcServer.worldMngr));
     }
-    
+
     public void onTick() throws IOException {
         this.playerManagerObj.updatePlayerInstances();
     }
-    
+
     public void markBlockNeedsUpdate(final int i1, final int i2, final int i3) {
         this.playerManagerObj.markBlockNeedsUpdate(i1, i2, i3);
     }
-    
+
     public void sendPacketToAllPlayers(final Packet packet1) {
         for (int i2 = 0; i2 < this.playerEntities.size(); ++i2) {
-            final EntityPlayerMP entityPlayerMP3 = (EntityPlayerMP)this.playerEntities.get(i2);
+            final EntityPlayerMP entityPlayerMP3 = (EntityPlayerMP) this.playerEntities.get(i2);
             entityPlayerMP3.playerNetServerHandler.sendPacket(packet1);
         }
     }
-    
+
     public String getPlayerList() {
         String string1 = "";
@@ -134,23 +150,23 @@
                 string1 = String.valueOf(string1) + ", ";
             }
-            string1 = String.valueOf(string1) + ((EntityPlayerMP)this.playerEntities.get(i2)).username;
+            string1 = String.valueOf(string1) + ((EntityPlayerMP) this.playerEntities.get(i2)).username;
         }
         return string1;
     }
-    
+
     public void banPlayer(final String string1) {
         this.bannedPlayers.add(string1.toLowerCase());
         this.writeBannedPlayers();
     }
-    
+
     public void pardonPlayer(final String string1) {
         this.bannedPlayers.remove(string1.toLowerCase());
         this.writeBannedPlayers();
     }
-    
+
     private void readBannedPlayers() {
         try {
             this.bannedPlayers.clear();
-            final BufferedReader bufferedReader1 = new BufferedReader((Reader)new FileReader(this.bannedPlayersFile));
+            final BufferedReader bufferedReader1 = new BufferedReader((Reader) new FileReader(this.bannedPlayersFile));
             String string2 = "";
             while ((string2 = bufferedReader1.readLine()) != null) {
@@ -158,37 +174,35 @@
             }
             bufferedReader1.close();
-        }
-        catch (Exception exception3) {
+        } catch (Exception exception3) {
             ServerConfigurationManager.logger.warning(new StringBuilder("Failed to load ban list: ").append(exception3).toString());
         }
     }
-    
+
     private void writeBannedPlayers() {
         try {
-            final PrintWriter printWriter1 = new PrintWriter((Writer)new FileWriter(this.bannedPlayersFile, false));
+            final PrintWriter printWriter1 = new PrintWriter((Writer) new FileWriter(this.bannedPlayersFile, false));
             for (final String string3 : this.bannedPlayers) {
                 printWriter1.println(string3);
             }
             printWriter1.close();
-        }
-        catch (Exception exception4) {
+        } catch (Exception exception4) {
             ServerConfigurationManager.logger.warning(new StringBuilder("Failed to save ban list: ").append(exception4).toString());
         }
     }
-    
+
     public void banIP(final String string1) {
         this.bannedIPs.add(string1.toLowerCase());
         this.saveBannedList();
     }
-    
+
     public void pardonIP(final String string1) {
         this.bannedIPs.remove(string1.toLowerCase());
         this.saveBannedList();
     }
-    
+
     private void loadBannedList() {
         try {
             this.bannedIPs.clear();
-            final BufferedReader bufferedReader1 = new BufferedReader((Reader)new FileReader(this.ipBanFile));
+            final BufferedReader bufferedReader1 = new BufferedReader((Reader) new FileReader(this.ipBanFile));
             String string2 = "";
             while ((string2 = bufferedReader1.readLine()) != null) {
@@ -196,37 +210,35 @@
             }
             bufferedReader1.close();
-        }
-        catch (Exception exception3) {
+        } catch (Exception exception3) {
             ServerConfigurationManager.logger.warning(new StringBuilder("Failed to load ip ban list: ").append(exception3).toString());
         }
     }
-    
+
     private void saveBannedList() {
         try {
-            final PrintWriter printWriter1 = new PrintWriter((Writer)new FileWriter(this.ipBanFile, false));
+            final PrintWriter printWriter1 = new PrintWriter((Writer) new FileWriter(this.ipBanFile, false));
             for (final String string3 : this.bannedIPs) {
                 printWriter1.println(string3);
             }
             printWriter1.close();
-        }
-        catch (Exception exception4) {
+        } catch (Exception exception4) {
             ServerConfigurationManager.logger.warning(new StringBuilder("Failed to save ip ban list: ").append(exception4).toString());
         }
     }
-    
+
     public void opPlayer(final String string1) {
         this.ops.add(string1.toLowerCase());
         this.saveOps();
     }
-    
+
     public void deopPlayer(final String string1) {
         this.ops.remove(string1.toLowerCase());
         this.saveOps();
     }
-    
+
     private void loadOps() {
         try {
             this.ops.clear();
-            final BufferedReader bufferedReader1 = new BufferedReader((Reader)new FileReader(this.opFile));
+            final BufferedReader bufferedReader1 = new BufferedReader((Reader) new FileReader(this.opFile));
             String string2 = "";
             while ((string2 = bufferedReader1.readLine()) != null) {
@@ -234,30 +246,108 @@
             }
             bufferedReader1.close();
-        }
-        catch (Exception exception3) {
+        } catch (Exception exception3) {
             ServerConfigurationManager.logger.warning(new StringBuilder("Failed to load ip ban list: ").append(exception3).toString());
         }
     }
-    
+
     private void saveOps() {
         try {
-            final PrintWriter printWriter1 = new PrintWriter((Writer)new FileWriter(this.opFile, false));
+            final PrintWriter printWriter1 = new PrintWriter((Writer) new FileWriter(this.opFile, false));
             for (final String string3 : this.ops) {
                 printWriter1.println(string3);
             }
             printWriter1.close();
-        }
-        catch (Exception exception4) {
+        } catch (Exception exception4) {
             ServerConfigurationManager.logger.warning(new StringBuilder("Failed to save ip ban list: ").append(exception4).toString());
         }
     }
-    
+
     public boolean isOp(final String string1) {
         return this.ops.contains(string1.trim().toLowerCase());
     }
-    
+
+    private void loadWhitelistedPlayers() {
+        try {
+            this.whitelistedPlayers.clear();
+            final BufferedReader bufferedReader1 = new BufferedReader((Reader) new FileReader(this.whitelistFile));
+            String string2 = "";
+            while ((string2 = bufferedReader1.readLine()) != null) {
+                this.whitelistedPlayers.add(string2.trim().toLowerCase());
+            }
+            bufferedReader1.close();
+        } catch (Exception exception3) {
+            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to load player whitelist: ").append(exception3).toString());
+        }
+    }
+
+    private void saveWhitelistedPlayers() {
+        try {
+            final PrintWriter printWriter1 = new PrintWriter((Writer) new FileWriter(this.whitelistFile, false));
+            for (final String string3 : this.whitelistedPlayers) {
+                printWriter1.println(string3);
+            }
+            printWriter1.close();
+        } catch (Exception exception4) {
+            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to save player whitelist: ").append(exception4).toString());
+        }
+    }
+
+    public void whitelistPlayer(final String string1) {
+        this.whitelistedPlayers.add(string1.toLowerCase());
+        this.saveWhitelistedPlayers();
+    }
+
+    public void unwhitelistPlayer(final String string1) {
+        this.whitelistedPlayers.remove(string1.toLowerCase());
+        this.saveWhitelistedPlayers();
+    }
+
+    private void loadWhitelistedIPs() {
+        try {
+            this.whitelistedIPs.clear();
+            final BufferedReader bufferedReader1 = new BufferedReader((Reader) new FileReader(this.whitelistIPsFile));
+            String string2 = "";
+            while ((string2 = bufferedReader1.readLine()) != null) {
+                this.whitelistedIPs.add(string2.trim().toLowerCase());
+            }
+            bufferedReader1.close();
+        } catch (Exception exception3) {
+            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to load ip whitelist: ").append(exception3).toString());
+        }
+    }
+
+    private void saveWhitelistedIPs() {
+        try {
+            final PrintWriter printWriter1 = new PrintWriter((Writer) new FileWriter(this.whitelistIPsFile, false));
+            for (final String string3 : this.whitelistedIPs) {
+                printWriter1.println(string3);
+            }
+            printWriter1.close();
+        } catch (Exception exception4) {
+            ServerConfigurationManager.logger.warning(new StringBuilder("Failed to save ip whitelist: ").append(exception4).toString());
+        }
+    }
+
+    public void whitelistIP(final String string1) {
+        this.whitelistedIPs.add(string1.toLowerCase());
+        this.saveWhitelistedIPs();
+    }
+
+    public void unwhitelistIP(final String string1) {
+        this.whitelistedIPs.remove(string1.toLowerCase());
+        this.saveWhitelistedIPs();
+    }
+
+    public void enableWhitelist() {
+        this.whitelistEnabled = true;
+    }
+
+    public void disableWhitelist() {
+        this.whitelistEnabled = false;
+    }
+
     public EntityPlayerMP getPlayerEntity(final String string1) {
         for (int i2 = 0; i2 < this.playerEntities.size(); ++i2) {
-            final EntityPlayerMP entityPlayerMP3 = (EntityPlayerMP)this.playerEntities.get(i2);
+            final EntityPlayerMP entityPlayerMP3 = (EntityPlayerMP) this.playerEntities.get(i2);
             if (entityPlayerMP3.username.equalsIgnoreCase(string1)) {
                 return entityPlayerMP3;
@@ -266,5 +356,5 @@
         return null;
     }
-    
+
     public void sendChatMessageToPlayer(final String string1, final String string2) {
         final EntityPlayerMP entityPlayerMP3 = this.getPlayerEntity(string1);
@@ -273,9 +363,9 @@
         }
     }
-    
+
     public void sendChatMessageToAllOps(final String string1) {
         final Packet3Chat packet3Chat2 = new Packet3Chat(string1);
         for (int i3 = 0; i3 < this.playerEntities.size(); ++i3) {
-            final EntityPlayerMP entityPlayerMP4 = (EntityPlayerMP)this.playerEntities.get(i3);
+            final EntityPlayerMP entityPlayerMP4 = (EntityPlayerMP) this.playerEntities.get(i3);
             if (this.isOp(entityPlayerMP4.username)) {
                 entityPlayerMP4.playerNetServerHandler.sendPacket(packet3Chat2);
@@ -283,5 +373,5 @@
         }
     }
-    
+
     public boolean sendPacketToPlayer(final String string1, final Packet packet2) {
         final EntityPlayerMP entityPlayerMP3 = this.getPlayerEntity(string1);
@@ -292,12 +382,12 @@
         return false;
     }
-    
+
     public void sentTileEntityToPlayer(final int i1, final int i2, final int i3, final TileEntity tileEntity4) {
         this.playerManagerObj.sendTileEntity(new Packet59ComplexEntity(i1, i2, i3, tileEntity4), i1, i2, i3);
     }
-    
+
     public void savePlayerStates() {
         for (int i1 = 0; i1 < this.playerEntities.size(); ++i1) {
-            this.playerNBTManagerObj.writePlayerNBT((EntityPlayerMP)this.playerEntities.get(i1));
+            this.playerNBTManagerObj.writePlayerNBT((EntityPlayerMP) this.playerEntities.get(i1));
         }
     }
