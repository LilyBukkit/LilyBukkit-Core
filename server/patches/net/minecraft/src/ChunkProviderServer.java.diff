--- ChunkProviderServer.java
+++ ChunkProviderServer.java
@@ -1,4 +1,11 @@
 package net.minecraft.src;
 
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.util.LongHashset;
+import org.bukkit.event.world.ChunkLoadEvent;
+import org.bukkit.event.world.ChunkPopulateEvent;
+import org.bukkit.event.world.ChunkUnloadEvent;
+import org.bukkit.generator.BlockPopulator;
+
 import java.io.IOException;
 import java.util.ArrayList;
@@ -7,19 +14,24 @@
 import java.util.List;
 import java.util.Map;
+import java.util.Random;
 import java.util.Set;
 
 public class ChunkProviderServer implements IChunkProvider {
-    private Set droppedChunksSet;
+    private Set<ChunkCoordinates> droppedChunksSet;
     private Chunk chunk;
     private IChunkProvider serverChunkProvider;
     private IChunkLoader serverChunkLoader;
-    private Map id2ChunkMap;
-    private List loadedChunks;
+    private Map<ChunkCoordinates, Chunk> id2ChunkMap;
+    public List<Chunk> loadedChunks; //LilyBukkit: private -> public
     private WorldServer worldObj;
-    
+
+    // CraftBukkit start
+    public LongHashset unloadQueue = new LongHashset();
+    // CraftBukkit end
+
     public ChunkProviderServer(final WorldServer worldServer, final IChunkLoader chunkLoader, final IChunkProvider chunkProvider) {
-        this.droppedChunksSet = (Set)new HashSet();
-        this.id2ChunkMap = (Map)new HashMap();
-        this.loadedChunks = (List)new ArrayList();
+        this.droppedChunksSet = new HashSet<>();
+        this.id2ChunkMap = new HashMap<>();
+        this.loadedChunks = new ArrayList<>();
         this.chunk = new Chunk(worldServer, new byte[32768], 0, 0);
         this.chunk.isChunkRendered = true;
@@ -29,10 +41,23 @@
         this.serverChunkProvider = chunkProvider;
     }
-    
+
     public boolean chunkExists(final int x, final int z) {
         final ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(x, z);
         return this.id2ChunkMap.containsKey(chunkCoordinates3);
     }
-    
+
+    // LilyBukkit start
+    public void queueUnload(int i, int j) {
+        ChunkCoordinates chunkcoordinates = new ChunkCoordinates(this.worldObj.spawnX, this.worldObj.spawnZ);
+        int k = i * 16 + 8 - chunkcoordinates.posX;
+        int l = j * 16 + 8 - chunkcoordinates.posZ;
+        short short1 = 128;
+
+        if (k < -short1 || k > short1 || l < -short1 || l > short1) { // CraftBukkit - added 'this.world.keepSpawnInMemory'
+            this.unloadQueue.add(i, j); // CraftBukkit
+        }
+    }
+    // LilyBukkit end
+
     public void dropChunk(final int i1, final int i2) {
         final int i3 = i1 * 16 + 8 - this.worldObj.spawnX;
@@ -43,9 +68,14 @@
         }
     }
-    
+
     public Chunk loadChunk(final int x, final int z) {
         final ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(x, z);
-        this.droppedChunksSet.remove(new ChunkCoordinates(x, z));
-        Chunk chunk4 = (Chunk)this.id2ChunkMap.get(chunkCoordinates3);
+        this.droppedChunksSet.remove(chunkCoordinates3);
+        // CraftBukkit start
+        this.unloadQueue.remove(x, z);
+        Chunk chunk = this.id2ChunkMap.get(new ChunkCoordinates(x, z));
+        boolean newChunk = false;
+        // CraftBukkit end
+        Chunk chunk4 = this.id2ChunkMap.get(chunkCoordinates3);
         if (chunk4 == null) {
             chunk4 = this.loadAndSaveChunk(x, z);
@@ -53,8 +83,8 @@
                 if (this.serverChunkProvider == null) {
                     chunk4 = this.chunk;
-                }
-                else {
+                } else {
                     chunk4 = this.serverChunkProvider.provideChunk(x, z);
                 }
+                newChunk = true; //CraftBukkit
             }
             this.id2ChunkMap.put(chunkCoordinates3, chunk4);
@@ -63,4 +93,17 @@
                 chunk4.onChunkLoad();
             }
+
+            // CraftBukkit start
+            org.bukkit.Server server = Bukkit.getServer();
+            if (server != null) {
+                /*
+                 * If it's a new world, the first few chunks are generated inside
+                 * the World constructor. We can't reliably alter that, so we have
+                 * no way of creating a CraftWorld/CraftServer at that point.
+                 */
+                server.getPluginManager().callEvent(new ChunkLoadEvent(chunk.getBukkitChunk(), newChunk));
+            }
+            // CraftBukkit end
+
             if (!chunk4.isTerrainPopulated && this.chunkExists(x + 1, z + 1) && this.chunkExists(x, z + 1) && this.chunkExists(x + 1, z)) {
                 this.populate(this, x, z);
@@ -78,11 +121,11 @@
         return chunk4;
     }
-    
+
     public Chunk provideChunk(final int x, final int z) {
         final ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(x, z);
-        final Chunk chunk4 = (Chunk)this.id2ChunkMap.get(chunkCoordinates3);
+        final Chunk chunk4 = this.id2ChunkMap.get(chunkCoordinates3);
         return (chunk4 == null) ? (this.worldObj.worldChunkLoadOverride ? this.loadChunk(x, z) : this.chunk) : chunk4;
     }
-    
+
     private Chunk loadAndSaveChunk(final int x, final int z) {
         if (this.serverChunkLoader == null) {
@@ -95,22 +138,20 @@
             }
             return chunk3;
-        }
-        catch (Exception exception4) {
+        } catch (Exception exception4) {
             exception4.printStackTrace();
             return null;
         }
     }
-    
+
     private void saveExtraChunkData(final Chunk chunk) {
         if (this.serverChunkLoader != null) {
             try {
                 this.serverChunkLoader.saveExtraChunkData(this.worldObj, chunk);
-            }
-            catch (Exception exception3) {
+            } catch (Exception exception3) {
                 exception3.printStackTrace();
             }
         }
     }
-    
+
     private void saveChunk(final Chunk chunk) {
         if (this.serverChunkLoader != null) {
@@ -118,11 +159,10 @@
                 chunk.lastSaveTime = this.worldObj.worldTime;
                 this.serverChunkLoader.saveChunk(this.worldObj, chunk);
-            }
-            catch (IOException iOException3) {
+            } catch (IOException iOException3) {
                 iOException3.printStackTrace();
             }
         }
     }
-    
+
     public void populate(final IChunkProvider chunkProvider, final int x, final int z) {
         final Chunk chunk4 = this.provideChunk(x, z);
@@ -131,13 +171,32 @@
             if (this.serverChunkProvider != null) {
                 this.serverChunkProvider.populate(chunkProvider, x, z);
+
+                // CraftBukkit start
+                BlockSand.fallInstantly = true;
+                Random random = new Random();
+                random.setSeed(this.worldObj.randomSeed);
+                long xRand = random.nextLong() / 2L * 2L + 1L;
+                long zRand = random.nextLong() / 2L * 2L + 1L;
+                random.setSeed((long) x * xRand + (long) z * zRand ^ this.worldObj.randomSeed);
+
+                org.bukkit.World world = Bukkit.getWorld(this.worldObj.levelName);
+                if (world != null) {
+                    for (BlockPopulator populator : world.getPopulators()) {
+                        populator.populate(world, random, chunk.getBukkitChunk());
+                    }
+                }
+                BlockSand.fallInstantly = false;
+                Bukkit.getServer().getPluginManager().callEvent(new ChunkPopulateEvent(chunk.getBukkitChunk()));
+                // CraftBukkit end
+
                 chunk4.setChunkModified();
             }
         }
     }
-    
+
     public boolean saveChunks(final boolean flag, final IProgressUpdate progressUpdate) {
         int i3 = 0;
         for (int i4 = 0; i4 < this.loadedChunks.size(); ++i4) {
-            final Chunk chunk5 = (Chunk)this.loadedChunks.get(i4);
+            final Chunk chunk5 = this.loadedChunks.get(i4);
             if (flag && !chunk5.neverSave) {
                 this.saveExtraChunkData(chunk5);
@@ -159,17 +218,31 @@
         return true;
     }
-    
+
     public boolean unload100OldestChunks() {
         if (!this.worldObj.levelSaving) {
             for (int i1 = 0; i1 < 16; ++i1) {
                 if (!this.droppedChunksSet.isEmpty()) {
-                    final ChunkCoordinates chunkCoordinates2 = (ChunkCoordinates)this.droppedChunksSet.iterator().next();
-                    final Chunk chunk3 = this.provideChunk(chunkCoordinates2.posX, chunkCoordinates2.posZ);
-                    chunk3.onChunkUnload();
-                    this.saveChunk(chunk3);
-                    this.saveExtraChunkData(chunk3);
-                    this.droppedChunksSet.remove(chunkCoordinates2);
-                    this.id2ChunkMap.remove(chunkCoordinates2);
-                    this.loadedChunks.remove(chunk3);
+                    // LilyBukkit start
+                    for (int i = 0; i < 50 && !this.unloadQueue.isEmpty(); i++) {
+                        long chunkcoordinates = this.unloadQueue.popFirst();
+                        final ChunkCoordinates chunkCoordinates2 = this.droppedChunksSet.iterator().next();
+                        final Chunk chunk3 = this.provideChunk(chunkCoordinates2.posX, chunkCoordinates2.posZ);
+
+
+                        if (chunk3 == null) continue;
+                        ChunkUnloadEvent event = new ChunkUnloadEvent(chunk3.getBukkitChunk());
+                        Bukkit.getServer().getPluginManager().callEvent(event);
+                        if (!event.isCancelled()) {
+                            //LilyBukkit end
+
+                            chunk3.onChunkUnload();
+                            this.saveChunk(chunk3);
+                            this.saveExtraChunkData(chunk3);
+                            //this.droppedChunksSet.remove(chunkCoordinates2); // CraftBukkit
+                            this.id2ChunkMap.remove(chunkCoordinates2);
+                            this.loadedChunks.remove(chunk3);
+                        }
+                    }
+                    // LilyBukkit end
                 }
             }
@@ -180,5 +253,5 @@
         return this.serverChunkProvider.unload100OldestChunks();
     }
-    
+
     public boolean canSave() {
         return !this.worldObj.levelSaving;
