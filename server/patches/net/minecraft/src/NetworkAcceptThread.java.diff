--- NetworkAcceptThread.java
+++ NetworkAcceptThread.java
@@ -1,18 +1,59 @@
 package net.minecraft.src;
 
-import java.net.Socket;
-import java.io.IOException;
 import net.minecraft.server.MinecraftServer;
 
+import java.io.IOException;
+import java.net.Socket;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+
 class NetworkAcceptThread extends Thread {
     final MinecraftServer minecraftServer;
     final NetworkListenThread networkListenThread;
-    
+
+    final Map<ByteArrayWrapper, Long> lastConnectionAt;
+
+    public final class ByteArrayWrapper {
+        private final byte[] data;
+
+        public ByteArrayWrapper(byte[] data) {
+            if (data == null) {
+                throw new NullPointerException();
+            }
+            this.data = data;
+        }
+
+        @Override
+        public boolean equals(Object other) {
+            if (!(other instanceof ByteArrayWrapper)) {
+                return false;
+            }
+            return Arrays.equals(data, ((ByteArrayWrapper) other).data);
+        }
+
+        @Override
+        public int hashCode() {
+            return Arrays.hashCode(data);
+        }
+
+        @Override
+        public String toString() {
+            StringBuilder builder = new StringBuilder();
+            for (int i = 0; i < data.length; i++) {
+                if (i != 0) builder.append(".");
+                builder.append((Integer) (int) data[i]);
+            }
+            return builder.toString();
+        }
+    }
+
     NetworkAcceptThread(final NetworkListenThread thread, final String string2, final MinecraftServer minecraftServer) {
         super(string2);
         this.networkListenThread = thread;
         this.minecraftServer = minecraftServer;
+        this.lastConnectionAt = new HashMap<>();
     }
-    
+
     public void run() {
         while (this.networkListenThread.isListening) {
@@ -22,8 +63,19 @@
                     continue;
                 }
-                final NetLoginHandler netLoginHandler2 = new NetLoginHandler(this.minecraftServer, socket1, new StringBuilder("Connection #").append(NetworkListenThread.incrementConnections(this.networkListenThread)).toString());
+                final NetLoginHandler netLoginHandler2 = new NetLoginHandler(this.minecraftServer, socket1, "Connection #" + NetworkListenThread.incrementConnections(this.networkListenThread));
+                ByteArrayWrapper address = new ByteArrayWrapper(socket1.getInetAddress().getAddress());
+                if (!lastConnectionAt.containsKey(address)) {
+                    lastConnectionAt.put(address, 0L);
+                }
+                long lastConnectedAt = lastConnectionAt.get(address);
+                if (System.currentTimeMillis() - lastConnectedAt < 5000) {
+                    lastConnectionAt.put(address, System.currentTimeMillis());
+                    socket1.close();
+                    System.out.print("Connection throttled [" + address + "]");
+                    continue;
+                }
+                lastConnectionAt.put(address, System.currentTimeMillis());
                 NetworkListenThread.addPendingConnection(this.networkListenThread, netLoginHandler2);
-            }
-            catch (IOException iOException3) {
+            } catch (IOException iOException3) {
                 iOException3.printStackTrace();
             }
