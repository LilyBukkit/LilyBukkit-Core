--- BlockSign.java
+++ BlockSign.java
@@ -1,10 +1,16 @@
 package net.minecraft.src;
 
+import org.bukkit.Chunk;
+import org.bukkit.block.Block;
+import org.bukkit.block.Sign;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.material.MaterialData;
+
 import java.util.Random;
 
-public class BlockSign extends BlockContainer {
+public class BlockSign extends BlockContainer implements Sign {
     private Class signEntityClass;
     private boolean isFreestanding;
-    
+
     protected BlockSign(final int id, final Class signEntityClass, final boolean isFreestanding) {
         super(id, Material.wood);
@@ -16,10 +22,10 @@
         this.setBlockBounds(0.5f - f4, 0.0f, 0.5f - f4, 0.5f + f4, f5, 0.5f + f4);
     }
-    
+
     @Override
     public AxisAlignedBB getCollisionBoundingBoxFromPool(final World world, final int x, final int y, final int z) {
         return null;
     }
-    
+
     @Override
     public void setBlockBoundsBasedOnState(final IBlockAccess blockAccess, final int x, final int y, final int z) {
@@ -46,30 +52,29 @@
         }
     }
-    
+
     @Override
     public int getRenderType() {
         return -1;
     }
-    
+
     @Override
     public boolean isOpaqueCube() {
         return false;
     }
-    
+
     @Override
     protected TileEntity getBlockEntity() {
         try {
-            return (TileEntity)this.signEntityClass.newInstance();
+            return (TileEntity) this.signEntityClass.newInstance();
+        } catch (Exception exception2) {
+            throw new RuntimeException((Throwable) exception2);
         }
-        catch (Exception exception2) {
-            throw new RuntimeException((Throwable)exception2);
-        }
     }
-    
+
     @Override
     public int idDropped(final int count, final Random random) {
         return Item.sign.shiftedIndex;
     }
-    
+
     @Override
     public void onNeighborBlockChange(final World world, final int x, final int y, final int z, final int flag) {
@@ -79,6 +84,5 @@
                 z2 = true;
             }
-        }
-        else {
+        } else {
             final int i7 = world.getBlockMetadata(x, y, z);
             z2 = true;
@@ -102,3 +106,223 @@
         super.onNeighborBlockChange(world, x, y, z, flag);
     }
+
+    /**
+     * Get the block's inventory.
+     *
+     * @return
+     */
+    @Override
+    public Inventory getInventory() {
+        return null;
+    }
+
+    /**
+     * Gets all the lines of text currently on this sign.
+     *
+     * @return Array of Strings containing each line of text
+     */
+    @Override
+    public String[] getLines() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the line of text at the specified index.
+     * <p>
+     * For example, getLine(0) will return the first line of text.
+     *
+     * @param index Line number to get the text from, starting at 0
+     * @return Text on the given line
+     * @throws IndexOutOfBoundsException Thrown when the line does not exist
+     */
+    @Override
+    public String getLine(int index) throws IndexOutOfBoundsException {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Sets the line of text at the specified index.
+     * <p>
+     * For example, setLine(0, "Line One") will set the first line of text to
+     * "Line One".
+     *
+     * @param index Line number to set the text at, starting from 0
+     * @param line  New text to set at the specified index
+     * @throws IndexOutOfBoundsException
+     */
+    @Override
+    public void setLine(int index, String line) throws IndexOutOfBoundsException {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the block represented by this BlockState
+     *
+     * @return Block that this BlockState represents
+     */
+    @Override
+    public Block getBlock() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the metadata for this block
+     *
+     * @return block specific metadata
+     */
+    @Override
+    public MaterialData getData() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the type of this block
+     *
+     * @return block type
+     */
+    @Override
+    public org.bukkit.Material getType() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the type-id of this block
+     *
+     * @return block type-id
+     */
+    @Override
+    public int getTypeId() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the light level between 0-15
+     *
+     * @return light level
+     */
+    @Override
+    public byte getLightLevel() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the world which contains this Block
+     *
+     * @return World containing this block
+     */
+    @Override
+    public org.bukkit.World getWorld() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the x-coordinate of this block
+     *
+     * @return x-coordinate
+     */
+    @Override
+    public int getX() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the y-coordinate of this block
+     *
+     * @return y-coordinate
+     */
+    @Override
+    public int getY() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the z-coordinate of this block
+     *
+     * @return z-coordinate
+     */
+    @Override
+    public int getZ() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the chunk which contains this block
+     *
+     * @return Containing Chunk
+     */
+    @Override
+    public Chunk getChunk() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Sets the metadata for this block
+     *
+     * @param data New block specific metadata
+     */
+    @Override
+    public void setData(MaterialData data) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Sets the type of this block
+     *
+     * @param type Material to change this block to
+     */
+    @Override
+    public void setType(org.bukkit.Material type) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Sets the type-id of this block
+     *
+     * @param type Type-Id to change this block to
+     */
+    @Override
+    public boolean setTypeId(int type) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Attempts to update the block represented by this state, setting it to the
+     * new values as defined by this state. <br />
+     * <br />
+     * This has the same effect as calling update(false). That is to say,
+     * this will not modify the state of a block if it is no longer the same
+     * type as it was when this state was taken. It will return false in this
+     * eventuality.
+     *
+     * @return true if the update was successful, otherwise false
+     * @see org.bukkit.block.BlockState#update(boolean force)
+     */
+    @Override
+    public boolean update() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Attempts to update the block represented by this state, setting it to the
+     * new values as defined by this state. <br />
+     * <br />
+     * Unless force is true, this will not modify the state of a block if it is
+     * no longer the same type as it was when this state was taken. It will return
+     * false in this eventuality.<br />
+     * <br />
+     * If force is true, it will set the type of the block to match the new state,
+     * set the state data and then return true.
+     *
+     * @param force true to forcefully set the state
+     * @return true if the update was successful, otherwise false
+     */
+    @Override
+    public boolean update(boolean force) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    @Override
+    public byte getRawData() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
 }
