--- MCHashTable2.java
+++ MCHashTable2.java
@@ -2,28 +2,32 @@
 
 public class MCHashTable2 {
+    private final float growFactor = 0.75f;
     private transient MCHashEntry2[] slots;
     private transient int count;
     private int threshold;
-    private final float growFactor = 0.75f;
     private transient volatile int versionStamp;
-    
+
     public MCHashTable2() {
         this.slots = new MCHashEntry2[16];
         this.threshold = 12;
     }
-    
+
     private static int computeHash(final long hash) {
-        return computeHash((int)(hash ^ hash >>> 32));
+        return computeHash((int) (hash ^ hash >>> 32));
     }
-    
+
     private static int computeHash(int i0) {
         i0 ^= (i0 >>> 20 ^ i0 >>> 12);
         return i0 ^ i0 >>> 7 ^ i0 >>> 4;
     }
-    
+
     private static int getSlotIndex(final int i0, final int i1) {
         return i0 & i1 - 1;
     }
-    
+
+    static int getHash(final long j0) {
+        return computeHash(j0);
+    }
+
     public Object lookup(final long j1) {
         final int i3 = computeHash(j1);
@@ -35,5 +39,5 @@
         return null;
     }
-    
+
     public void addKey(final long j1, final Object object3) {
         final int i4 = computeHash(j1);
@@ -47,5 +51,5 @@
         this.insert(i4, j1, object3, i5);
     }
-    
+
     private void grow(final int i1) {
         final MCHashEntry2[] mCHashEntry22 = this.slots;
@@ -53,13 +57,12 @@
         if (i2 == 1073741824) {
             this.threshold = Integer.MAX_VALUE;
-        }
-        else {
+        } else {
             final MCHashEntry2[] mCHashEntry23 = new MCHashEntry2[i1];
             this.copyTo(mCHashEntry23);
             this.slots = mCHashEntry23;
-            this.threshold = (int)(i1 * 0.75f);
+            this.threshold = (int) (i1 * 0.75f);
         }
     }
-    
+
     private void copyTo(final MCHashEntry2[] mCHashEntry21) {
         final MCHashEntry2[] mCHashEntry22 = this.slots;
@@ -79,10 +82,10 @@
         }
     }
-    
+
     public Object removeObject(final long j1) {
         final MCHashEntry2 mCHashEntry23 = this.removeEntry(j1);
         return (mCHashEntry23 == null) ? null : mCHashEntry23.valueEntry;
     }
-    
+
     final MCHashEntry2 removeEntry(final long j1) {
         final int i3 = computeHash(j1);
@@ -97,6 +100,5 @@
                 if (mCHashEntry25 == mCHashEntry26) {
                     this.slots[i4] = mCHashEntry27;
-                }
-                else {
+                } else {
                     mCHashEntry25.nextEntry = mCHashEntry27;
                 }
@@ -107,5 +109,5 @@
         return mCHashEntry26;
     }
-    
+
     private void insert(final int i1, final long j2, final Object object4, final int i5) {
         final MCHashEntry2 mCHashEntry26 = this.slots[i5];
@@ -115,7 +117,3 @@
         }
     }
-    
-    static int getHash(final long j0) {
-        return computeHash(j0);
-    }
 }
