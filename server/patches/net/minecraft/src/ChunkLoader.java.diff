--- ChunkLoader.java
+++ ChunkLoader.java
@@ -1,20 +1,61 @@
 package net.minecraft.src;
 
-import java.util.Iterator;
-import java.io.OutputStream;
-import java.io.FileOutputStream;
-import java.io.InputStream;
-import java.io.FileInputStream;
-import java.io.File;
+import java.io.*;
 
 public class ChunkLoader implements IChunkLoader {
     private File saveDir;
     private boolean createIfNecessary;
-    
+
     public ChunkLoader(final File saveDir, final boolean createIfNecessary) {
         this.saveDir = saveDir;
         this.createIfNecessary = createIfNecessary;
     }
-    
+
+    public static Chunk loadChunkIntoWorldFromCompound(final World world, final NBTTagCompound nbttagcompound) {
+        final int i2 = nbttagcompound.getInteger("xPos");
+        final int i3 = nbttagcompound.getInteger("zPos");
+        final Chunk chunk4 = new Chunk(world, i2, i3);
+        chunk4.blocks = nbttagcompound.getByteArray("Blocks");
+        chunk4.data = new NibbleArray(nbttagcompound.getByteArray("Data"));
+        chunk4.skylightMap = new NibbleArray(nbttagcompound.getByteArray("SkyLight"));
+        chunk4.blocklightMap = new NibbleArray(nbttagcompound.getByteArray("BlockLight"));
+        chunk4.heightMap = nbttagcompound.getByteArray("HeightMap");
+        chunk4.isTerrainPopulated = nbttagcompound.getBoolean("TerrainPopulated");
+        if (!chunk4.data.isValid()) {
+            chunk4.data = new NibbleArray(chunk4.blocks.length);
+        }
+        if (chunk4.heightMap == null || !chunk4.skylightMap.isValid()) {
+            chunk4.heightMap = new byte[256];
+            chunk4.skylightMap = new NibbleArray(chunk4.blocks.length);
+            chunk4.generateSkylightMap();
+        }
+        if (!chunk4.blocklightMap.isValid()) {
+            chunk4.blocklightMap = new NibbleArray(chunk4.blocks.length);
+            chunk4.doNothing();
+        }
+        final NBTTagList nBTTagList5 = nbttagcompound.getTagList("Entities");
+        if (nBTTagList5 != null) {
+            for (int i4 = 0; i4 < nBTTagList5.tagCount(); ++i4) {
+                final NBTTagCompound nBTTagCompound7 = (NBTTagCompound) nBTTagList5.tagAt(i4);
+                final Entity entity8 = EntityList.createEntityFromNBT(nBTTagCompound7, world);
+                chunk4.hasEntities = true;
+                if (entity8 != null) {
+                    chunk4.addEntity(entity8);
+                }
+            }
+        }
+        final NBTTagList nBTTagList6 = nbttagcompound.getTagList("TileEntities");
+        if (nBTTagList6 != null) {
+            for (int i5 = 0; i5 < nBTTagList6.tagCount(); ++i5) {
+                final NBTTagCompound nBTTagCompound8 = (NBTTagCompound) nBTTagList6.tagAt(i5);
+                final TileEntity tileEntity9 = TileEntity.createAndLoadEntity(nBTTagCompound8);
+                if (tileEntity9 != null) {
+                    chunk4.addTileEntity(tileEntity9);
+                }
+            }
+        }
+        return chunk4;
+    }
+
     private File chunkFileForXZ(final int x, final int z) {
         final String string3 = new StringBuilder("c.").append(Integer.toString(x, 36)).append(".").append(Integer.toString(z, 36)).append(".dat").toString();
@@ -38,5 +79,5 @@
         return (!file6.exists() && !this.createIfNecessary) ? null : file6;
     }
-    
+
     public Chunk loadChunk(final World world, final int x, final int z) {
         final File file4 = this.chunkFileForXZ(x, z);
@@ -44,5 +85,5 @@
             try {
                 final FileInputStream fileInputStream5 = new FileInputStream(file4);
-                final NBTTagCompound nBTTagCompound6 = CompressedStreamTools.readCompressed((InputStream)fileInputStream5);
+                final NBTTagCompound nBTTagCompound6 = CompressedStreamTools.readCompressed((InputStream) fileInputStream5);
                 if (!nBTTagCompound6.hasKey("Level")) {
                     System.out.println(new StringBuilder("Chunk file at ").append(x).append(",").append(z).append(" is missing level data, skipping").toString());
@@ -61,6 +102,5 @@
                 }
                 return chunk7;
-            }
-            catch (Exception exception8) {
+            } catch (Exception exception8) {
                 exception8.printStackTrace();
             }
@@ -68,5 +108,5 @@
         return null;
     }
-    
+
     public void saveChunk(final World world, final Chunk chunk) {
         world.checkSessionLock();
@@ -80,7 +120,7 @@
             final NBTTagCompound nBTTagCompound6 = new NBTTagCompound();
             final NBTTagCompound nBTTagCompound7 = new NBTTagCompound();
-            nBTTagCompound6.setTag("Level", (NBTBase)nBTTagCompound7);
+            nBTTagCompound6.setTag("Level", (NBTBase) nBTTagCompound7);
             this.storeChunkInCompound(chunk, world, nBTTagCompound7);
-            CompressedStreamTools.writeCompressed(nBTTagCompound6, (OutputStream)fileOutputStream5);
+            CompressedStreamTools.writeCompressed(nBTTagCompound6, (OutputStream) fileOutputStream5);
             fileOutputStream5.close();
             if (file3.exists()) {
@@ -89,10 +129,9 @@
             file4.renameTo(file3);
             world.sizeOnDisk += file3.length();
-        }
-        catch (Exception exception8) {
+        } catch (Exception exception8) {
             exception8.printStackTrace();
         }
     }
-    
+
     public void storeChunkInCompound(final Chunk chunk, final World world, final NBTTagCompound nbttagcompound) {
         world.checkSessionLock();
@@ -117,5 +156,5 @@
             }
         }
-        nbttagcompound.setTag("Entities", (NBTBase)nBTTagList4);
+        nbttagcompound.setTag("Entities", (NBTBase) nBTTagList4);
         final NBTTagList nBTTagList5 = new NBTTagList();
         for (final TileEntity tileEntity10 : chunk.chunkTileEntityMap.values()) {
@@ -124,59 +163,13 @@
             nBTTagList5.setTag(nBTTagCompound8);
         }
-        nbttagcompound.setTag("TileEntities", (NBTBase)nBTTagList5);
+        nbttagcompound.setTag("TileEntities", (NBTBase) nBTTagList5);
     }
-    
-    public static Chunk loadChunkIntoWorldFromCompound(final World world, final NBTTagCompound nbttagcompound) {
-        final int i2 = nbttagcompound.getInteger("xPos");
-        final int i3 = nbttagcompound.getInteger("zPos");
-        final Chunk chunk4 = new Chunk(world, i2, i3);
-        chunk4.blocks = nbttagcompound.getByteArray("Blocks");
-        chunk4.data = new NibbleArray(nbttagcompound.getByteArray("Data"));
-        chunk4.skylightMap = new NibbleArray(nbttagcompound.getByteArray("SkyLight"));
-        chunk4.blocklightMap = new NibbleArray(nbttagcompound.getByteArray("BlockLight"));
-        chunk4.heightMap = nbttagcompound.getByteArray("HeightMap");
-        chunk4.isTerrainPopulated = nbttagcompound.getBoolean("TerrainPopulated");
-        if (!chunk4.data.isValid()) {
-            chunk4.data = new NibbleArray(chunk4.blocks.length);
-        }
-        if (chunk4.heightMap == null || !chunk4.skylightMap.isValid()) {
-            chunk4.heightMap = new byte[256];
-            chunk4.skylightMap = new NibbleArray(chunk4.blocks.length);
-            chunk4.generateSkylightMap();
-        }
-        if (!chunk4.blocklightMap.isValid()) {
-            chunk4.blocklightMap = new NibbleArray(chunk4.blocks.length);
-            chunk4.doNothing();
-        }
-        final NBTTagList nBTTagList5 = nbttagcompound.getTagList("Entities");
-        if (nBTTagList5 != null) {
-            for (int i4 = 0; i4 < nBTTagList5.tagCount(); ++i4) {
-                final NBTTagCompound nBTTagCompound7 = (NBTTagCompound)nBTTagList5.tagAt(i4);
-                final Entity entity8 = EntityList.createEntityFromNBT(nBTTagCompound7, world);
-                chunk4.hasEntities = true;
-                if (entity8 != null) {
-                    chunk4.addEntity(entity8);
-                }
-            }
-        }
-        final NBTTagList nBTTagList6 = nbttagcompound.getTagList("TileEntities");
-        if (nBTTagList6 != null) {
-            for (int i5 = 0; i5 < nBTTagList6.tagCount(); ++i5) {
-                final NBTTagCompound nBTTagCompound8 = (NBTTagCompound)nBTTagList6.tagAt(i5);
-                final TileEntity tileEntity9 = TileEntity.createAndLoadEntity(nBTTagCompound8);
-                if (tileEntity9 != null) {
-                    chunk4.addTileEntity(tileEntity9);
-                }
-            }
-        }
-        return chunk4;
-    }
-    
+
     public void chunkTick() {
     }
-    
+
     public void saveExtraData() {
     }
-    
+
     public void saveExtraChunkData(final World world, final Chunk chunk) {
     }
