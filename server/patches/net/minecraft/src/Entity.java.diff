--- Entity.java
+++ Entity.java
@@ -4,5 +4,5 @@
 import java.util.Random;
 
-public abstract class Entity {
+public abstract class Entity implements org.bukkit.entity.Entity {
     private static int nextEntityID;
     public int entityID;
@@ -63,9 +63,9 @@
     public int chunkCoordY;
     public int chunkCoordZ;
-    
+
     static {
         Entity.nextEntityID = 0;
     }
-    
+
     public Entity(final World world) {
         this.entityID = Entity.nextEntityID++;
@@ -103,27 +103,27 @@
         this.setPosition(0.0, 0.0, 0.0);
     }
-    
+
     public boolean equals(final Object object) {
-        return object instanceof Entity && ((Entity)object).entityID == this.entityID;
+        return object instanceof Entity && ((Entity) object).entityID == this.entityID;
     }
-    
+
     public int hashCode() {
         return this.entityID;
     }
-    
+
     public void setEntityDead() {
         this.isDead = true;
     }
-    
+
     protected void setSize(final float width, final float height) {
         this.width = width;
         this.height = height;
     }
-    
+
     protected void setRotation(final float rotationYaw, final float rotationPitch) {
         this.rotationYaw = rotationYaw;
         this.rotationPitch = rotationPitch;
     }
-    
+
     public void setPosition(final double posX, final double posY, final double posZ) {
         this.posX = posX;
@@ -134,9 +134,9 @@
         this.boundingBox.setBounds(posX - f7, posY - this.yOffset + this.ySize, posZ - f7, posX + f7, posY - this.yOffset + this.ySize + f8, posZ + f7);
     }
-    
+
     public void onUpdate() {
         this.onEntityUpdate();
     }
-    
+
     public void onEntityUpdate() {
         if (this.ridingEntity != null && this.ridingEntity.isDead) {
@@ -157,14 +157,14 @@
                 }
                 this.worldObj.playSoundAtEntity(this, "random.splash", f1, 1.0f + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4f);
-                final float f2 = (float)MathHelper.floor_double(this.boundingBox.minY);
+                final float f2 = (float) MathHelper.floor_double(this.boundingBox.minY);
                 for (int i3 = 0; i3 < 1.0f + this.width * 20.0f; ++i3) {
                     final float f3 = (this.rand.nextFloat() * 2.0f - 1.0f) * this.width;
                     final float f4 = (this.rand.nextFloat() * 2.0f - 1.0f) * this.width;
-                    this.worldObj.spawnParticle("bubble", this.posX + f3, (double)(f2 + 1.0f), this.posZ + f4, this.motionX, this.motionY - this.rand.nextFloat() * 0.2f, this.motionZ);
+                    this.worldObj.spawnParticle("bubble", this.posX + f3, (double) (f2 + 1.0f), this.posZ + f4, this.motionX, this.motionY - this.rand.nextFloat() * 0.2f, this.motionZ);
                 }
                 for (int i3 = 0; i3 < 1.0f + this.width * 20.0f; ++i3) {
                     final float f3 = (this.rand.nextFloat() * 2.0f - 1.0f) * this.width;
                     final float f4 = (this.rand.nextFloat() * 2.0f - 1.0f) * this.width;
-                    this.worldObj.spawnParticle("splash", this.posX + f3, (double)(f2 + 1.0f), this.posZ + f4, this.motionX, this.motionY, this.motionZ);
+                    this.worldObj.spawnParticle("splash", this.posX + f3, (double) (f2 + 1.0f), this.posZ + f4, this.motionX, this.motionY, this.motionZ);
                 }
             }
@@ -172,6 +172,5 @@
             this.inWater = true;
             this.fire = 0;
-        }
-        else {
+        } else {
             this.inWater = false;
         }
@@ -191,9 +190,9 @@
         this.firstUpdate = false;
     }
-    
+
     protected void kill() {
         this.setEntityDead();
     }
-    
+
     public boolean isOffsetPositionInLiquid(final double x, final double y, final double z) {
         final AxisAlignedBB axisAlignedBB7 = this.boundingBox.getOffsetBoundingBox(x, y, z);
@@ -201,5 +200,5 @@
         return list8.size() <= 0 && !this.worldObj.getIsAnyLiquid(axisAlignedBB7);
     }
-    
+
     public void moveEntity(double x, double y, double z) {
         if (this.noClip) {
@@ -208,6 +207,5 @@
             this.posY = this.boundingBox.minY + this.yOffset - this.ySize;
             this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0;
-        }
-        else {
+        } else {
             final double d7 = this.posX;
             final double d8 = this.posZ;
@@ -225,9 +223,7 @@
                     if (x < d12 && x >= -d12) {
                         x = 0.0;
-                    }
-                    else if (x > 0.0) {
+                    } else if (x > 0.0) {
                         x -= d12;
-                    }
-                    else {
+                    } else {
                         x += d12;
                     }
@@ -237,9 +233,7 @@
                     if (z < d12 && z >= -d12) {
                         z = 0.0;
-                    }
-                    else if (z > 0.0) {
+                    } else if (z > 0.0) {
                         z -= d12;
-                    }
-                    else {
+                    } else {
                         z += d12;
                     }
@@ -249,5 +243,5 @@
             List list35 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(x, y, z));
             for (int i20 = 0; i20 < list35.size(); ++i20) {
-                y = ((AxisAlignedBB)list35.get(i20)).calculateYOffset(this.boundingBox, y);
+                y = ((AxisAlignedBB) list35.get(i20)).calculateYOffset(this.boundingBox, y);
             }
             this.boundingBox.offset(0.0, y, 0.0);
@@ -259,5 +253,5 @@
             final boolean z3 = this.onGround || (d10 != y && d10 < 0.0);
             for (int i21 = 0; i21 < list35.size(); ++i21) {
-                x = ((AxisAlignedBB)list35.get(i21)).calculateXOffset(this.boundingBox, x);
+                x = ((AxisAlignedBB) list35.get(i21)).calculateXOffset(this.boundingBox, x);
             }
             this.boundingBox.offset(x, 0.0, 0.0);
@@ -268,5 +262,5 @@
             }
             for (int i21 = 0; i21 < list35.size(); ++i21) {
-                z = ((AxisAlignedBB)list35.get(i21)).calculateZOffset(this.boundingBox, z);
+                z = ((AxisAlignedBB) list35.get(i21)).calculateZOffset(this.boundingBox, z);
             }
             this.boundingBox.offset(0.0, 0.0, z);
@@ -287,5 +281,5 @@
                 list35 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(d9, y, d11));
                 for (int i22 = 0; i22 < list35.size(); ++i22) {
-                    y = ((AxisAlignedBB)list35.get(i22)).calculateYOffset(this.boundingBox, y);
+                    y = ((AxisAlignedBB) list35.get(i22)).calculateYOffset(this.boundingBox, y);
                 }
                 this.boundingBox.offset(0.0, y, 0.0);
@@ -296,5 +290,5 @@
                 }
                 for (int i22 = 0; i22 < list35.size(); ++i22) {
-                    x = ((AxisAlignedBB)list35.get(i22)).calculateXOffset(this.boundingBox, x);
+                    x = ((AxisAlignedBB) list35.get(i22)).calculateXOffset(this.boundingBox, x);
                 }
                 this.boundingBox.offset(x, 0.0, 0.0);
@@ -305,5 +299,5 @@
                 }
                 for (int i22 = 0; i22 < list35.size(); ++i22) {
-                    z = ((AxisAlignedBB)list35.get(i22)).calculateZOffset(this.boundingBox, z);
+                    z = ((AxisAlignedBB) list35.get(i22)).calculateZOffset(this.boundingBox, z);
                 }
                 this.boundingBox.offset(0.0, 0.0, z);
@@ -318,6 +312,5 @@
                     z = d15;
                     this.boundingBox.setBB(axisAlignedBB18);
-                }
-                else {
+                } else {
                     this.ySize += 0.5;
                 }
@@ -335,8 +328,7 @@
                     this.fallDistance = 0.0f;
                 }
+            } else if (y < 0.0) {
+                this.fallDistance -= (float) y;
             }
-            else if (y < 0.0) {
-                this.fallDistance -= (float)y;
-            }
             if (d9 != x) {
                 this.motionX = 0.0;
@@ -350,5 +342,5 @@
             final double d13 = this.posX - d7;
             final double d14 = this.posZ - d8;
-            this.distanceWalkedModified += (float)(MathHelper.sqrt_double(d13 * d13 + d14 * d14) * 0.6);
+            this.distanceWalkedModified += (float) (MathHelper.sqrt_double(d13 * d13 + d14 * d14) * 0.6);
             if (this.canTriggerWalking && !z2) {
                 final int i23 = MathHelper.floor_double(this.posX);
@@ -362,6 +354,5 @@
                         stepSound29 = Block.snow.stepSound;
                         this.worldObj.playSoundAtEntity(this, stepSound29.getStepSound(), stepSound29.getVolume() * 0.15f, stepSound29.getPitch());
-                    }
-                    else if (!Block.blocksList[i22].material.getIsLiquid()) {
+                    } else if (!Block.blocksList[i22].material.getIsLiquid()) {
                         this.worldObj.playSoundAtEntity(this, stepSound29.getStepSound(), stepSound29.getVolume() * 0.15f, stepSound29.getPitch());
                     }
@@ -395,6 +386,5 @@
                     }
                 }
-            }
-            else if (this.fire <= 0) {
+            } else if (this.fire <= 0) {
                 this.fire = -this.fireResistance;
             }
@@ -405,28 +395,28 @@
         }
     }
-    
+
     public boolean isSneaking() {
         return false;
     }
-    
+
     public AxisAlignedBB getBoundingBox() {
         return null;
     }
-    
+
     protected void dealFireDamage(final int fireDamage) {
         this.attackEntityFrom(null, fireDamage);
     }
-    
+
     protected void fall(final float f1) {
     }
-    
+
     public boolean handleWaterMovement() {
         return this.worldObj.handleMaterialAcceleration(this.boundingBox.expand(0.0, -0.4000000059604645, 0.0), Material.water, this);
     }
-    
+
     public boolean isInsideOfMaterial(final Material material) {
         final double d2 = this.posY + this.getEyeHeight();
         final int i4 = MathHelper.floor_double(this.posX);
-        final int i5 = MathHelper.floor_float((float)MathHelper.floor_double(d2));
+        final int i5 = MathHelper.floor_float((float) MathHelper.floor_double(d2));
         final int i6 = MathHelper.floor_double(this.posZ);
         final int i7 = this.worldObj.getBlockId(i4, i5, i6);
@@ -438,13 +428,13 @@
         return false;
     }
-    
-    protected float getEyeHeight() {
-        return 0.0f;
+
+    protected double getEyeHeight() {
+        return new Float(0.0f).doubleValue();
     }
-    
+
     public boolean handleLavaMovement() {
         return this.worldObj.isMaterialInBB(this.boundingBox.expand(0.0, -0.4000000059604645, 0.0), Material.lava);
     }
-    
+
     public void moveFlying(float f1, float f2, final float f3) {
         float f4 = MathHelper.sqrt_float(f1 * f1 + f2 * f2);
@@ -462,5 +452,5 @@
         }
     }
-    
+
     public float getBrightness(final float unused) {
         final int i2 = MathHelper.floor_double(this.posX);
@@ -470,5 +460,5 @@
         return this.worldObj.getBrightness(i2, i3, i4);
     }
-    
+
     public void setPositionAndRotation(final double x, final double y, final double z, final float yaw, final float pitch) {
         this.posX = x;
@@ -490,5 +480,5 @@
         this.setPosition(this.posX, this.posY, this.posZ);
     }
-    
+
     public void setLocationAndAngles(final double x, final double y, final double z, final float yaw, final float pitch) {
         this.posX = x;
@@ -503,12 +493,12 @@
         this.setPosition(this.posX, this.posY, this.posZ);
     }
-    
+
     public float getDistanceToEntity(final Entity entity) {
-        final float f2 = (float)(this.posX - entity.posX);
-        final float f3 = (float)(this.posY - entity.posY);
-        final float f4 = (float)(this.posZ - entity.posZ);
+        final float f2 = (float) (this.posX - entity.posX);
+        final float f3 = (float) (this.posY - entity.posY);
+        final float f4 = (float) (this.posZ - entity.posZ);
         return MathHelper.sqrt_float(f2 * f2 + f3 * f3 + f4 * f4);
     }
-    
+
     public double getDistanceSq(final double x, final double y, final double z) {
         final double d7 = this.posX - x;
@@ -517,5 +507,5 @@
         return d7 * d7 + d8 * d8 + d9 * d9;
     }
-    
+
     public double getDistance(final double x, final double y, final double z) {
         final double d7 = this.posX - x;
@@ -524,5 +514,5 @@
         return MathHelper.sqrt_double(d7 * d7 + d8 * d8 + d9 * d9);
     }
-    
+
     public double getDistanceSqToEntity(final Entity entity) {
         final double d2 = this.posX - entity.posX;
@@ -531,8 +521,8 @@
         return d2 * d2 + d3 * d3 + d4 * d4;
     }
-    
+
     public void onCollideWithPlayer(final EntityPlayer entityPlayer) {
     }
-    
+
     public void applyEntityCollision(final Entity entity) {
         if (entity.riddenByEntity != this && entity.ridingEntity != this) {
@@ -559,5 +549,5 @@
         }
     }
-    
+
     public void addVelocity(final double motionX, final double motionY, final double motionZ) {
         this.motionX += motionX;
@@ -565,20 +555,20 @@
         this.motionZ += motionZ;
     }
-    
+
     public boolean attackEntityFrom(final Entity entity, final int damage) {
         return false;
     }
-    
+
     public boolean canBeCollidedWith() {
         return false;
     }
-    
+
     public boolean canBePushed() {
         return false;
     }
-    
+
     public void addToPlayerScore(final Entity entity, final int score) {
     }
-    
+
     public boolean addEntityID(final NBTTagCompound nbttagcompound) {
         final String string2 = this.getEntityString();
@@ -590,16 +580,16 @@
         return false;
     }
-    
+
     public void writeToNBT(final NBTTagCompound nbttagcompound) {
-        nbttagcompound.setTag("Pos", (NBTBase)this.newDoubleNBTList(this.posX, this.posY, this.posZ));
-        nbttagcompound.setTag("Motion", (NBTBase)this.newDoubleNBTList(this.motionX, this.motionY, this.motionZ));
-        nbttagcompound.setTag("Rotation", (NBTBase)this.newFloatNBTList(this.rotationYaw, this.rotationPitch));
+        nbttagcompound.setTag("Pos", (NBTBase) this.newDoubleNBTList(this.posX, this.posY, this.posZ));
+        nbttagcompound.setTag("Motion", (NBTBase) this.newDoubleNBTList(this.motionX, this.motionY, this.motionZ));
+        nbttagcompound.setTag("Rotation", (NBTBase) this.newFloatNBTList(this.rotationYaw, this.rotationPitch));
         nbttagcompound.setFloat("FallDistance", this.fallDistance);
-        nbttagcompound.setShort("Fire", (short)this.fire);
-        nbttagcompound.setShort("Air", (short)this.air);
+        nbttagcompound.setShort("Fire", (short) this.fire);
+        nbttagcompound.setShort("Air", (short) this.air);
         nbttagcompound.setBoolean("OnGround", this.onGround);
         this.writeEntityToNBT(nbttagcompound);
     }
-    
+
     public void readFromNBT(final NBTTagCompound nbttagcompound) {
         final NBTTagList nBTTagList2 = nbttagcompound.getTagList("Pos");
@@ -607,23 +597,23 @@
         final NBTTagList nBTTagList4 = nbttagcompound.getTagList("Rotation");
         this.setPosition(0.0, 0.0, 0.0);
-        this.motionX = ((NBTTagDouble)nBTTagList3.tagAt(0)).doubleValue;
-        this.motionY = ((NBTTagDouble)nBTTagList3.tagAt(1)).doubleValue;
-        this.motionZ = ((NBTTagDouble)nBTTagList3.tagAt(2)).doubleValue;
-        final double doubleValue = ((NBTTagDouble)nBTTagList2.tagAt(0)).doubleValue;
+        this.motionX = ((NBTTagDouble) nBTTagList3.tagAt(0)).doubleValue;
+        this.motionY = ((NBTTagDouble) nBTTagList3.tagAt(1)).doubleValue;
+        this.motionZ = ((NBTTagDouble) nBTTagList3.tagAt(2)).doubleValue;
+        final double doubleValue = ((NBTTagDouble) nBTTagList2.tagAt(0)).doubleValue;
         this.posX = doubleValue;
         this.lastTickPosX = doubleValue;
         this.prevPosX = doubleValue;
-        final double doubleValue2 = ((NBTTagDouble)nBTTagList2.tagAt(1)).doubleValue;
+        final double doubleValue2 = ((NBTTagDouble) nBTTagList2.tagAt(1)).doubleValue;
         this.posY = doubleValue2;
         this.lastTickPosY = doubleValue2;
         this.prevPosY = doubleValue2;
-        final double doubleValue3 = ((NBTTagDouble)nBTTagList2.tagAt(2)).doubleValue;
+        final double doubleValue3 = ((NBTTagDouble) nBTTagList2.tagAt(2)).doubleValue;
         this.posZ = doubleValue3;
         this.lastTickPosZ = doubleValue3;
         this.prevPosZ = doubleValue3;
-        final float floatValue = ((NBTTagFloat)nBTTagList4.tagAt(0)).floatValue;
+        final float floatValue = ((NBTTagFloat) nBTTagList4.tagAt(0)).floatValue;
         this.rotationYaw = floatValue;
         this.prevRotationYaw = floatValue;
-        final float floatValue2 = ((NBTTagFloat)nBTTagList4.tagAt(1)).floatValue;
+        final float floatValue2 = ((NBTTagFloat) nBTTagList4.tagAt(1)).floatValue;
         this.rotationPitch = floatValue2;
         this.prevRotationPitch = floatValue2;
@@ -635,13 +625,13 @@
         this.readEntityFromNBT(nbttagcompound);
     }
-    
+
     protected final String getEntityString() {
         return EntityList.getEntityString(this);
     }
-    
+
     protected abstract void readEntityFromNBT(final NBTTagCompound nbttagcompound);
-    
+
     protected abstract void writeEntityToNBT(final NBTTagCompound nbttagcompound);
-    
+
     protected NBTTagList newDoubleNBTList(final double... d1) {
         final NBTTagList nBTTagList2 = new NBTTagList();
@@ -653,5 +643,5 @@
         return nBTTagList2;
     }
-    
+
     protected NBTTagList newFloatNBTList(final float... f1) {
         final NBTTagList nBTTagList2 = new NBTTagList();
@@ -663,9 +653,9 @@
         return nBTTagList2;
     }
-    
+
     public EntityItem dropItem(final int itemID, final int count) {
         return this.entityDropItem(itemID, count, 0.0f);
     }
-    
+
     public EntityItem entityDropItem(final int itemID, final int count, final float velocity) {
         final EntityItem entityItem4 = new EntityItem(this.worldObj, this.posX, this.posY + velocity, this.posZ, new ItemStack(itemID, count));
@@ -674,9 +664,9 @@
         return entityItem4;
     }
-    
+
     public boolean isEntityAlive() {
         return !this.isDead;
     }
-    
+
     public boolean isEntityInsideOpaqueBlock() {
         final int i1 = MathHelper.floor_double(this.posX);
@@ -685,14 +675,13 @@
         return this.worldObj.isBlockNormalCube(i1, i2, i3);
     }
-    
+
     public AxisAlignedBB getCollisionBox(final Entity entity) {
         return null;
     }
-    
+
     public void updateRidden() {
         if (this.ridingEntity.isDead) {
             this.ridingEntity = null;
-        }
-        else {
+        } else {
             this.motionX = 0.0;
             this.motionY = 0.0;
@@ -731,21 +720,21 @@
             this.entityRiderYawDelta -= d1;
             this.entityRiderPitchDelta -= d2;
-            this.rotationYaw += (float)d1;
-            this.rotationPitch += (float)d2;
+            this.rotationYaw += (float) d1;
+            this.rotationPitch += (float) d2;
         }
     }
-    
+
     protected void updateRiderPosition() {
         this.riddenByEntity.setPosition(this.posX, this.posY + this.getMountedYOffset() + this.riddenByEntity.getYOffset(), this.posZ);
     }
-    
+
     public double getYOffset() {
         return this.yOffset;
     }
-    
+
     public double getMountedYOffset() {
         return this.height * 0.75;
     }
-    
+
     public void mountEntity(final Entity entity) {
         this.entityRiderPitchDelta = 0.0;
@@ -755,6 +744,5 @@
             this.ridingEntity = null;
             this.setLocationAndAngles(entity.posX, entity.boundingBox.minY + entity.height, entity.posZ, this.rotationYaw, this.rotationPitch);
-        }
-        else {
+        } else {
             if (this.ridingEntity != null) {
                 this.ridingEntity.riddenByEntity = null;
