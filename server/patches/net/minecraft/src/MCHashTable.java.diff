--- MCHashTable.java
+++ MCHashTable.java
@@ -2,24 +2,28 @@
 
 public class MCHashTable {
+    private final float growFactor = 0.75f;
     private transient MCHashEntry[] slots;
     private transient int count;
     private int threshold;
-    private final float growFactor = 0.75f;
     private transient volatile int versionStamp;
-    
+
     public MCHashTable() {
         this.slots = new MCHashEntry[16];
         this.threshold = 12;
     }
-    
+
     private static int computeHash(int hash) {
         hash ^= (hash >>> 20 ^ hash >>> 12);
         return hash ^ hash >>> 7 ^ hash >>> 4;
     }
-    
+
     private static int getSlotIndex(final int i0, final int i1) {
         return i0 & i1 - 1;
     }
-    
+
+    static int getHash(final int i0) {
+        return computeHash(i0);
+    }
+
     public Object lookup(final int i1) {
         final int i2 = computeHash(i1);
@@ -31,9 +35,9 @@
         return null;
     }
-    
+
     public boolean containsItem(final int i1) {
         return this.lookupEntry(i1) != null;
     }
-    
+
     final MCHashEntry lookupEntry(final int i1) {
         final int i2 = computeHash(i1);
@@ -45,5 +49,5 @@
         return null;
     }
-    
+
     public void addKey(final int i1, final Object object2) {
         final int i2 = computeHash(i1);
@@ -57,5 +61,5 @@
         this.insert(i2, i1, object2, i3);
     }
-    
+
     private void grow(final int i1) {
         final MCHashEntry[] mCHashEntry2 = this.slots;
@@ -63,13 +67,12 @@
         if (i2 == 1073741824) {
             this.threshold = Integer.MAX_VALUE;
-        }
-        else {
+        } else {
             final MCHashEntry[] mCHashEntry3 = new MCHashEntry[i1];
             this.copyTo(mCHashEntry3);
             this.slots = mCHashEntry3;
-            this.threshold = (int)(i1 * 0.75f);
+            this.threshold = (int) (i1 * 0.75f);
         }
     }
-    
+
     private void copyTo(final MCHashEntry[] mCHashEntry1) {
         final MCHashEntry[] mCHashEntry2 = this.slots;
@@ -89,10 +92,10 @@
         }
     }
-    
+
     public Object removeObject(final int i1) {
         final MCHashEntry mCHashEntry2 = this.removeEntry(i1);
         return (mCHashEntry2 == null) ? null : mCHashEntry2.valueEntry;
     }
-    
+
     final MCHashEntry removeEntry(final int i1) {
         final int i2 = computeHash(i1);
@@ -107,6 +110,5 @@
                 if (mCHashEntry4 == mCHashEntry5) {
                     this.slots[i3] = mCHashEntry6;
-                }
-                else {
+                } else {
                     mCHashEntry4.nextEntry = mCHashEntry6;
                 }
@@ -117,5 +119,5 @@
         return mCHashEntry5;
     }
-    
+
     public void clearMap() {
         ++this.versionStamp;
@@ -126,5 +128,5 @@
         this.count = 0;
     }
-    
+
     private void insert(final int i1, final int i2, final Object object3, final int i4) {
         final MCHashEntry mCHashEntry5 = this.slots[i4];
@@ -134,7 +136,3 @@
         }
     }
-    
-    static int getHash(final int i0) {
-        return computeHash(i0);
-    }
 }
