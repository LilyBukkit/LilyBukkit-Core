--- BlockChest.java
+++ BlockChest.java
@@ -1,7 +1,12 @@
 package net.minecraft.src;
 
+import org.bukkit.block.Block;
+import org.bukkit.block.Chest;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.material.MaterialData;
+
 import java.util.Random;
 
-public class BlockChest extends BlockContainer {
+public class BlockChest extends BlockContainer implements Chest {
     private Random random;
     
@@ -105,3 +110,74 @@
         return new TileEntityChest();
     }
+
+    /**
+     * Gets the block represented by this BlockState
+     *
+     * @return Block that this BlockState represents
+     */
+    @Override
+    public Block getBlock() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Sets the metadata for this block
+     *
+     * @param data New block specific metadata
+     */
+    @Override
+    public void setData(MaterialData data) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Attempts to update the block represented by this state, setting it to the
+     * new values as defined by this state. <br />
+     * <br />
+     * This has the same effect as calling update(false). That is to say,
+     * this will not modify the state of a block if it is no longer the same
+     * type as it was when this state was taken. It will return false in this
+     * eventuality.
+     *
+     * @return true if the update was successful, otherwise false
+     * @see BlockState.update(boolean force)
+     */
+    @Override
+    public boolean update() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Attempts to update the block represented by this state, setting it to the
+     * new values as defined by this state. <br />
+     * <br />
+     * Unless force is true, this will not modify the state of a block if it is
+     * no longer the same type as it was when this state was taken. It will return
+     * false in this eventuality.<br />
+     * <br />
+     * If force is true, it will set the type of the block to match the new state,
+     * set the state data and then return true.
+     *
+     * @param force true to forcefully set the state
+     * @return true if the update was successful, otherwise false
+     */
+    @Override
+    public boolean update(boolean force) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    @Override
+    public byte getRawData() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Get the block's inventory.
+     *
+     * @return
+     */
+    @Override
+    public Inventory getInventory() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
 }
