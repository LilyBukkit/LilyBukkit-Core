--- PropertyManager.java
+++ PropertyManager.java
@@ -1,22 +1,19 @@
 package net.minecraft.src;
 
-import java.io.OutputStream;
-import java.io.FileOutputStream;
-import java.util.logging.Level;
-import java.io.InputStream;
-import java.io.FileInputStream;
-import java.io.File;
+import java.io.*;
 import java.util.Properties;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 
 public class PropertyManager {
     public static Logger logger;
-    private Properties serverProperties;
-    private File propertiesFile;
-    
+
     static {
         PropertyManager.logger = Logger.getLogger("Minecraft");
     }
-    
+
+    private Properties serverProperties;
+    private File propertiesFile;
+
     public PropertyManager(final File propertiesFile) {
         this.serverProperties = new Properties();
@@ -24,32 +21,29 @@
         if (propertiesFile.exists()) {
             try {
-                this.serverProperties.load((InputStream)new FileInputStream(propertiesFile));
-            }
-            catch (Exception exception3) {
-                PropertyManager.logger.log(Level.WARNING, new StringBuilder("Failed to load ").append(propertiesFile).toString(), (Throwable)exception3);
+                this.serverProperties.load((InputStream) new FileInputStream(propertiesFile));
+            } catch (Exception exception3) {
+                PropertyManager.logger.log(Level.WARNING, new StringBuilder("Failed to load ").append(propertiesFile).toString(), (Throwable) exception3);
                 this.generateAndSaveProperties();
             }
-        }
-        else {
+        } else {
             PropertyManager.logger.log(Level.WARNING, new StringBuilder().append(propertiesFile).append(" does not exist").toString());
             this.generateAndSaveProperties();
         }
     }
-    
+
     public void generateAndSaveProperties() {
         PropertyManager.logger.log(Level.INFO, "Generating new properties file");
         this.saveProperties();
     }
-    
+
     public void saveProperties() {
         try {
-            this.serverProperties.store((OutputStream)new FileOutputStream(this.propertiesFile), "Minecraft server properties");
-        }
-        catch (Exception exception2) {
-            PropertyManager.logger.log(Level.WARNING, new StringBuilder("Failed to save ").append(this.propertiesFile).toString(), (Throwable)exception2);
+            this.serverProperties.store((OutputStream) new FileOutputStream(this.propertiesFile), "Minecraft server properties");
+        } catch (Exception exception2) {
+            PropertyManager.logger.log(Level.WARNING, new StringBuilder("Failed to save ").append(this.propertiesFile).toString(), (Throwable) exception2);
             this.generateAndSaveProperties();
         }
     }
-    
+
     public String getStringProperty(final String key, final String value) {
         if (!this.serverProperties.containsKey(key)) {
@@ -59,20 +53,18 @@
         return this.serverProperties.getProperty(key, value);
     }
-    
+
     public int getIntProperty(final String key, final int value) {
         try {
             return Integer.parseInt(this.getStringProperty(key, new StringBuilder().append(value).toString()));
-        }
-        catch (Exception exception4) {
+        } catch (Exception exception4) {
             this.serverProperties.setProperty(key, new StringBuilder().append(value).toString());
             return value;
         }
     }
-    
+
     public boolean getBooleanProperty(final String key, final boolean value) {
         try {
             return Boolean.parseBoolean(this.getStringProperty(key, new StringBuilder().append(value).toString()));
-        }
-        catch (Exception exception4) {
+        } catch (Exception exception4) {
             this.serverProperties.setProperty(key, new StringBuilder().append(value).toString());
             return value;
