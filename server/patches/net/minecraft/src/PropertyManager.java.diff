--- PropertyManager.java
+++ PropertyManager.java
@@ -1,6 +1,9 @@
 package net.minecraft.src;
 
+import joptsimple.OptionSet;
+
 import java.io.OutputStream;
 import java.io.FileOutputStream;
+import java.nio.file.Files;
 import java.util.logging.Level;
 import java.io.InputStream;
@@ -24,16 +27,34 @@
         if (propertiesFile.exists()) {
             try {
-                this.serverProperties.load((InputStream)new FileInputStream(propertiesFile));
+                this.serverProperties.load(Files.newInputStream(propertiesFile.toPath()));
             }
             catch (Exception exception3) {
-                PropertyManager.logger.log(Level.WARNING, new StringBuilder("Failed to load ").append(propertiesFile).toString(), (Throwable)exception3);
+                PropertyManager.logger.log(Level.WARNING, "Failed to load " + propertiesFile, exception3);
                 this.generateAndSaveProperties();
             }
         }
         else {
-            PropertyManager.logger.log(Level.WARNING, new StringBuilder().append(propertiesFile).append(" does not exist").toString());
+            PropertyManager.logger.log(Level.WARNING, propertiesFile + " does not exist");
             this.generateAndSaveProperties();
         }
     }
+
+    // CraftBukkit start
+    private OptionSet options = null;
+
+    public PropertyManager(final OptionSet options) {
+        this((File) options.valueOf("config"));
+
+        this.options = options;
+    }
+
+    private <T> T getOverride(String name, T value) {
+        if ((this.options != null) && (this.options.has(name))) {
+            return (T) this.options.valueOf(name);
+        }
+
+        return value;
+    }
+    // CraftBukkit end
     
     public void generateAndSaveProperties() {
@@ -44,36 +65,39 @@
     public void saveProperties() {
         try {
-            this.serverProperties.store((OutputStream)new FileOutputStream(this.propertiesFile), "Minecraft server properties");
+            this.serverProperties.store(Files.newOutputStream(this.propertiesFile.toPath()), "Minecraft server properties");
         }
         catch (Exception exception2) {
-            PropertyManager.logger.log(Level.WARNING, new StringBuilder("Failed to save ").append(this.propertiesFile).toString(), (Throwable)exception2);
+            PropertyManager.logger.log(Level.WARNING, "Failed to save " + this.propertiesFile, exception2);
             this.generateAndSaveProperties();
         }
     }
     
-    public String getStringProperty(final String key, final String value) {
+    public String getStringProperty(final String key, String value) {
         if (!this.serverProperties.containsKey(key)) {
+            value = this.getOverride(key, value); // CraftBukkit
             this.serverProperties.setProperty(key, value);
             this.saveProperties();
         }
-        return this.serverProperties.getProperty(key, value);
+        return this.getOverride(key, this.serverProperties.getProperty(key, value)); // CraftBukkit
     }
     
-    public int getIntProperty(final String key, final int value) {
+    public int getIntProperty(final String key, int value) {
         try {
-            return Integer.parseInt(this.getStringProperty(key, new StringBuilder().append(value).toString()));
+            return this.getOverride(key, Integer.parseInt(this.getStringProperty(key, String.valueOf(value)))); // CraftBukkit
         }
         catch (Exception exception4) {
-            this.serverProperties.setProperty(key, new StringBuilder().append(value).toString());
+            value = this.getOverride(key, value); // CraftBukkit
+            this.serverProperties.setProperty(key, String.valueOf(value));
             return value;
         }
     }
     
-    public boolean getBooleanProperty(final String key, final boolean value) {
+    public boolean getBooleanProperty(final String key, boolean value) {
         try {
-            return Boolean.parseBoolean(this.getStringProperty(key, new StringBuilder().append(value).toString()));
+            return this.getOverride(key, Boolean.parseBoolean(this.getStringProperty(key, String.valueOf(value)))); // CraftBukkit
         }
         catch (Exception exception4) {
-            this.serverProperties.setProperty(key, new StringBuilder().append(value).toString());
+            value = this.getOverride(key, value); // CraftBukkit
+            this.serverProperties.setProperty(key, String.valueOf(value));
             return value;
         }
