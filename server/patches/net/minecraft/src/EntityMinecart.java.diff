--- EntityMinecart.java
+++ EntityMinecart.java
@@ -1,7 +1,16 @@
 package net.minecraft.src;
 
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.Server;
+import org.bukkit.entity.Minecart;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.util.Vector;
+
+import java.util.HashMap;
 import java.util.List;
+import java.util.UUID;
 
-public class EntityMinecart extends Entity implements IInventory {
+public class EntityMinecart extends Entity implements IInventory, Minecart {
     private ItemStack[] cargoItems;
     public int damageTaken;
@@ -536,3 +545,618 @@
         return this.cargoItems[slot];
     }
+
+    /**
+     * Sets a minecart's damage.
+     *
+     * @param damage over 40 to "kill" a minecart
+     */
+    @Override
+    public void setDamage(int damage) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets a minecart's damage.
+     */
+    @Override
+    public int getDamage() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the maximum speed of a minecart. The speed is unrelated to the velocity.
+     */
+    @Override
+    public double getMaxSpeed() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Sets the maximum speed of a minecart. Must be nonnegative. Default is 0.4D.
+     *
+     * @param speed
+     */
+    @Override
+    public void setMaxSpeed(double speed) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Returns whether this minecart will slow down faster without a passenger occupying it
+     */
+    @Override
+    public boolean isSlowWhenEmpty() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Sets whether this minecart will slow down faster without a passenger occupying it
+     *
+     * @param slow
+     */
+    @Override
+    public void setSlowWhenEmpty(boolean slow) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the flying velocity modifier. Used for minecarts that are in mid-air.
+     * A flying minecart's velocity is multiplied by this factor each tick.
+     */
+    @Override
+    public Vector getFlyingVelocityMod() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Sets the flying velocity modifier. Used for minecarts that are in mid-air.
+     * A flying minecart's velocity is multiplied by this factor each tick.
+     *
+     * @param flying velocity modifier
+     */
+    @Override
+    public void setFlyingVelocityMod(Vector flying) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the derailed velocity modifier. Used for minecarts that are on the ground, but not on rails.
+     * <p>
+     * A derailed minecart's velocity is multiplied by this factor each tick.
+     */
+    @Override
+    public Vector getDerailedVelocityMod() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Sets the derailed velocity modifier. Used for minecarts that are on the ground, but not on rails.
+     * A derailed minecart's velocity is multiplied by this factor each tick.
+     *
+     * @param derailed
+     */
+    @Override
+    public void setDerailedVelocityMod(Vector derailed) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the entity's current position
+     *
+     * @return Location containing the position of this entity
+     */
+    @Override
+    public Location getLocation() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Sets this entity's velocity
+     *
+     * @param velocity New velocity to travel with
+     */
+    @Override
+    public void setVelocity(Vector velocity) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets this entity's current velocity
+     *
+     * @return Current travelling velocity of this entity
+     */
+    @Override
+    public Vector getVelocity() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the current world this entity resides in
+     *
+     * @return World
+     */
+    @Override
+    public org.bukkit.World getWorld() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Teleports this entity to the given location
+     *
+     * @param location New location to teleport this entity to
+     * @return <code>true</code> if the teleport was successful
+     */
+    @Override
+    public boolean teleport(Location location) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Teleports this entity to the target Entity
+     *
+     * @param destination Entity to teleport this entity to
+     * @return <code>true</code> if the teleport was successful
+     */
+    @Override
+    public boolean teleport(org.bukkit.entity.Entity destination) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Returns a list of entities within a bounding box defined by x,y,z centered around player
+     *
+     * @param x Size of the box along x axis
+     * @param y Size of the box along y axis
+     * @param z Size of the box along z axis
+     * @return List<Entity> List of entities nearby
+     */
+    @Override
+    public List<org.bukkit.entity.Entity> getNearbyEntities(double x, double y, double z) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Returns a unique id for this entity
+     *
+     * @return Entity id
+     */
+    @Override
+    public int getEntityId() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Returns the entity's current fire ticks (ticks before the entity stops being on fire).
+     *
+     * @return int fireTicks
+     */
+    @Override
+    public int getFireTicks() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Returns the entity's maximum fire ticks.
+     *
+     * @return int maxFireTicks
+     */
+    @Override
+    public int getMaxFireTicks() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Sets the entity's current fire ticks (ticks before the entity stops being on fire).
+     *
+     * @param ticks
+     */
+    @Override
+    public void setFireTicks(int ticks) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Mark the entity's removal.
+     */
+    @Override
+    public void remove() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Returns true if this entity has been marked for removal.
+     */
+    @Override
+    public boolean isDead() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the {@link Server} that contains this Entity
+     *
+     * @return Server instance running this Entity
+     */
+    @Override
+    public Server getServer() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the primary passenger of a vehicle. For vehicles that could have
+     * multiple passengers, this will only return the primary passenger.
+     *
+     * @return an entity
+     */
+    @Override
+    public org.bukkit.entity.Entity getPassenger() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Set the passenger of a vehicle.
+     *
+     * @param passenger
+     * @return false if it could not be done for whatever reason
+     */
+    @Override
+    public boolean setPassenger(org.bukkit.entity.Entity passenger) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Returns true if the vehicle has no passengers.
+     *
+     * @return
+     */
+    @Override
+    public boolean isEmpty() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Eject any passenger. True if there was a passenger.
+     *
+     * @return
+     */
+    @Override
+    public boolean eject() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Returns the distance this entity has fallen
+     *
+     * @return
+     */
+    @Override
+    public float getFallDistance() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Sets the fall distance for this entity
+     *
+     * @param distance
+     */
+    @Override
+    public void setFallDistance(float distance) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Record the last {@link EntityDamageEvent} inflicted on this entity
+     *
+     * @param event a {@link EntityDamageEvent}
+     */
+    @Override
+    public void setLastDamageCause(EntityDamageEvent event) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Retrieve the last {@link EntityDamageEvent} inflicted on this entity. This event may have been cancelled.
+     *
+     * @return the last known {@link EntityDamageEvent} or null if hitherto unharmed
+     */
+    @Override
+    public EntityDamageEvent getLastDamageCause() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Returns a unique and persistent id for this entity
+     *
+     * @return unique id
+     */
+    @Override
+    public UUID getUniqueId() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Returns the size of the inventory
+     *
+     * @return The inventory size
+     */
+    @Override
+    public int getSize() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Return the name of the inventory
+     *
+     * @return The inventory name
+     */
+    @Override
+    public String getName() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Get the ItemStack found in the slot at the given index
+     *
+     * @param index The index of the Slot's ItemStack to return
+     * @return The ItemStack in the slot
+     */
+    @Override
+    public org.bukkit.inventory.ItemStack getItem(int index) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Stores the ItemStack at the given index
+     *
+     * @param index The index where to put the ItemStack
+     * @param item  The ItemStack to set
+     */
+    @Override
+    public void setItem(int index, org.bukkit.inventory.ItemStack item) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Stores the given ItemStacks in the inventory.
+     * <p>
+     * This will try to fill existing stacks and empty slots as good as it can.
+     * It will return a HashMap of what it couldn't fit.
+     *
+     * @param items The ItemStacks to add
+     * @return
+     */
+    @Override
+    public HashMap<Integer, org.bukkit.inventory.ItemStack> addItem(org.bukkit.inventory.ItemStack... items) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Removes the given ItemStacks from the inventory.
+     * <p>
+     * It will try to remove 'as much as possible' from the types and amounts you
+     * give as arguments. It will return a HashMap of what it couldn't remove.
+     *
+     * @param items The ItemStacks to remove
+     * @return
+     */
+    @Override
+    public HashMap<Integer, org.bukkit.inventory.ItemStack> removeItem(org.bukkit.inventory.ItemStack... items) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Get all ItemStacks from the inventory
+     *
+     * @return All the ItemStacks from all slots
+     */
+    @Override
+    public org.bukkit.inventory.ItemStack[] getContents() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Set the inventory's contents
+     *
+     * @param items
+     * @return All the ItemStacks from all slots
+     */
+    @Override
+    public void setContents(org.bukkit.inventory.ItemStack[] items) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Check if the inventory contains any ItemStacks with the given materialId
+     *
+     * @param materialId The materialId to check for
+     * @return If any ItemStacks were found
+     */
+    @Override
+    public boolean contains(int materialId) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Check if the inventory contains any ItemStacks with the given material
+     *
+     * @param material The material to check for
+     * @return If any ItemStacks were found
+     */
+    @Override
+    public boolean contains(Material material) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Check if the inventory contains any ItemStacks matching the given ItemStack
+     * This will only match if both the type and the amount of the stack match
+     *
+     * @param item The ItemStack to match against
+     * @return If any matching ItemStacks were found
+     */
+    @Override
+    public boolean contains(org.bukkit.inventory.ItemStack item) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Check if the inventory contains any ItemStacks with the given materialId and at least the minimum amount specified
+     *
+     * @param materialId The materialId to check for
+     * @param amount     The minimum amount to look for
+     * @return If any ItemStacks were found
+     */
+    @Override
+    public boolean contains(int materialId, int amount) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Check if the inventory contains any ItemStacks with the given material and at least the minimum amount specified
+     *
+     * @param material The material to check for
+     * @param amount
+     * @return If any ItemStacks were found
+     */
+    @Override
+    public boolean contains(Material material, int amount) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Check if the inventory contains any ItemStacks matching the given ItemStack and at least the minimum amount specified
+     * This will only match if both the type and the amount of the stack match
+     *
+     * @param item   The ItemStack to match against
+     * @param amount
+     * @return If any matching ItemStacks were found
+     */
+    @Override
+    public boolean contains(org.bukkit.inventory.ItemStack item, int amount) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Find all slots in the inventory containing any ItemStacks with the given materialId
+     *
+     * @param materialId The materialId to look for
+     * @return The Slots found.
+     */
+    @Override
+    public HashMap<Integer, ? extends org.bukkit.inventory.ItemStack> all(int materialId) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Find all slots in the inventory containing any ItemStacks with the given material
+     *
+     * @param material@return The Slots found.
+     */
+    @Override
+    public HashMap<Integer, ? extends org.bukkit.inventory.ItemStack> all(Material material) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Find all slots in the inventory containing any ItemStacks with the given ItemStack
+     * This will only match slots if both the type and the amount of the stack match
+     *
+     * @param item The ItemStack to match against
+     * @return The Slots found.
+     */
+    @Override
+    public HashMap<Integer, ? extends org.bukkit.inventory.ItemStack> all(org.bukkit.inventory.ItemStack item) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Find the first slot in the inventory containing an ItemStack with the given materialId
+     *
+     * @param materialId The materialId to look for
+     * @return The Slot found.
+     */
+    @Override
+    public int first(int materialId) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Find the first slot in the inventory containing an ItemStack with the given material
+     *
+     * @param material@return The Slot found.
+     */
+    @Override
+    public int first(Material material) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Find the first slot in the inventory containing an ItemStack with the given stack
+     * This will only match a slot if both the type and the amount of the stack match
+     *
+     * @param item The ItemStack to match against
+     * @return The Slot found.
+     */
+    @Override
+    public int first(org.bukkit.inventory.ItemStack item) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Find the first empty Slot.
+     *
+     * @return The first empty Slot found.
+     */
+    @Override
+    public int firstEmpty() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Remove all stacks in the inventory matching the given materialId.
+     *
+     * @param materialId The material to remove
+     */
+    @Override
+    public void remove(int materialId) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Remove all stacks in the inventory matching the given material.
+     *
+     * @param material The material to remove
+     */
+    @Override
+    public void remove(Material material) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Remove all stacks in the inventory matching the given stack.
+     * This will only match a slot if both the type and the amount of the stack match
+     *
+     * @param item The ItemStack to match against
+     */
+    @Override
+    public void remove(org.bukkit.inventory.ItemStack item) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Clear out a particular slot in the index
+     *
+     * @param index The index to empty.
+     */
+    @Override
+    public void clear(int index) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Clear out the whole index
+     */
+    @Override
+    public void clear() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
 }
