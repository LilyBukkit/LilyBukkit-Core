--- InventoryPlayer.java
+++ InventoryPlayer.java
@@ -1,12 +1,16 @@
 package net.minecraft.src;
 
-public class InventoryPlayer implements IInventory {
+import org.bukkit.inventory.PlayerInventory;
+
+import java.util.HashMap;
+
+public class InventoryPlayer implements IInventory, PlayerInventory {
     public ItemStack[] mainInventory;
     public ItemStack[] armorInventory;
     public ItemStack[] craftingInventory;
     public int currentItem;
-    private EntityPlayer player;
     public boolean inventoryChanged;
-    
+    private EntityPlayer player;
+
     public InventoryPlayer(final EntityPlayer entityPlayer) {
         this.mainInventory = new ItemStack[36];
@@ -17,9 +21,9 @@
         this.player = entityPlayer;
     }
-    
+
     public ItemStack getCurrentItem() {
         return this.mainInventory[this.currentItem];
     }
-    
+
     private int storeItemStack(final int itemID) {
         for (int i2 = 0; i2 < this.mainInventory.length; ++i2) {
@@ -30,5 +34,5 @@
         return -1;
     }
-    
+
     private int getFirstEmptyStack() {
         for (int i1 = 0; i1 < this.mainInventory.length; ++i1) {
@@ -39,5 +43,5 @@
         return -1;
     }
-    
+
     private int storePartialItemStack(final int itemID, int i2) {
         int i3 = this.storeItemStack(itemID);
@@ -67,5 +71,5 @@
         return i2;
     }
-    
+
     public void decrementAnimations() {
         for (int i1 = 0; i1 < this.mainInventory.length; ++i1) {
@@ -76,5 +80,5 @@
         }
     }
-    
+
     public boolean addItemStackToInventory(final ItemStack stack) {
         if (stack.itemDmg == 0) {
@@ -92,5 +96,5 @@
         return false;
     }
-    
+
     public void setInventorySlotContents(int slots, final ItemStack stack) {
         ItemStack[] itemStack3 = this.mainInventory;
@@ -105,5 +109,5 @@
         itemStack3[slots] = stack;
     }
-    
+
     public float getStrVsBlock(final Block block) {
         float f2 = 1.0f;
@@ -113,10 +117,10 @@
         return f2;
     }
-    
+
     public NBTTagList writeToNBT(final NBTTagList nbttaglist) {
         for (int i2 = 0; i2 < this.mainInventory.length; ++i2) {
             if (this.mainInventory[i2] != null) {
                 final NBTTagCompound nBTTagCompound3 = new NBTTagCompound();
-                nBTTagCompound3.setByte("Slot", (byte)i2);
+                nBTTagCompound3.setByte("Slot", (byte) i2);
                 this.mainInventory[i2].writeToNBT(nBTTagCompound3);
                 nbttaglist.setTag(nBTTagCompound3);
@@ -126,5 +130,5 @@
             if (this.armorInventory[i2] != null) {
                 final NBTTagCompound nBTTagCompound3 = new NBTTagCompound();
-                nBTTagCompound3.setByte("Slot", (byte)(i2 + 100));
+                nBTTagCompound3.setByte("Slot", (byte) (i2 + 100));
                 this.armorInventory[i2].writeToNBT(nBTTagCompound3);
                 nbttaglist.setTag(nBTTagCompound3);
@@ -134,5 +138,5 @@
             if (this.craftingInventory[i2] != null) {
                 final NBTTagCompound nBTTagCompound3 = new NBTTagCompound();
-                nBTTagCompound3.setByte("Slot", (byte)(i2 + 80));
+                nBTTagCompound3.setByte("Slot", (byte) (i2 + 80));
                 this.craftingInventory[i2].writeToNBT(nBTTagCompound3);
                 nbttaglist.setTag(nBTTagCompound3);
@@ -141,5 +145,5 @@
         return nbttaglist;
     }
-    
+
     public void readFromNBT(final NBTTagList nbttaglist) {
         this.mainInventory = new ItemStack[36];
@@ -147,5 +151,5 @@
         this.craftingInventory = new ItemStack[4];
         for (int i2 = 0; i2 < nbttaglist.tagCount(); ++i2) {
-            final NBTTagCompound nBTTagCompound3 = (NBTTagCompound)nbttaglist.tagAt(i2);
+            final NBTTagCompound nBTTagCompound3 = (NBTTagCompound) nbttaglist.tagAt(i2);
             final int i3 = nBTTagCompound3.getByte("Slot") & 0xFF;
             if (i3 >= 0 && i3 < this.mainInventory.length) {
@@ -160,9 +164,9 @@
         }
     }
-    
+
     public int getSizeInventory() {
         return this.mainInventory.length + 4;
     }
-    
+
     public ItemStack getStackInSlot(int slot) {
         ItemStack[] itemStack2 = this.mainInventory;
@@ -177,9 +181,9 @@
         return itemStack2[slot];
     }
-    
+
     public int getInventoryStackLimit() {
         return 64;
     }
-    
+
     public boolean canHarvestBlock(final Block block) {
         if (block.material != Material.rock && block.material != Material.iron && block.material != Material.craftedSnow && block.material != Material.snow) {
@@ -189,5 +193,5 @@
         return itemStack2 != null && itemStack2.canHarvestBlock(block);
     }
-    
+
     public int getTotalArmorValue() {
         int i1 = 0;
@@ -201,5 +205,5 @@
                 i2 += i7;
                 i3 += i5;
-                final int i8 = ((ItemArmor)this.armorInventory[i4].getItem()).damageReduceAmount;
+                final int i8 = ((ItemArmor) this.armorInventory[i4].getItem()).damageReduceAmount;
                 i1 += i8;
             }
@@ -210,5 +214,5 @@
         return (i1 - 1) * i2 / i3 + 1;
     }
-    
+
     public void damageArmor(final int damage) {
         for (int i2 = 0; i2 < this.armorInventory.length; ++i2) {
@@ -222,5 +226,5 @@
         }
     }
-    
+
     public void dropAllItems() {
         for (int i1 = 0; i1 < this.mainInventory.length; ++i1) {
@@ -237,3 +241,424 @@
         }
     }
+
+    /**
+     * Get all ItemStacks from the armor slots
+     *
+     * @return All the ItemStacks from the armor slots
+     */
+    @Override
+    public org.bukkit.inventory.ItemStack[] getArmorContents() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Put the given ItemStacks into the armor slots
+     *
+     * @param items The ItemStacks to use as armour
+     */
+    @Override
+    public void setArmorContents(org.bukkit.inventory.ItemStack[] items) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Return the ItemStack from the helmet slot
+     *
+     * @return The ItemStack in the helmet slot
+     */
+    @Override
+    public org.bukkit.inventory.ItemStack getHelmet() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Put the given ItemStack into the helmet slot
+     * This does not check if the ItemStack is a helmet
+     *
+     * @param helmet The ItemStack to use as helmet
+     */
+    @Override
+    public void setHelmet(org.bukkit.inventory.ItemStack helmet) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Return the ItemStack from the chestplate slot
+     *
+     * @return The ItemStack in the chestplate slot
+     */
+    @Override
+    public org.bukkit.inventory.ItemStack getChestplate() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Put the given ItemStack into the chestplate slot
+     * This does not check if the ItemStack is a chestplate
+     *
+     * @param chestplate The ItemStack to use as chestplate
+     */
+    @Override
+    public void setChestplate(org.bukkit.inventory.ItemStack chestplate) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Return the ItemStack from the leg slot
+     *
+     * @return The ItemStack in the leg slot
+     */
+    @Override
+    public org.bukkit.inventory.ItemStack getLeggings() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Put the given ItemStack into the leg slot
+     * This does not check if the ItemStack is a pair of leggings
+     *
+     * @param leggings The ItemStack to use as leggings
+     */
+    @Override
+    public void setLeggings(org.bukkit.inventory.ItemStack leggings) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Return the ItemStack from the boots slot
+     *
+     * @return The ItemStack in the boots slot
+     */
+    @Override
+    public org.bukkit.inventory.ItemStack getBoots() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Put the given ItemStack into the boots slot
+     * This does not check if the ItemStack is a boots
+     *
+     * @param boots The ItemStack to use as boots
+     */
+    @Override
+    public void setBoots(org.bukkit.inventory.ItemStack boots) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Returns the ItemStack currently hold
+     *
+     * @return The currently held ItemStack
+     */
+    @Override
+    public org.bukkit.inventory.ItemStack getItemInHand() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Sets the item in hand
+     *
+     * @param stack Stack to set
+     */
+    @Override
+    public void setItemInHand(org.bukkit.inventory.ItemStack stack) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Get the slot number of the currently held item
+     *
+     * @return Held item slot number
+     */
+    @Override
+    public int getHeldItemSlot() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Returns the size of the inventory
+     *
+     * @return The inventory size
+     */
+    @Override
+    public int getSize() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Return the name of the inventory
+     *
+     * @return The inventory name
+     */
+    @Override
+    public String getName() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Get the ItemStack found in the slot at the given index
+     *
+     * @param index The index of the Slot's ItemStack to return
+     * @return The ItemStack in the slot
+     */
+    @Override
+    public org.bukkit.inventory.ItemStack getItem(int index) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Stores the ItemStack at the given index
+     *
+     * @param index The index where to put the ItemStack
+     * @param item  The ItemStack to set
+     */
+    @Override
+    public void setItem(int index, org.bukkit.inventory.ItemStack item) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Stores the given ItemStacks in the inventory.
+     * <p>
+     * This will try to fill existing stacks and empty slots as good as it can.
+     * It will return a HashMap of what it couldn't fit.
+     *
+     * @param items The ItemStacks to add
+     * @return
+     */
+    @Override
+    public HashMap<Integer, org.bukkit.inventory.ItemStack> addItem(org.bukkit.inventory.ItemStack... items) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Removes the given ItemStacks from the inventory.
+     * <p>
+     * It will try to remove 'as much as possible' from the types and amounts you
+     * give as arguments. It will return a HashMap of what it couldn't remove.
+     *
+     * @param items The ItemStacks to remove
+     * @return
+     */
+    @Override
+    public HashMap<Integer, org.bukkit.inventory.ItemStack> removeItem(org.bukkit.inventory.ItemStack... items) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Get all ItemStacks from the inventory
+     *
+     * @return All the ItemStacks from all slots
+     */
+    @Override
+    public org.bukkit.inventory.ItemStack[] getContents() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Set the inventory's contents
+     *
+     * @param items
+     * @return All the ItemStacks from all slots
+     */
+    @Override
+    public void setContents(org.bukkit.inventory.ItemStack[] items) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Check if the inventory contains any ItemStacks with the given materialId
+     *
+     * @param materialId The materialId to check for
+     * @return If any ItemStacks were found
+     */
+    @Override
+    public boolean contains(int materialId) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Check if the inventory contains any ItemStacks with the given material
+     *
+     * @param material The material to check for
+     * @return If any ItemStacks were found
+     */
+    @Override
+    public boolean contains(org.bukkit.Material material) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Check if the inventory contains any ItemStacks matching the given ItemStack
+     * This will only match if both the type and the amount of the stack match
+     *
+     * @param item The ItemStack to match against
+     * @return If any matching ItemStacks were found
+     */
+    @Override
+    public boolean contains(org.bukkit.inventory.ItemStack item) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Check if the inventory contains any ItemStacks with the given materialId and at least the minimum amount specified
+     *
+     * @param materialId The materialId to check for
+     * @param amount     The minimum amount to look for
+     * @return If any ItemStacks were found
+     */
+    @Override
+    public boolean contains(int materialId, int amount) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Check if the inventory contains any ItemStacks with the given material and at least the minimum amount specified
+     *
+     * @param material The material to check for
+     * @param amount
+     * @return If any ItemStacks were found
+     */
+    @Override
+    public boolean contains(org.bukkit.Material material, int amount) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Check if the inventory contains any ItemStacks matching the given ItemStack and at least the minimum amount specified
+     * This will only match if both the type and the amount of the stack match
+     *
+     * @param item   The ItemStack to match against
+     * @param amount
+     * @return If any matching ItemStacks were found
+     */
+    @Override
+    public boolean contains(org.bukkit.inventory.ItemStack item, int amount) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Find all slots in the inventory containing any ItemStacks with the given materialId
+     *
+     * @param materialId The materialId to look for
+     * @return The Slots found.
+     */
+    @Override
+    public HashMap<Integer, ? extends org.bukkit.inventory.ItemStack> all(int materialId) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Find all slots in the inventory containing any ItemStacks with the given material
+     *
+     * @param material@return The Slots found.
+     */
+    @Override
+    public HashMap<Integer, ? extends org.bukkit.inventory.ItemStack> all(org.bukkit.Material material) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Find all slots in the inventory containing any ItemStacks with the given ItemStack
+     * This will only match slots if both the type and the amount of the stack match
+     *
+     * @param item The ItemStack to match against
+     * @return The Slots found.
+     */
+    @Override
+    public HashMap<Integer, ? extends org.bukkit.inventory.ItemStack> all(org.bukkit.inventory.ItemStack item) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Find the first slot in the inventory containing an ItemStack with the given materialId
+     *
+     * @param materialId The materialId to look for
+     * @return The Slot found.
+     */
+    @Override
+    public int first(int materialId) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Find the first slot in the inventory containing an ItemStack with the given material
+     *
+     * @param material@return The Slot found.
+     */
+    @Override
+    public int first(org.bukkit.Material material) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Find the first slot in the inventory containing an ItemStack with the given stack
+     * This will only match a slot if both the type and the amount of the stack match
+     *
+     * @param item The ItemStack to match against
+     * @return The Slot found.
+     */
+    @Override
+    public int first(org.bukkit.inventory.ItemStack item) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Find the first empty Slot.
+     *
+     * @return The first empty Slot found.
+     */
+    @Override
+    public int firstEmpty() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Remove all stacks in the inventory matching the given materialId.
+     *
+     * @param materialId The material to remove
+     */
+    @Override
+    public void remove(int materialId) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Remove all stacks in the inventory matching the given material.
+     *
+     * @param material The material to remove
+     */
+    @Override
+    public void remove(org.bukkit.Material material) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Remove all stacks in the inventory matching the given stack.
+     * This will only match a slot if both the type and the amount of the stack match
+     *
+     * @param item The ItemStack to match against
+     */
+    @Override
+    public void remove(org.bukkit.inventory.ItemStack item) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Clear out a particular slot in the index
+     *
+     * @param index The index to empty.
+     */
+    @Override
+    public void clear(int index) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Clear out the whole index
+     */
+    @Override
+    public void clear() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
 }
