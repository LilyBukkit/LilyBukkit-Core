--- InventoryPlayer.java
+++ InventoryPlayer.java
@@ -8,5 +8,5 @@
     private EntityPlayer player;
     public boolean inventoryChanged;
-    
+
     public InventoryPlayer(final EntityPlayer entityPlayer) {
         this.mainInventory = new ItemStack[36];
@@ -17,9 +17,9 @@
         this.player = entityPlayer;
     }
-    
+
     public ItemStack getCurrentItem() {
         return this.mainInventory[this.currentItem];
     }
-    
+
     private int storeItemStack(final int itemID) {
         for (int i2 = 0; i2 < this.mainInventory.length; ++i2) {
@@ -30,5 +30,5 @@
         return -1;
     }
-    
+
     private int getFirstEmptyStack() {
         for (int i1 = 0; i1 < this.mainInventory.length; ++i1) {
@@ -39,5 +39,5 @@
         return -1;
     }
-    
+
     private int storePartialItemStack(final int itemID, int i2) {
         int i3 = this.storeItemStack(itemID);
@@ -67,5 +67,21 @@
         return i2;
     }
-    
+
+    // CraftBukkit start
+    public int canHold(ItemStack itemstack) {
+        int remains = itemstack.stackSize;
+        for (int i = 0; i < this.mainInventory.length; ++i) {
+            if (this.mainInventory[i] == null) return itemstack.stackSize;
+
+            // Taken from firstPartial(ItemStack)
+            if (this.mainInventory[i] != null && this.mainInventory[i].itemID == itemstack.itemID && this.mainInventory[i].getItem().maxStackSize > 1 && this.mainInventory[i].stackSize < this.mainInventory[i].getMaxStackSize() && this.mainInventory[i].stackSize < 64 && (this.mainInventory[i].itemDmg == itemstack.itemDmg)) {
+                remains -= (Math.min(this.mainInventory[i].getMaxStackSize(), 64)) - this.mainInventory[i].stackSize;
+            }
+            if (remains <= 0) return itemstack.stackSize;
+        }
+        return itemstack.stackSize - remains;
+    }
+    // CraftBukkit end
+
     public void decrementAnimations() {
         for (int i1 = 0; i1 < this.mainInventory.length; ++i1) {
@@ -76,5 +92,5 @@
         }
     }
-    
+
     public boolean addItemStackToInventory(final ItemStack stack) {
         if (stack.itemDmg == 0) {
@@ -92,5 +108,5 @@
         return false;
     }
-    
+
     public void setInventorySlotContents(int slots, final ItemStack stack) {
         ItemStack[] itemStack3 = this.mainInventory;
@@ -105,5 +121,5 @@
         itemStack3[slots] = stack;
     }
-    
+
     public float getStrVsBlock(final Block block) {
         float f2 = 1.0f;
@@ -113,10 +129,10 @@
         return f2;
     }
-    
+
     public NBTTagList writeToNBT(final NBTTagList nbttaglist) {
         for (int i2 = 0; i2 < this.mainInventory.length; ++i2) {
             if (this.mainInventory[i2] != null) {
                 final NBTTagCompound nBTTagCompound3 = new NBTTagCompound();
-                nBTTagCompound3.setByte("Slot", (byte)i2);
+                nBTTagCompound3.setByte("Slot", (byte) i2);
                 this.mainInventory[i2].writeToNBT(nBTTagCompound3);
                 nbttaglist.setTag(nBTTagCompound3);
@@ -126,5 +142,5 @@
             if (this.armorInventory[i2] != null) {
                 final NBTTagCompound nBTTagCompound3 = new NBTTagCompound();
-                nBTTagCompound3.setByte("Slot", (byte)(i2 + 100));
+                nBTTagCompound3.setByte("Slot", (byte) (i2 + 100));
                 this.armorInventory[i2].writeToNBT(nBTTagCompound3);
                 nbttaglist.setTag(nBTTagCompound3);
@@ -134,5 +150,5 @@
             if (this.craftingInventory[i2] != null) {
                 final NBTTagCompound nBTTagCompound3 = new NBTTagCompound();
-                nBTTagCompound3.setByte("Slot", (byte)(i2 + 80));
+                nBTTagCompound3.setByte("Slot", (byte) (i2 + 80));
                 this.craftingInventory[i2].writeToNBT(nBTTagCompound3);
                 nbttaglist.setTag(nBTTagCompound3);
@@ -141,5 +157,5 @@
         return nbttaglist;
     }
-    
+
     public void readFromNBT(final NBTTagList nbttaglist) {
         this.mainInventory = new ItemStack[36];
@@ -147,5 +163,5 @@
         this.craftingInventory = new ItemStack[4];
         for (int i2 = 0; i2 < nbttaglist.tagCount(); ++i2) {
-            final NBTTagCompound nBTTagCompound3 = (NBTTagCompound)nbttaglist.tagAt(i2);
+            final NBTTagCompound nBTTagCompound3 = (NBTTagCompound) nbttaglist.tagAt(i2);
             final int i3 = nBTTagCompound3.getByte("Slot") & 0xFF;
             if (i3 >= 0 && i3 < this.mainInventory.length) {
@@ -160,9 +176,9 @@
         }
     }
-    
+
     public int getSizeInventory() {
         return this.mainInventory.length + 4;
     }
-    
+
     public ItemStack getStackInSlot(int slot) {
         ItemStack[] itemStack2 = this.mainInventory;
@@ -177,9 +193,9 @@
         return itemStack2[slot];
     }
-    
+
     public int getInventoryStackLimit() {
         return 64;
     }
-    
+
     public boolean canHarvestBlock(final Block block) {
         if (block.material != Material.rock && block.material != Material.iron && block.material != Material.craftedSnow && block.material != Material.snow) {
@@ -189,5 +205,5 @@
         return itemStack2 != null && itemStack2.canHarvestBlock(block);
     }
-    
+
     public int getTotalArmorValue() {
         int i1 = 0;
@@ -201,5 +217,5 @@
                 i2 += i7;
                 i3 += i5;
-                final int i8 = ((ItemArmor)this.armorInventory[i4].getItem()).damageReduceAmount;
+                final int i8 = ((ItemArmor) this.armorInventory[i4].getItem()).damageReduceAmount;
                 i1 += i8;
             }
@@ -210,5 +226,5 @@
         return (i1 - 1) * i2 / i3 + 1;
     }
-    
+
     public void damageArmor(final int damage) {
         for (int i2 = 0; i2 < this.armorInventory.length; ++i2) {
@@ -222,5 +238,5 @@
         }
     }
-    
+
     public void dropAllItems() {
         for (int i1 = 0; i1 < this.mainInventory.length; ++i1) {
