--- BlockStairs.java
+++ BlockStairs.java
@@ -1,10 +1,10 @@
 package net.minecraft.src;
 
-import java.util.Random;
 import java.util.ArrayList;
+import java.util.Random;
 
 public class BlockStairs extends Block {
     private Block modelBlock;
-    
+
     protected BlockStairs(final int id, final Block modelBlock) {
         super(id, modelBlock.blockIndexInTexture, modelBlock.material);
@@ -14,20 +14,20 @@
         this.setStepSound(modelBlock.stepSound);
     }
-    
+
     @Override
     public boolean isOpaqueCube() {
         return false;
     }
-    
+
     @Override
     public int getRenderType() {
         return 10;
     }
-    
+
     @Override
     public boolean shouldSideBeRendered(final IBlockAccess blockAccess, final int x, final int y, final int z, final int side) {
         return super.shouldSideBeRendered(blockAccess, x, y, z, side);
     }
-    
+
     @Override
     public void getCollidingBoundingBoxes(final World world, final int x, final int y, final int z, final AxisAlignedBB aabb, final ArrayList arrayList) {
@@ -38,18 +38,15 @@
             this.setBlockBounds(0.5f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f);
             super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList);
-        }
-        else if (i7 == 1) {
+        } else if (i7 == 1) {
             this.setBlockBounds(0.0f, 0.0f, 0.0f, 0.5f, 1.0f, 1.0f);
             super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList);
             this.setBlockBounds(0.5f, 0.0f, 0.0f, 1.0f, 0.5f, 1.0f);
             super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList);
-        }
-        else if (i7 == 2) {
+        } else if (i7 == 2) {
             this.setBlockBounds(0.0f, 0.0f, 0.0f, 1.0f, 0.5f, 0.5f);
             super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList);
             this.setBlockBounds(0.0f, 0.0f, 0.5f, 1.0f, 1.0f, 1.0f);
             super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList);
-        }
-        else if (i7 == 3) {
+        } else if (i7 == 3) {
             this.setBlockBounds(0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.5f);
             super.getCollidingBoundingBoxes(world, x, y, z, aabb, arrayList);
@@ -59,5 +56,5 @@
         this.setBlockBounds(0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f);
     }
-    
+
     @Override
     public void onNeighborBlockChange(final World world, final int x, final int y, final int z, final int flag) {
@@ -65,6 +62,5 @@
             if (world.getBlockMaterial(x, y + 1, z).isSolid()) {
                 world.setBlockWithNotify(x, y, z, this.modelBlock.blockID);
-            }
-            else {
+            } else {
                 this.updateState(world, x, y, z);
                 this.updateState(world, x + 1, y - 1, z);
@@ -80,5 +76,5 @@
         }
     }
-    
+
     private void updateState(final World world, final int x, final int y, final int z) {
         if (this.isBlockStair(world, x, y, z)) {
@@ -129,69 +125,69 @@
         }
     }
-    
+
     private boolean isBlockSolid(final World world, final int x, final int y, final int z) {
         return world.getBlockMaterial(x, y, z).isSolid();
     }
-    
+
     private boolean isBlockStair(final World world, final int x, final int y, final int z) {
         final int i5 = world.getBlockId(x, y, z);
         return i5 != 0 && Block.blocksList[i5].getRenderType() == 10;
     }
-    
+
     @Override
     public void onBlockClicked(final World world, final int x, final int y, final int z, final EntityPlayer entityPlayer) {
         this.modelBlock.onBlockClicked(world, x, y, z, entityPlayer);
     }
-    
+
     @Override
     public void onBlockDestroyedByPlayer(final World world, final int x, final int y, final int z, final int flag) {
         this.modelBlock.onBlockDestroyedByPlayer(world, x, y, z, flag);
     }
-    
+
     @Override
     public float getExplosionResistance(final Entity entity) {
         return this.modelBlock.getExplosionResistance(entity);
     }
-    
+
     @Override
     public int idDropped(final int count, final Random random) {
         return this.modelBlock.idDropped(count, random);
     }
-    
+
     @Override
     public int quantityDropped(final Random random) {
         return this.modelBlock.quantityDropped(random);
     }
-    
+
     @Override
     public int getBlockTextureFromSide(final int side) {
         return this.modelBlock.getBlockTextureFromSide(side);
     }
-    
+
     @Override
     public int tickRate() {
         return this.modelBlock.tickRate();
     }
-    
+
     @Override
     public void velocityToAddToEntity(final World world, final int x, final int y, final int z, final Entity entity, final Vec3D vector) {
         this.modelBlock.velocityToAddToEntity(world, x, y, z, entity, vector);
     }
-    
+
     @Override
     public boolean isCollidable() {
         return this.modelBlock.isCollidable();
     }
-    
+
     @Override
     public boolean canCollideCheck(final int i1, final boolean z2) {
         return this.modelBlock.canCollideCheck(i1, z2);
     }
-    
+
     @Override
     public boolean canPlaceBlockAt(final World world, final int x, final int y, final int z) {
         return this.modelBlock.canPlaceBlockAt(world, x, y, z);
     }
-    
+
     @Override
     public void onBlockAdded(final World world, final int x, final int y, final int z) {
@@ -199,35 +195,35 @@
         this.modelBlock.onBlockAdded(world, x, y, z);
     }
-    
+
     @Override
     public void onBlockRemoval(final World world, final int x, final int y, final int z) {
         this.modelBlock.onBlockRemoval(world, x, y, z);
     }
-    
+
     @Override
     public void dropBlockAsItemWithChance(final World world, final int x, final int y, final int z, final int i5, final float f6) {
         this.modelBlock.dropBlockAsItemWithChance(world, x, y, z, i5, f6);
     }
-    
+
     @Override
     public void dropBlockAsItem(final World world, final int i2, final int i3, final int i4, final int i5) {
         this.modelBlock.dropBlockAsItem(world, i2, i3, i4, i5);
     }
-    
+
     @Override
     public void onEntityWalking(final World world, final int x, final int y, final int z, final Entity entity) {
         this.modelBlock.onEntityWalking(world, x, y, z, entity);
     }
-    
+
     @Override
     public void updateTick(final World world, final int x, final int y, final int z, final Random random) {
         this.modelBlock.updateTick(world, x, y, z, random);
     }
-    
+
     @Override
     public boolean blockActivated(final World world, final int x, final int y, final int z, final EntityPlayer entityPlayer) {
         return this.modelBlock.blockActivated(world, x, y, z, entityPlayer);
     }
-    
+
     @Override
     public void onBlockDestroyedByExplosion(final World world, final int x, final int y, final int z) {
