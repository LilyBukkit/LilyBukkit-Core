--- EntitySlime.java
+++ EntitySlime.java
@@ -1,10 +1,13 @@
 package net.minecraft.src;
 
-public class EntitySlime extends EntityLiving implements IMobs {
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Slime;
+
+public class EntitySlime extends EntityLiving implements IMobs, Slime {
     public float squishFactor;
     public float prevSquishFactor;
-    private int slimeJumpDelay;
     public int size;
-    
+    private int slimeJumpDelay;
+
     public EntitySlime(final World world) {
         super(world);
@@ -17,5 +20,5 @@
         this.setSlimeSize(this.size);
     }
-    
+
     public void setSlimeSize(final int size) {
         this.size = size;
@@ -24,5 +27,5 @@
         this.setPosition(this.posX, this.posY, this.posZ);
     }
-    
+
     @Override
     public void writeEntityToNBT(final NBTTagCompound nbttagcompound) {
@@ -30,5 +33,5 @@
         nbttagcompound.setInteger("Size", this.size - 1);
     }
-    
+
     @Override
     public void readEntityFromNBT(final NBTTagCompound nbttagcompound) {
@@ -36,5 +39,5 @@
         this.size = nbttagcompound.getInteger("Size") + 1;
     }
-    
+
     @Override
     public void onUpdate() {
@@ -51,5 +54,5 @@
             }
             if (this.size > 2) {
-                this.worldObj.playSoundAtEntity((Entity)this, "mob.slime", this.getSoundVolume(), ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2f + 1.0f) / 0.8f);
+                this.worldObj.playSoundAtEntity((Entity) this, "mob.slime", this.getSoundVolume(), ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2f + 1.0f) / 0.8f);
             }
             this.squishFactor = -0.5f;
@@ -57,5 +60,5 @@
         this.squishFactor *= 0.6f;
     }
-    
+
     @Override
     protected void updateEntityActionState() {
@@ -71,11 +74,10 @@
             this.isJumping = true;
             if (this.size > 1) {
-                this.worldObj.playSoundAtEntity((Entity)this, "mob.slime", this.getSoundVolume(), ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2f + 1.0f) * 0.8f);
+                this.worldObj.playSoundAtEntity((Entity) this, "mob.slime", this.getSoundVolume(), ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2f + 1.0f) * 0.8f);
             }
             this.squishFactor = 1.0f;
             this.moveStrafing = 1.0f - this.rand.nextFloat() * 2.0f;
-            this.moveForward = (float)(1 * this.size);
-        }
-        else {
+            this.moveForward = (float) (1 * this.size);
+        } else {
             this.isJumping = false;
             if (this.onGround) {
@@ -86,5 +88,5 @@
         }
     }
-    
+
     @Override
     public void setEntityDead() {
@@ -101,27 +103,27 @@
         super.setEntityDead();
     }
-    
+
     @Override
     public void onCollideWithPlayer(final EntityPlayer entityPlayer) {
         if (this.size > 1 && this.canEntityBeSeen(entityPlayer) && this.getDistanceToEntity(entityPlayer) < 0.6 * this.size && entityPlayer.attackEntityFrom(this, this.size)) {
-            this.worldObj.playSoundAtEntity((Entity)this, "mob.slimeattack", 1.0f, (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2f + 1.0f);
+            this.worldObj.playSoundAtEntity((Entity) this, "mob.slimeattack", 1.0f, (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2f + 1.0f);
         }
     }
-    
+
     @Override
     protected String getHurtSound() {
         return "mob.slime";
     }
-    
+
     @Override
     protected String getDeathSound() {
         return "mob.slime";
     }
-    
+
     @Override
     protected int getDropItemId() {
         return (this.size == 1) ? Item.slimeBall.shiftedIndex : 0;
     }
-    
+
     @Override
     public boolean getCanSpawnHere() {
@@ -129,8 +131,58 @@
         return (this.size == 1 || this.worldObj.difficultySetting > 0) && this.rand.nextInt(10) == 0 && chunk1.getRandomWithSeed(987234911L).nextInt(10) == 0 && this.posY < 16.0;
     }
-    
+
     @Override
     protected float getSoundVolume() {
         return 0.6f;
     }
+
+    /**
+     * Gets the height of the entity's head above its Location
+     *
+     * @return Height of the entity's eyes above its Location
+     */
+    @Override
+    public double getEyeHeight() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets the current target of this Creature
+     *
+     * @return Current target of this creature, or null if none exists
+     */
+    @Override
+    public LivingEntity getTarget() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Instructs this Creature to set the specified LivingEntity as its target.
+     * Hostile creatures may attack their target, and friendly creatures may
+     * follow their target.
+     *
+     * @param target New LivingEntity to target, or null to clear the target
+     */
+    @Override
+    public void setTarget(LivingEntity target) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * @return The size of the slime
+     * @author Celtic Minstrel
+     */
+    @Override
+    public int getSize() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * @param sz The new size of the slime.
+     * @author Celtic Minstrel
+     */
+    @Override
+    public void setSize(int sz) {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
 }
