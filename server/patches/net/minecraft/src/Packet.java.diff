--- Packet.java
+++ Packet.java
@@ -1,6 +1,6 @@
 package net.minecraft.src;
 
-import java.io.DataOutputStream;
 import java.io.DataInputStream;
+import java.io.DataOutputStream;
 import java.io.IOException;
 import java.util.HashMap;
@@ -10,9 +10,8 @@
     private static Map packetIdToClassMap;
     private static Map packetClassToIdMap;
-    public boolean isChunkDataPacket;
-    
+
     static {
-        Packet.packetIdToClassMap = (Map)new HashMap();
-        Packet.packetClassToIdMap = (Map)new HashMap();
+        Packet.packetIdToClassMap = (Map) new HashMap();
+        Packet.packetClassToIdMap = (Map) new HashMap();
         addIdClassMapping(0, Packet0KeepAlive.class);
         addIdClassMapping(1, Packet1Login.class);
@@ -49,9 +48,11 @@
         addIdClassMapping(255, Packet255KickDisconnect.class);
     }
-    
+
+    public boolean isChunkDataPacket;
+
     public Packet() {
         this.isChunkDataPacket = false;
     }
-    
+
     static void addIdClassMapping(final int id, final Class clazz) {
         if (Packet.packetIdToClassMap.containsKey(id)) {
@@ -64,11 +65,10 @@
         Packet.packetClassToIdMap.put(clazz, id);
     }
-    
+
     public static Packet getNewPacket(final int id) {
         try {
-            final Class class1 = (Class)Packet.packetIdToClassMap.get(id);
-            return (class1 == null) ? null : ((Packet)class1.newInstance());
-        }
-        catch (Exception exception2) {
+            final Class class1 = (Class) Packet.packetIdToClassMap.get(id);
+            return (class1 == null) ? null : ((Packet) class1.newInstance());
+        } catch (Exception exception2) {
             exception2.printStackTrace();
             System.out.println(new StringBuilder("Skipping packet with id ").append(id).toString());
@@ -76,9 +76,5 @@
         }
     }
-    
-    public final int getPacketId() throws IOException {
-        return (int)Packet.packetClassToIdMap.get(this.getClass());
-    }
-    
+
     public static Packet readPacket(final DataInputStream dataInputStream) throws IOException {
         final int i1 = dataInputStream.read();
@@ -93,16 +89,20 @@
         return packet2;
     }
-    
+
     public static void writePacket(final Packet packet, final DataOutputStream dataOutputStream) throws IOException {
         dataOutputStream.write(packet.getPacketId());
         packet.writePacket(dataOutputStream);
     }
-    
+
+    public final int getPacketId() throws IOException {
+        return (int) Packet.packetClassToIdMap.get(this.getClass());
+    }
+
     public abstract void readPacketData(final DataInputStream dataInputStream) throws IOException;
-    
+
     public abstract void writePacket(final DataOutputStream dataOutputStream) throws IOException;
-    
+
     public abstract void processPacket(final NetHandler netHandler);
-    
+
     public abstract int getPacketSize();
 }
