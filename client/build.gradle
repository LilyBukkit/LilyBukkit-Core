import java.nio.file.*

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'com.brambolt.gradle.patching' version '2022.05.01-7057'
}

repositories {
    mavenCentral()
}

dependencies {
    shadow files('../libs/codecjorbis-20101023.jar')
    shadow files('../libs/codecwav-20101023.jar')
    shadow files('../libs/libraryjavasound-20101123.jar')
    shadow files('../libs/librarylwjglopenal-20100824.jar')
    implementation files('../libs/lwjgl-2.9.1-nightly-20130708.jar')
    implementation files('../libs/lwjgl_util-2.9.1-nightly-20130708.jar')
    shadow files('../libs/soundsystem-20120107.jar')
    shadow group: 'org.json', name: 'json', version: '20220320'
    implementation group: 'org.json', name: 'json', version: '20220320' // we do this to get the path of it
}

jar {
    manifest {
        attributes "Main-Class": "net.minecraft.client.Minecraft"
    }
}

abstract class DeletePatches extends DefaultTask {

	@Input
	String rmPath = "none";

    static def rm(Path path) {
        File file = new File(path.toString())
        if (file.isDirectory()) {
            for (File sf : file.listFiles()) {
                rm(sf.toPath())
            }
        }
        file.delete()
    }
	
	@TaskAction
	def delete() {
		rm(Paths.get(rmPath))
	}
}

abstract class InjectClasses extends DefaultTask {
	
	@Input
	String source = "none";
	@Input
	String dest = "none";
	
    static def cp(Path source, Path dest) {
        File file = new File(source.toString())
        if (file.isDirectory()) {
        	dest.toFile().mkdirs()
            for (String sf : file.list()) {
            	cp(source.resolve(sf), dest.resolve(sf))
            }
        }
        else if (file.isFile()) {
        	Files.copy(source, dest, StandardCopyOption.REPLACE_EXISTING)
        }
    }
	
	@TaskAction
	def copy() {
		cp(Paths.get(source), Paths.get(dest))
	}
}

abstract class CreateInjectClasses extends DefaultTask {

	@Input
	String source = "none";
	@Input
	String orig = "none";
	@Input
	String dest = "none";
	
    static def cpIfMissing(Path source, Path check, Path dest) {
        File file = source.toFile()
        if (file.isDirectory()) {
            for (String sf : file.list()) {
            	cpIfMissing(source.resolve(sf), check.resolve(sf), dest.resolve(sf))
            }
        }
        else if (file.isFile() && !check.toFile().exists()) {
        	dest.parent.toFile().mkdirs();
        	Files.copy(source, dest, StandardCopyOption.REPLACE_EXISTING)
        }
    }
    
    static def rm(Path path) {
        File file = new File(path.toString())
        if (file.isDirectory()) {
            for (File sf : file.listFiles()) {
                rm(sf.toPath())
            }
        }
        file.delete()
    }
	
	@TaskAction
	def copy() {
		rm(Paths.get(dest))
		cpIfMissing(Paths.get(source), Paths.get(orig), Paths.get(dest))
	}
}

FileCollection getLilypadClasspath(FileCollection originalCollection, String libraryFolder) {
    File libFolder = new File(libraryFolder)

    ArrayList<File> finalList = libFolder.listFiles()

    // Remove files from libFolder that original already has
    for (File libraryFile : libFolder.listFiles()) {
        for (File classpathFile in originalCollection.getFiles()) {
            if (classpathFile.isDirectory()) {
                if (!finalList.contains(classpathFile)) {
                    finalList.add(classpathFile) // for src/main/java and src/main/resources
                }
            } else {
                if (!finalList.contains(classpathFile)) {
                    finalList.add(classpathFile)
                }
            }
        }
    }

    return files(finalList)
}

static List<String> getRunJVMArgs(String allocatedMemory, String libDir) {
    List<String> jvmArgs = new ArrayList<String>()
    jvmArgs.add("-Xmx" + allocatedMemory)
    jvmArgs.add("-Xms" + allocatedMemory)
    jvmArgs.add("-Djava.util.Arrays.useLegacyMergeSort=true")
    jvmArgs.add("-Djava.library.path=" + Paths.get(libDir.toString(), "natives/"))
    return jvmArgs
}

static String makeAndGetDir(String dir) {
    File directory = new File(dir)

    if (!directory.exists()) {
        directory.mkdir()
    }

    return directory.getPath()
}

tasks.register("deletePatches", DeletePatches) {
	rmPath = "${projectDir}/patches"
}

tasks.register("injectClasses", InjectClasses) {
	source = "${projectDir}/inject/java"
	dest = "${projectDir}/src/main/java"
}

tasks.register("ejectClasses", CreateInjectClasses) {
	source = "${projectDir}/src/main/java"
	orig = "${projectDir}/src/orig/java"
	dest = "${projectDir}/inject/java"
}

String username = "Player" + new Random().nextInt(999)
String libraryPath = "${projectDir}/../libs/"

task runClient (type: JavaExec) {
    mainClass = "net.minecraft.client.Minecraft"
    classpath = getLilypadClasspath(sourceSets.main.runtimeClasspath, libraryPath)
    argsString = username
    jvmArgs = getRunJVMArgs("1024M", libraryPath)
    workingDir = makeAndGetDir("${projectDir}/run/")
}

processPatches {
    content = "${projectDir}/src/orig/java"
    patches = "${projectDir}/patches"
    destination = "${projectDir}/src/main/java"
}

createPatches {
    content = "${projectDir}/src/orig/java"
    modified = "${projectDir}/src/main/java"
    destination = "${projectDir}/patches"
    dependsOn tasks.named("deletePatches").get()
}

shadowJar {
    configurations = [project.configurations.shadow]
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

group 'net.buj'
version '1.1-SNAPSHOT'
