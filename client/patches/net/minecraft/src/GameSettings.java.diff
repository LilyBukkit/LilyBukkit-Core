--- GameSettings.java
+++ GameSettings.java
@@ -1,17 +1,14 @@
 package net.minecraft.src;
 
-import java.io.Writer;
-import java.io.PrintWriter;
-import java.io.FileWriter;
-import java.io.Reader;
-import java.io.BufferedReader;
-import java.io.FileReader;
+import java.io.*;
 import org.lwjgl.input.Keyboard;
-import java.io.File;
-import net.minecraft.client.Minecraft;
+import java.util.*;
+import net.minecraft.client.*;
+import net.minecraft.src.buttons.*;
 
 public class GameSettings {
-    private static final String[] RENDER_DISTANCES;
-    private static final String[] DIFFICULTY_LEVELS;
+    public static final String[] RENDER_DISTANCES;
+    public static final String[] DIFFICULTY_LEVELS;
+    public static final String[] CHEAT_MENU_MODES;
     public boolean musicVolume;
     public boolean soundVolume;
@@ -23,4 +20,6 @@
     public boolean limitFramerate;
     public boolean fancyGraphics;
+    public boolean acceptRemoteScripts;
+    public boolean renderQAName;
     public KeyBinding keyBindForward;
     public KeyBinding keyBindLeft;
@@ -32,9 +31,12 @@
     public KeyBinding keyBindChat;
     public KeyBinding keyBindToggleFog;
+    public KeyBinding keyBindDash;
+    public KeyBinding keyBindOpenGMEnv;
+    public KeyBinding keyBindHideGUI;
     public KeyBinding[] keyBindings;
-    protected Minecraft mc;
+    public Minecraft mc;
     private File optionsFile;
-    public int numberOfOptions;
     public int difficulty;
+    public int cheatMenuMode;
     public boolean thirdPersonView;
     
@@ -42,4 +44,5 @@
         RENDER_DISTANCES = new String[] { "FAR", "NORMAL", "SHORT", "TINY" };
         DIFFICULTY_LEVELS = new String[] { "Peaceful", "Easy", "Normal", "Hard", "Frail" };
+        CHEAT_MENU_MODES = new String[] { "Default", "One", "Stack", "Inf", "Disabled" };
     }
     
@@ -50,8 +53,11 @@
         this.showFPS = false;
         this.renderDistance = 0;
+        this.cheatMenuMode = 0;
         this.viewBobbing = true;
         this.anaglyph = false;
         this.limitFramerate = false;
         this.fancyGraphics = true;
+        this.acceptRemoteScripts = false;
+        this.renderQAName = true;
         this.keyBindForward = new KeyBinding("Forward", 17);
         this.keyBindLeft = new KeyBinding("Left", 30);
@@ -60,9 +66,11 @@
         this.keyBindJump = new KeyBinding("Jump", 57);
         this.keyBindInventory = new KeyBinding("Inventory", 23);
+        this.keyBindDash = new KeyBinding("Dash", 42);
+        this.keyBindOpenGMEnv = new KeyBinding("Cheat menu", 47);
         this.keyBindDrop = new KeyBinding("Drop", 16);
         this.keyBindChat = new KeyBinding("Chat", 20);
         this.keyBindToggleFog = new KeyBinding("Toggle fog", 33);
-        this.keyBindings = new KeyBinding[] { this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog };
-        this.numberOfOptions = 10;
+        this.keyBindHideGUI = new KeyBinding("Hide GUI", 59);
+        this.keyBindings = new KeyBinding[] { this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog, this.keyBindOpenGMEnv, this.keyBindDash, this.keyBindHideGUI };
         this.difficulty = 2;
         this.thirdPersonView = false;
@@ -78,8 +86,11 @@
         this.showFPS = false;
         this.renderDistance = 0;
+        this.cheatMenuMode = 0;
         this.viewBobbing = true;
         this.anaglyph = false;
         this.limitFramerate = false;
         this.fancyGraphics = true;
+        this.acceptRemoteScripts = false;
+        this.renderQAName = true;
         this.keyBindForward = new KeyBinding("Forward", 17);
         this.keyBindLeft = new KeyBinding("Left", 30);
@@ -88,9 +99,11 @@
         this.keyBindJump = new KeyBinding("Jump", 57);
         this.keyBindInventory = new KeyBinding("Inventory", 23);
+        this.keyBindDash = new KeyBinding("Dash", 42);
+        this.keyBindOpenGMEnv = new KeyBinding("Cheat menu", 47);
         this.keyBindDrop = new KeyBinding("Drop", 16);
         this.keyBindChat = new KeyBinding("Chat", 20);
         this.keyBindToggleFog = new KeyBinding("Toggle fog", 33);
-        this.keyBindings = new KeyBinding[] { this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog };
-        this.numberOfOptions = 10;
+        this.keyBindHideGUI = new KeyBinding("Hide GUI", 59);
+        this.keyBindings = new KeyBinding[] { this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog, this.keyBindOpenGMEnv, this.keyBindDash, this.keyBindHideGUI };
         this.difficulty = 2;
         this.thirdPersonView = false;
@@ -106,4 +119,81 @@
     }
     
+    public int getCheatMenuItemAmount(int type) {
+    	if (type == 1 && this.cheatMenuMode == 0) return 1;
+    	switch (this.cheatMenuMode) {
+    	case 4:
+    		return 0;
+    	case 3:
+    		return -1;
+    	case 1:
+    		return 1;
+    	case 2:
+    	default:
+    		return 64;
+    	}
+    }
+    
+    public GuiOptionsContext getGameOptionsMenuContext() {
+    	GuiOptionsContext context = new GuiOptionsContext();
+    	
+    	context.title = "Game settings";
+    	context.topButtons = new ArrayList<>();
+    	context.bottomButtons = new ArrayList<>();
+    	
+    	context.topButtons.add(new DifficultyButton(this));
+    	context.topButtons.add(new RemoteScriptsButton(this));
+    	context.topButtons.add(new CheatMenuModeButton(this));
+    	
+    	return context;
+    }
+    
+    public GuiOptionsContext getRenderOptionsMenuContext() {
+    	GuiOptionsContext context = new GuiOptionsContext();
+    	
+    	context.title = "Render settings";
+    	context.topButtons = new ArrayList<>();
+    	context.bottomButtons = new ArrayList<>();
+    	
+    	context.topButtons.add(new RenderDistanceButton(this));
+    	context.topButtons.add(new DebugInfoButton(this));
+    	context.topButtons.add(new ViewBobbingButton(this));
+    	context.topButtons.add(new AnaglyphButton(this));
+    	context.topButtons.add(new LimitFramerateButton(this));
+    	context.topButtons.add(new GraphicsModeButton(this));
+    	context.topButtons.add(new GuiScalingButton(this));
+    	context.topButtons.add(new RenderQANameButton(this));
+    	
+    	return context;
+    }
+    
+    public GuiOptionsContext getSoundOptionsMenuContext() {
+    	GuiOptionsContext context = new GuiOptionsContext();
+    	
+    	context.title = "Sound settings";
+    	context.topButtons = new ArrayList<>();
+    	context.bottomButtons = new ArrayList<>();
+    	
+    	context.topButtons.add(new MusicButton(this));
+    	context.topButtons.add(new SoundButton(this));
+    	
+    	return context;
+    }
+    
+    public GuiOptionsContext getMainOptionsMenuContext() {
+    	GuiOptionsContext context = new GuiOptionsContext();
+    	
+    	context.title = "Settings";
+    	context.topButtons = new ArrayList<>();
+    	context.bottomButtons = new ArrayList<>();
+    	
+    	context.topButtons.add(new RenderOptionsButton(this));
+    	context.topButtons.add(new SoundOptionsButton(this));
+    	context.topButtons.add(new GameOptionsButton(this));
+    	
+    	context.bottomButtons.add(new ControlsOptionsButton(this));
+    	
+    	return context;
+    }
+    
     public void setOptionValue(final int optionIndex, final int value) {
         if (optionIndex == 0) {
@@ -141,4 +231,7 @@
             this.mc.renderGlobal.loadRenderers();
         }
+        if (optionIndex == 10) {
+        	this.acceptRemoteScripts = !this.acceptRemoteScripts;
+        }
         this.saveOptions();
     }
@@ -175,4 +268,7 @@
             return new StringBuilder().append("Graphics: ").append(this.fancyGraphics ? "FANCY" : "FAST").toString();
         }
+        if (optionIndex == 10) {
+        	return "Remote Scripts: " + (this.acceptRemoteScripts ? "ASK" : "DENY");
+        }
         return "";
     }
@@ -183,5 +279,5 @@
                 return;
             }
-            final BufferedReader bufferedReader = new BufferedReader((Reader)new FileReader(this.optionsFile));
+            final BufferedReader bufferedReader = new BufferedReader(new FileReader(this.optionsFile));
             String line;
             while ((line = bufferedReader.readLine()) != null) {
@@ -217,4 +313,7 @@
                     this.difficulty = Integer.parseInt(split[1]);
                 }
+                if (split[0].equals("guiScaling")) {
+                    ScaledResolution.guiScaling = Integer.parseInt(split[1]);
+                }
                 if (split[0].equals("a1605ext_gamepadSens")) {
                     InputHandler.lookSens = Integer.parseInt(split[1]);
@@ -223,4 +322,10 @@
                     this.fancyGraphics = split[1].equals("true");
                 }
+                if (split[0].equals("acceptRemoteScripts")) {
+                	this.acceptRemoteScripts = split[1].equals("true");
+                }
+                if (split[0].equals("renderQAName")) {
+                	this.renderQAName = split[1].equals("true");
+                }
                 for (int i = 0; i < this.keyBindings.length; ++i) {
                     if (split[0].equals(new StringBuilder("key_").append(this.keyBindings[i].keyDescription).toString())) {
@@ -238,6 +343,7 @@
     
     public void saveOptions() {
+        PrintWriter printWriter = null;
         try {
-            final PrintWriter printWriter = new PrintWriter((Writer)new FileWriter(this.optionsFile));
+            printWriter = new PrintWriter(new FileWriter(this.optionsFile));
             printWriter.println(new StringBuilder().append("music:").append(this.musicVolume).toString());
             printWriter.println(new StringBuilder().append("sound:").append(this.soundVolume).toString());
@@ -250,4 +356,7 @@
             printWriter.println(new StringBuilder().append("limitFramerate:").append(this.limitFramerate).toString());
             printWriter.println(new StringBuilder().append("fancyGraphics:").append(this.fancyGraphics).toString());
+            printWriter.println(new StringBuilder().append("acceptRemoteScripts:").append(this.acceptRemoteScripts).toString());
+            printWriter.println(new StringBuilder().append("renderQAName:").append(this.renderQAName).toString());
+            printWriter.println(new StringBuilder().append("guiScaling:").append(ScaledResolution.guiScaling).toString());
             printWriter.println("# Settings below are specific to 1605 extension.");
             printWriter.println(new StringBuilder().append("a1605ext_difficulty:").append(this.difficulty).toString());
@@ -256,5 +365,4 @@
                 printWriter.println(new StringBuilder("key_").append(this.keyBindings[i].keyDescription).append(":").append(this.keyBindings[i].keyCode).toString());
             }
-            printWriter.close();
         }
         catch (Exception ex) {
@@ -262,4 +370,11 @@
             ex.printStackTrace();
         }
+        if (printWriter != null) {
+            try {
+                printWriter.close();
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        }
     }
 }
